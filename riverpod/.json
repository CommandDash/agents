"{\"data_sources\":[{\"id\":\"359719735\",\"version\":\"0.0.1\",\"project_objects\":[],\"file_objects\":[{\"id\":\"825379897\",\"type\":\"directory_files\",\"files\":[{\"id\":\"825379897\",\"type\":\"file_object\",\"content\":\"## Part 3: Advanced Features and Applications - Riverpod\\n\\n### 1. AutoDispose Modifier\\n\\n*   **Purpose**: Automatically dispose of providers (especially `FutureProvider` and `StreamProvider`) when they are no longer used, preventing memory leaks and unnecessary resource consumption.\\n*   **Implementation**:\\n\\n```dart\\nfinal authStateChangesProvider = StreamProvider.autoDispose((ref) {\\n  // ...\\n});\\n```\\n\\n*   **Additional functionalities**:\\n    *   `ref.onDispose()`: Perform custom cleanup logic when the provider is disposed. \\n    *   `ref.keepAlive()`: Prevent the provider from being disposed even if no listeners are present.\\n    *   `KeepAliveLink` & Timeout-based caching: Dispose the state after a specified duration.\\n\\n```dart\\nfinal link = ref.keepAlive();\\nfinal timer = Timer(const Duration(seconds: 30), () => link.close());\\nref.onDispose(() => timer.cancel());\\n```\\n\\n### 2. Family Modifier\\n\\n*   **Purpose**: Create parameterized providers that accept arguments, allowing for more dynamic and flexible state management.\\n*   **Implementation**:\\n\\n```dart\\nfinal movieProvider = FutureProvider.family<Movie, int>((ref, movieId) {\\n  // ...\\n});\\n\\n// Usage\\nfinal movieAsync = ref.watch(movieProvider(550));\\n```\\n\\n*   **Limitations**: \\n    *   Directly passing multiple parameters is not supported.\\n    *   Workarounds:\\n        *   Pass a custom object that implements `hashCode` and the equality operator.\\n        *   Use the `riverpod_generator` package for more extensive parameter support. \\n\\n### 3. Dependency Overrides\\n\\n*   **Purpose**: Dynamically replace the behavior of a provider with a different implementation, often used for testing or handling situations where a dependency is not immediately available. \\n*   **Implementation**:\\n\\n```dart\\nfinal sharedPreferencesProvider = Provider((ref) => throw UnimplementedError());\\n\\n// Override\\nrunApp(ProviderScope(\\n  overrides: [\\n    sharedPreferencesProvider.overrideWithValue(sharedPreferences),\\n  ],\\n  child: MyApp(),\\n));\\n```\\n\\n### 4. Combining Providers\\n\\n*   **Purpose**: Create providers that depend on other providers, allowing for modularity and code reuse.\\n*   **Approaches**:\\n    *   **Explicit Dependency**: Watch the required provider within the dependent provider using `ref.watch`.\\n\\n```dart\\nfinal settingsRepositoryProvider = Provider((ref) {\\n  final sharedPreferences = ref.watch(sharedPreferencesProvider);\\n  return SettingsRepository(sharedPreferences);\\n});\\n```\\n\\n    *   **Passing `Ref` as an argument**: Access the required provider implicitly using `ref.read` within the dependent object's methods.\\n\\n```dart\\nclass SettingsRepository {\\n  const SettingsRepository(this.ref);\\n  final Ref ref;\\n\\n  // ...\\n}\\n\\nfinal settingsRepositoryProvider = Provider((ref) => SettingsRepository(ref));\\n```\\n\\n### 5. Scoping Providers\\n\\n*   **Purpose**: Limit the scope of a provider to a specific part of the application, improving performance and preventing unnecessary rebuilds.\\n*   **Implementation**: Use a nested `ProviderScope` with overrides to provide a different value for the provider within a specific subtree.\\n\\n```dart\\nfinal currentProductIndex = Provider((ref) => throw UnimplementedError());\\n\\n// Usage\\nListView.builder(\\n  itemBuilder: (context, index) => ProviderScope(\\n    overrides: [currentProductIndex.overrideWithValue(index)],\\n    child: const ProductItem(),\\n  ),\\n);\\n```\\n\\n### 6. Filtering Widget Rebuilds with `select`\\n\\n*   **Purpose**: Optimize widget rebuilds by only listening to specific properties of a complex object within a provider.\\n*   **Implementation**: Use the `select` method to specify a function that extracts the relevant property. \\n\\n```dart\\nclass BytesReceivedText extends ConsumerWidget {\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final bytesReceived = ref.watch(\\n      connectionProvider.select((connection) => connection.state.bytesReceived),\\n    );\\n    // ...\\n  }\\n}\\n```\\n\\n### 7. Testing with Riverpod\\n\\n*   **Benefits**:\\n    *   Isolated state: Each test has its own `ProviderScope`, preventing state sharing between tests and eliminating the need for setup/teardown.\\n    *   Easy mocking: Dependency overrides allow for replacing real implementations with mocks during tests.\\n*   **Example**:\\n\\n```dart\\ntestWidgets('Override moviesRepositoryProvider', (tester) async {\\n  await tester.pumpWidget(ProviderScope(\\n    overrides: [\\n      moviesRepositoryProvider.overrideWithValue(MockMoviesRepository())\\n    ],\\n    child: MoviesApp(),\\n  ));\\n  // ...\\n});\\n```\\n\\n### 8. Logging with `ProviderObserver`\\n\\n*   **Purpose**: Monitor state changes and debug applications by observing provider updates.\\n*   **Implementation**: Subclass `ProviderObserver` and override the `didUpdateProvider` method.\\n\\n```dart\\nclass Logger extends ProviderObserver {\\n  @override\\n  void didUpdateProvider(\\n    ProviderBase provider,\\n    Object? previousValue,\\n    Object? newValue,\\n    ProviderContainer container,\\n  ) {\\n    print('[${provider.name ?? provider.runtimeType}] value: $newValue');\\n  } \\n}\\n\\n// Usage\\nrunApp(ProviderScope(observers: [Logger()], child: MyApp()));\\n``` \\n\\n### 9. App Architecture with Riverpod \\n\\n*   **Importance**: Choosing a suitable architecture is crucial for managing complexity and maintainability in large applications.\\n*   **Recommendation**: The author proposes a four-layer architecture (data, domain, application, presentation) for building robust Riverpod applications. \"},{\"id\":\"825379897\",\"type\":\"file_object\",\"content\":\"### Why use Riverpod?\\n\\n*   **Limitations of Provider**:\\n    *   Reliance on the widget tree can lead to `ProviderNotFoundException`.\\n    *   Logic often intertwined within widgets, hindering testability and maintainability. \\n*   **Advantages of Riverpod**:\\n    *   **Compile-time safety**: Providers declared globally, accessible anywhere, preventing runtime errors.\\n    *   **Improved State Management**: Separation of state and logic from UI improves code organization.\\n    *   **Reactive**: Only rebuilds what's necessary, optimizing performance.\\n    *   **Testability**: Providers can be easily mocked and overridden in tests.\\n\\n### Installation and Setup\\n\\n1.  Add `flutter_riverpod` dependency to `pubspec.yaml`:\\n\\n```yaml\\ndependencies:\\n  flutter_riverpod: ^2.3.6 \\n```\\n\\n2.  Wrap your root widget with `ProviderScope`:\\n\\n```dart\\nvoid main() {\\n  runApp(\\n    ProviderScope(\\n      child: MyApp(),\\n    ),\\n  );\\n}\\n```\\n\\n*   `ProviderScope` stores the state of all providers and creates a `ProviderContainer`.\\n\\n### Core Concepts\\n\\n*   **Provider**: An object encapsulating a piece of state and enabling listening to its changes. \\n*   **Creating a Provider**:\\n\\n```dart\\nfinal helloWorldProvider = Provider((ref) => 'Hello world');\\n```\\n\\n*   **Reading a Provider**:\\n\\n**1. Using `ConsumerWidget`**:\\n\\n```dart\\nclass HelloWorldWidget extends ConsumerWidget {\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final helloWorld = ref.watch(helloWorldProvider);\\n    return Text(helloWorld); \\n  }\\n}\\n```\\n\\n**2. Using `Consumer`**:\\n\\n```dart\\nclass HelloWorldWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return Consumer(\\n      builder: (context, ref, child) {\\n        final helloWorld = ref.watch(helloWorldProvider);\\n        return Text(helloWorld);\\n      },\\n    );\\n  }\\n}\\n```\\n\\n**3. Using `ConsumerStatefulWidget` & `ConsumerState`**:\\n\\n```dart\\nclass HelloWorldWidget extends ConsumerStatefulWidget {\\n  @override\\n  ConsumerState<HelloWorldWidget> createState() => _HelloWorldWidgetState();\\n}\\n\\nclass _HelloWorldWidgetState extends ConsumerState<HelloWorldWidget> {\\n  @override\\n  Widget build(BuildContext context) {\\n    final helloWorld = ref.watch(helloWorldProvider);\\n    return Text(helloWorld);\\n  }\\n} \\n```\\n\\n*   **WidgetRef**:  Provides access to any provider within the app. Similar to `BuildContext` but for providers. \\n    *   Available as an argument in `Consumer` and `ConsumerWidget`.\\n    *   Available as a property in `ConsumerState`. \"},{\"id\":\"825379897\",\"type\":\"file_object\",\"content\":\"## Exploring Different Provider Types in Riverpod\\n\\nThis section dives deep into the various provider types offered by Riverpod, their use cases, and how to effectively read and react to their state changes.\\n\\n### Eight Types of Providers:\\n\\nRiverpod provides eight distinct provider types, each catering to specific scenarios:\\n\\n1. **Provider**: Ideal for accessing objects and dependencies that remain constant throughout the app, like repositories or utility classes.\\n\\n```dart\\nfinal dateFormatterProvider = Provider((ref) => DateFormat.MMMEd());\\n```\\n\\n2. **StateProvider**: Perfect for managing simple, mutable state like numbers, strings, or booleans.\\n\\n```dart\\nfinal counterStateProvider = StateProvider((ref) => 0); \\n```\\n\\n3. **StateNotifierProvider**: Best suited for state management that involves reacting to events or user interactions. Often paired with the `StateNotifier` class.\\n\\n```dart\\n// StateNotifier class example\\nclass Clock extends StateNotifier<DateTime> {\\n  Clock() : super(DateTime.now()) {\\n    _timer = Timer.periodic(Duration(seconds: 1), (_) => state = DateTime.now());\\n  }\\n  // ...\\n}\\n\\n// Provider setup\\nfinal clockProvider = StateNotifierProvider<Clock, DateTime>((ref) => Clock());\\n```\\n\\n4. **FutureProvider**: Designed for handling asynchronous operations that return a `Future`, like fetching data from an API. \\n\\n```dart\\nfinal weatherFutureProvider = FutureProvider.autoDispose((ref) async {\\n  final weatherRepository = ref.watch(weatherRepositoryProvider);\\n  return weatherRepository.getWeather(city: 'London');\\n});\\n```\\n\\n5. **StreamProvider**: Used for managing streams of data, such as real-time updates from an API or a continuous data source. \\n\\n```dart\\nfinal authStateChangesProvider = StreamProvider.autoDispose((ref) {\\n  final firebaseAuth = ref.watch(firebaseAuthProvider);\\n  return firebaseAuth.authStateChanges();\\n});\\n```\\n\\n6. **ChangeNotifierProvider**: A legacy provider for compatibility with the `ChangeNotifier` class from the Flutter SDK. Discouraged due to potential for mutable state issues.\\n\\n```dart\\n// Example using ChangeNotifier (not recommended)\\nclass AuthController extends ChangeNotifier { \\n  // ...\\n}\\n\\nfinal authControllerProvider = ChangeNotifierProvider((ref) => AuthController()); \\n```\\n\\n7. **NotifierProvider (Riverpod 2.0)**:  A newer provider type intended as a replacement for `ChangeNotifierProvider` offering a more controlled state management approach.\\n\\n8. **AsyncNotifierProvider (Riverpod 2.0)**: Similar to `StateNotifierProvider` but specifically designed for handling asynchronous operations within the state management logic. \\n\\n\\n### Reading Providers: `ref.watch` vs `ref.read`\\n\\n*   **ref.watch(provider)**: Use within the `build` method to access the provider's state and trigger rebuilds whenever the state changes. \\n*   **ref.read(provider)**: Use for a one-time read of the provider's state, typically in lifecycle methods like `initState` or event handlers.\\n\\n```dart\\nWidget build(BuildContext context, WidgetRef ref) {\\n  final counter = ref.watch(counterStateProvider); // rebuilds on change\\n  // ...\\n  onPressed: () => ref.read(counterStateProvider.notifier).state++; // one-time read \\n}\\n```\\n\\n\\n### Listening to State Changes: `ref.listen`\\n\\n*   **ref.listen(provider, listener)**: Allows reacting to state changes without triggering rebuilds. Useful for tasks like showing dialogs or snackbars based on state updates.\\n\\n```dart\\nref.listen<int>(counterStateProvider, (previous, current) {\\n  // Show snackbar if counter reaches 10\\n  if (current == 10) {\\n    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Counter reached 10!')));\\n  }\\n});\\n```\\n\\n\\n### Choosing the Right Provider:\\n\\n*   Simple, static data: `Provider`\\n*   Simple, mutable state: `StateProvider` or `NotifierProvider`\\n*   State with events/interactions: `StateNotifierProvider` or `AsyncNotifierProvider`\\n*   Asynchronous data: `FutureProvider`\\n*   Stream of data: `StreamProvider` \\n\\n**Remember:**  Prioritize `NotifierProvider` and `AsyncNotifierProvider` over `ChangeNotifierProvider` for better state management practices. \"}],\"version\":\"0.0.1\"}],\"web_objects\":[{\"id\":\"36651585\",\"type\":\"web_page\",\"url\":\"https://pub.dev/packages/riverpod\",\"version\":\"0.0.1\"},{\"id\":\"21276368\",\"type\":\"web_page\",\"url\":\"https://pub.dev/packages/riverpod/example\",\"version\":\"0.0.1\"},{\"id\":\"208639679\",\"type\":\"web_page\",\"url\":\"https://pub.dev/packages/riverpod/install\",\"version\":\"0.0.1\"},{\"id\":\"657217583\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/introduction/why_riverpod\",\"version\":\"0.0.1\"},{\"id\":\"254142595\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/introduction/getting_started\",\"version\":\"0.0.1\"},{\"id\":\"67498153\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/essentials/first_request\",\"version\":\"0.0.1\"},{\"id\":\"866973418\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/migration/from_state_notifier\",\"version\":\"0.0.1\"},{\"id\":\"736667268\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/migration/from_change_notifier\",\"version\":\"0.0.1\"},{\"id\":\"236739719\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/migration/0.14.0_to_1.0.0\",\"version\":\"0.0.1\"},{\"id\":\"250324279\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/migration/0.13.0_to_0.14.0\",\"version\":\"0.0.1\"},{\"id\":\"987737620\",\"type\":\"web_page\",\"url\":\"https://github.com/dhafinrayhan/dummymart/blob/master/lib/features/auth/providers/auth_state.dart\",\"version\":\"0.0.1\"},{\"id\":\"701866138\",\"type\":\"web_page\",\"url\":\"https://riverpod.dev/docs/concepts/combining_providers\",\"version\":\"0.0.1\"}]},{\"id\":\"519739999\",\"version\":\"0.0.1\",\"project_objects\":[],\"file_objects\":[{\"id\":\"870315275\",\"type\":\"directory_files\",\"files\":[{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// ignore: import_of_legacy_library_into_null_safe\\nimport 'package:dio/dio.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport 'question.dart';\\n\\nclass MyHomePage extends HookConsumerWidget {\\n  const MyHomePage({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: const Text('StackOverflow'),\\n      ),\\n      body: HookConsumer(\\n        builder: (context, ref, child) {\\n          final count = ref.watch(questionsCountProvider);\\n\\n          return count.when(\\n            loading: () => const Center(\\n              child: CircularProgressIndicator(),\\n            ),\\n            error: (err, stack) {\\n              if (err is DioException) {\\n                return Text(\\n                  err.response!.data.toString(),\\n                );\\n              }\\n              return Text('Error $err\\\\n$stack');\\n            },\\n            data: (count) {\\n              return RefreshIndicator(\\n                onRefresh: () {\\n                  ref.invalidate(paginatedQuestionsProvider(0));\\n                  return ref.read(paginatedQuestionsProvider(0).future);\\n                },\\n                child: ListView.separated(\\n                  itemCount: count,\\n                  itemBuilder: (context, index) {\\n                    return ProviderScope(\\n                      overrides: [\\n                        currentQuestion.overrideWithValue(\\n                          ref\\n                              .watch(paginatedQuestionsProvider(index ~/ 50))\\n                              .whenData((page) => page.items[index % 50]),\\n                        ),\\n                      ],\\n                      child: const QuestionItem(),\\n                    );\\n                  },\\n                  separatorBuilder: (context, _) {\\n                    return const Divider(\\n                      height: 30,\\n                      color: Color(0xff3d3d3d),\\n                    );\\n                  },\\n                ),\\n              );\\n            },\\n          );\\n        },\\n      ),\\n    );\\n  }\\n}\\n\",\"path\":\"stackoverflow/lib/home.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\n\\npart 'user.g.dart';\\npart 'user.freezed.dart';\\n\\n@freezed\\nclass User with _$User {\\n  @JsonSerializable(fieldRename: FieldRename.snake)\\n  factory User({\\n    required int reputation,\\n    required int userId,\\n    BadgeCount? badgeCounts,\\n    required String displayName,\\n    required String profileImage,\\n    required String link,\\n  }) = _User;\\n\\n  factory User.fromJson(Map<String, Object> json) => _$UserFromJson(json);\\n}\\n\\n@freezed\\nclass BadgeCount with _$BadgeCount {\\n  factory BadgeCount({\\n    required int bronze,\\n    required int silver,\\n    required int gold,\\n  }) = _BadgeCount;\\n\\n  factory BadgeCount.fromJson(Map<String, Object> json) =>\\n      _$BadgeCountFromJson(json);\\n}\\n\\n/// Renders the profile picture of a user and their badges.\\nclass UserAvatar extends StatelessWidget {\\n  const UserAvatar({super.key, required this.owner});\\n\\n  final User owner;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Row(\\n      children: [\\n        Container(\\n          height: 32,\\n          width: 32,\\n          decoration: BoxDecoration(\\n            borderRadius: BorderRadius.circular(3),\\n          ),\\n          clipBehavior: Clip.hardEdge,\\n          child: Image.network(owner.profileImage),\\n        ),\\n        const SizedBox(width: 4),\\n        Column(\\n          crossAxisAlignment: CrossAxisAlignment.start,\\n          children: [\\n            Text(\\n              owner.displayName,\\n              style: const TextStyle(\\n                color: Color(0xff3ca4ff),\\n                fontSize: 12,\\n              ),\\n            ),\\n            Row(\\n              children: [\\n                Text(\\n                  '${owner.reputation}',\\n                  style: const TextStyle(\\n                    color: Color(0xff9fa6ad),\\n                    fontSize: 12,\\n                    fontWeight: FontWeight.bold,\\n                  ),\\n                ),\\n                if (owner.badgeCounts != null) ...[\\n                  if (owner.badgeCounts!.gold > 0) ...[\\n                    const SizedBox(width: 4),\\n                    Container(\\n                      width: 6,\\n                      height: 6,\\n                      decoration: BoxDecoration(\\n                        color: const Color(0xffffcc00),\\n                        borderRadius: BorderRadius.circular(6),\\n                      ),\\n                    ),\\n                    const SizedBox(width: 2),\\n                    Text(\\n                      '${owner.badgeCounts!.gold}',\\n                      style: const TextStyle(\\n                        color: Color(0xff9fa6ad),\\n                        fontSize: 12,\\n                        fontWeight: FontWeight.bold,\\n                      ),\\n                    ),\\n                  ],\\n                  if (owner.badgeCounts!.silver > 0) ...[\\n                    const SizedBox(width: 4),\\n                    Container(\\n                      width: 6,\\n                      height: 6,\\n                      decoration: BoxDecoration(\\n                        color: const Color(0xffb4b8bc),\\n                        borderRadius: BorderRadius.circular(6),\\n                      ),\\n                    ),\\n                    const SizedBox(width: 2),\\n                    Text(\\n                      '${owner.badgeCounts!.silver}',\\n                      style: const TextStyle(\\n                        color: Color(0xff9fa6ad),\\n                        fontSize: 12,\\n                        fontWeight: FontWeight.bold,\\n                      ),\\n                    ),\\n                  ],\\n                  if (owner.badgeCounts!.bronze > 0) ...[\\n                    const SizedBox(width: 4),\\n                    Container(\\n                      width: 6,\\n                      height: 6,\\n                      decoration: BoxDecoration(\\n                        color: const Color(0xffd1a784),\\n                        borderRadius: BorderRadius.circular(6),\\n                      ),\\n                    ),\\n                    const SizedBox(width: 2),\\n                    Text(\\n                      '${owner.badgeCounts!.bronze}',\\n                      style: const TextStyle(\\n                        color: Color(0xff9fa6ad),\\n                        fontSize: 12,\\n                        fontWeight: FontWeight.bold,\\n                      ),\\n                    ),\\n                  ],\\n                ],\\n              ],\\n            ),\\n          ],\\n        ),\\n      ],\\n    );\\n  }\\n}\\n\",\"path\":\"stackoverflow/lib/user.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\n// ignore_for_file: non_constant_identifier_names, require_trailing_commas\\n\\npart of 'question.dart';\\n\\n// **************************************************************************\\n// JsonSerializableGenerator\\n// **************************************************************************\\n\\n_$QuestionsResponseImpl _$$QuestionsResponseImplFromJson(\\n        Map<String, dynamic> json) =>\\n    _$QuestionsResponseImpl(\\n      items: (json['items'] as List<dynamic>)\\n          .map((e) => Question.fromJson(e as Map<String, dynamic>))\\n          .toList(),\\n      total: json['total'] as int,\\n    );\\n\\nMap<String, dynamic> _$$QuestionsResponseImplToJson(\\n        _$QuestionsResponseImpl instance) =>\\n    <String, dynamic>{\\n      'items': instance.items,\\n      'total': instance.total,\\n    };\\n\\n_$QuestionImpl _$$QuestionImplFromJson(Map<String, dynamic> json) =>\\n    _$QuestionImpl(\\n      tags: (json['tags'] as List<dynamic>).map((e) => e as String).toList(),\\n      viewCount: json['view_count'] as int,\\n      score: json['score'] as int,\\n      bountyAmount: json['bounty_amount'] as int?,\\n      acceptedAnswerId: json['accepted_answer_id'] as int?,\\n      owner: User.fromJson((json['owner'] as Map<String, dynamic>).map(\\n        (k, e) => MapEntry(k, e as Object),\\n      )),\\n      answerCount: json['answer_count'] as int,\\n      creationDate:\\n          const TimestampParser().fromJson(json['creation_date'] as int),\\n      questionId: json['question_id'] as int,\\n      link: json['link'] as String,\\n      title: json['title'] as String,\\n      body: json['body'] as String,\\n    );\\n\\nMap<String, dynamic> _$$QuestionImplToJson(_$QuestionImpl instance) =>\\n    <String, dynamic>{\\n      'tags': instance.tags,\\n      'view_count': instance.viewCount,\\n      'score': instance.score,\\n      'bounty_amount': instance.bountyAmount,\\n      'accepted_answer_id': instance.acceptedAnswerId,\\n      'owner': instance.owner,\\n      'answer_count': instance.answerCount,\\n      'creation_date': const TimestampParser().toJson(instance.creationDate),\\n      'question_id': instance.questionId,\\n      'link': instance.link,\\n      'title': instance.title,\\n      'body': instance.body,\\n    };\\n\",\"path\":\"stackoverflow/lib/question.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport 'common.dart';\\n\\npart 'tag.freezed.dart';\\n\\n@freezed\\nclass TagTheme with _$TagTheme {\\n  const factory TagTheme({\\n    required TextStyle style,\\n    required EdgeInsets padding,\\n    required Color backgroundColor,\\n    required BorderRadius borderRadius,\\n  }) = _TagTheme;\\n}\\n\\nfinal tagThemeProvider = Provider<TagTheme>(\\n  (ref) {\\n    final theme = ref.watch(themeProvider);\\n\\n    return TagTheme(\\n      padding: EdgeInsets.symmetric(\\n        horizontal: theme.textTheme.bodyLarge!.fontSize! * 0.5,\\n        vertical: theme.textTheme.bodyLarge!.fontSize! * 0.4,\\n      ),\\n      style: theme.textTheme.bodyMedium!.copyWith(\\n        color: const Color(0xff9cc3db),\\n      ),\\n      borderRadius: BorderRadius.circular(3),\\n      backgroundColor: const Color(0xFF3e4a52),\\n    );\\n  },\\n  dependencies: [themeProvider],\\n);\\n\\nclass Tag extends HookConsumerWidget {\\n  const Tag({super.key, required this.tag});\\n\\n  final String tag;\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final tagTheme = ref.watch(tagThemeProvider);\\n\\n    return Container(\\n      decoration: BoxDecoration(\\n        borderRadius: tagTheme.borderRadius,\\n        color: tagTheme.backgroundColor,\\n      ),\\n      padding: tagTheme.padding,\\n      child: Text(tag, style: tagTheme.style),\\n    );\\n  }\\n}\\n\",\"path\":\"stackoverflow/lib/tag.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport 'common.dart';\\nimport 'home.dart';\\n\\nvoid main() {\\n  runApp(ProviderScope(child: MyApp()));\\n}\\n\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      theme: ThemeData(\\n        scaffoldBackgroundColor: const Color(0xFF2d2d2d),\\n      ),\\n      builder: (context, child) {\\n        final theme = Theme.of(context);\\n\\n        return ProviderScope(\\n          overrides: [\\n            /// We override \\\"themeProvider\\\" with a valid theme instance.\\n            /// This allows providers such as \\\"tagThemeProvider\\\" to read the\\n            /// current theme, without having a BuildContext.\\n            themeProvider.overrideWithValue(theme),\\n          ],\\n          child: ListTileTheme(\\n            textColor: const Color(0xFFe7e8eb),\\n            child: child!,\\n          ),\\n        );\\n      },\\n      home: const MyHomePage(),\\n    );\\n  }\\n}\\n\",\"path\":\"stackoverflow/lib/main.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:dio/dio.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nfinal client = Provider((ref) => Dio());\\n\\n/// A Provider that exposes the current theme.\\n///\\n/// This is unimplemented by default, and will be overridden inside [MaterialApp]\\n/// with the current theme obtained using a [BuildContext].\\nfinal themeProvider = Provider<ThemeData>(\\n  (ref) => throw UnimplementedError(),\\n  // Specifying an empty \\\"dependencies\\\" signals riverpod_lint that this provider\\n  // is scoped.\\n  dependencies: const [],\\n);\\n\\nclass TimestampParser implements JsonConverter<DateTime, int> {\\n  const TimestampParser();\\n\\n  @override\\n  DateTime fromJson(int json) {\\n    return DateTime.fromMillisecondsSinceEpoch(\\n      json * 1000,\\n      isUtc: true,\\n    );\\n  }\\n\\n  @override\\n  int toJson(DateTime object) => object.millisecondsSinceEpoch;\\n}\\n\",\"path\":\"stackoverflow/lib/common.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'dart:async';\\n\\nimport 'package:dio/dio.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:flutter_hooks/flutter_hooks.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\nimport 'package:html/parser.dart';\\n\\nimport 'common.dart';\\nimport 'tag.dart';\\nimport 'user.dart';\\n\\npart 'question.g.dart';\\npart 'question.freezed.dart';\\n\\n@freezed\\nclass QuestionsResponse with _$QuestionsResponse {\\n  factory QuestionsResponse({\\n    required List<Question> items,\\n    required int total,\\n  }) = _QuestionsResponse;\\n\\n  factory QuestionsResponse.fromJson(Map<String, Object?> json) =>\\n      _$QuestionsResponseFromJson(json);\\n}\\n\\n@freezed\\nclass Question with _$Question {\\n  @JsonSerializable(fieldRename: FieldRename.snake)\\n  factory Question({\\n    required List<String> tags,\\n    required int viewCount,\\n    required int score,\\n    int? bountyAmount,\\n    int? acceptedAnswerId,\\n    required User owner,\\n    required int answerCount,\\n    @TimestampParser() required DateTime creationDate,\\n    required int questionId,\\n    required String link,\\n    required String title,\\n    required String body,\\n  }) = _Question;\\n\\n  factory Question.fromJson(Map<String, Object?> json) =>\\n      _$QuestionFromJson(json);\\n}\\n\\nfinal paginatedQuestionsProvider = FutureProvider.autoDispose\\n    .family<QuestionsResponse, int>((ref, pageIndex) async {\\n  final cancelToken = CancelToken();\\n  ref.onDispose(cancelToken.cancel);\\n\\n  final uri = Uri(\\n    scheme: 'https',\\n    host: 'api.stackexchange.com',\\n    path: '/2.2/questions',\\n    queryParameters: <String, Object>{\\n      'order': 'desc',\\n      'sort': 'creation',\\n      'site': 'stackoverflow',\\n      'filter': '!17vW1m9jnXcpKOO(p4a5Jj.QeqRQmvxcbquXIXJ1fJcKq4',\\n      'tagged': 'flutter',\\n      'pagesize': '50',\\n      'page': '${pageIndex + 1}',\\n    },\\n  );\\n\\n  final response = await ref\\n      .watch(client)\\n      .getUri<Map<String, Object?>>(uri, cancelToken: cancelToken);\\n\\n  final parsed = QuestionsResponse.fromJson(response.data!);\\n  final page = parsed.copyWith(\\n    items: parsed.items.map((e) {\\n      final document = parse(e.body);\\n      return e.copyWith(body: document.body!.text.replaceAll('\\\\n', ' '));\\n    }).toList(),\\n  );\\n\\n  return page;\\n});\\n\\n/// A provider exposing the total count of questions\\nfinal questionsCountProvider = Provider.autoDispose((ref) {\\n  return ref\\n      .watch(paginatedQuestionsProvider(0))\\n      .whenData((page) => page.total);\\n});\\n\\n@freezed\\nclass QuestionTheme with _$QuestionTheme {\\n  const factory QuestionTheme({\\n    required TextStyle titleStyle,\\n    required TextStyle descriptionStyle,\\n  }) = _QuestionTheme;\\n}\\n\\nfinal questionThemeProvider = Provider<QuestionTheme>((ref) {\\n  return const QuestionTheme(\\n    titleStyle: TextStyle(\\n      color: Color(0xFF3ca4ff),\\n      fontSize: 16,\\n    ),\\n    descriptionStyle: TextStyle(\\n      color: Color(0xFFe7e8eb),\\n      fontSize: 13,\\n    ),\\n  );\\n});\\n\\n/// A scoped provider, exposing the current question used by [QuestionItem].\\n///\\n/// This is used as a performance optimization to pass a [Question] to\\n/// [QuestionItem], while still instantiating [QuestionItem] using the `const`\\n/// keyword.\\n///\\n/// This allows [QuestionItem] to rebuild less often.\\n/// By doing so, even when using [QuestionItem] in a [ListView], even if new\\n/// questions are obtained, previously rendered [QuestionItem]s won't rebuild.\\n///\\n/// This is an optional step. Since scoping is a fairly advanced mechanism,\\n/// it's entirely fine to simply pass the [Question] to [QuestionItem] directly.\\nfinal currentQuestion = Provider<AsyncValue<Question>>((ref) {\\n  throw UnimplementedError();\\n});\\n\\n/// A UI widget rendering a [Question].\\n///\\n/// That question will be obtained through [currentQuestion]. As such, it is\\n/// necessary to override that provider before using [QuestionItem].\\nclass QuestionItem extends HookConsumerWidget {\\n  const QuestionItem({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final question = ref.watch(currentQuestion);\\n    final questionTheme = ref.watch(questionThemeProvider);\\n\\n    return question.when(\\n      error: (error, stack) => const Center(child: Text('Error')),\\n      loading: () => const Center(child: Text('loading')),\\n      data: (question) {\\n        return ListTile(\\n          title: Text(\\n            question.title,\\n            style: questionTheme.titleStyle,\\n          ),\\n          subtitle: Column(\\n            crossAxisAlignment: CrossAxisAlignment.start,\\n            children: [\\n              const SizedBox(height: 5),\\n              Text(\\n                question.body,\\n                maxLines: 3,\\n                overflow: TextOverflow.ellipsis,\\n              ),\\n              const SizedBox(height: 12),\\n              Column(\\n                crossAxisAlignment: CrossAxisAlignment.start,\\n                children: [\\n                  Wrap(\\n                    spacing: 5,\\n                    runSpacing: 5,\\n                    children: [\\n                      for (final tag in question.tags) Tag(tag: tag),\\n                    ],\\n                  ),\\n                  const SizedBox(height: 6),\\n                  Row(\\n                    children: [\\n                      Expanded(\\n                        child: PostInfo(\\n                          originalPoster: question.owner,\\n                          postCreationDate: question.creationDate,\\n                        ),\\n                      ),\\n                      UpvoteCount(question.score),\\n                      const SizedBox(width: 10),\\n                      AnswersCount(\\n                        question.answerCount,\\n                        accepted: question.acceptedAnswerId != null,\\n                      ),\\n                    ],\\n                  ),\\n                ],\\n              ),\\n            ],\\n          ),\\n        );\\n      },\\n    );\\n  }\\n}\\n\\n/// A \\\"hook\\\" (see flutter_hooks) for rendering how far a [DateTime] is from now\\n/// (\\\"5 seconds ago\\\", ...).\\n///\\n/// This hook also takes care of refreshing the UI when the label changes.\\n/// More particularly, it will check every minute if the label has changed.\\nString _useAskedHowLongAgo(DateTime creationDate) {\\n  final label = useState('');\\n\\n  useEffect(\\n    () {\\n      void setLabel() {\\n        final now = DateTime.now();\\n        final diff = now.difference(creationDate);\\n\\n        String value;\\n        if (diff.inDays > 1) {\\n          value = '${diff.inDays} days';\\n        } else if (diff.inHours > 0) {\\n          value = '${diff.inHours} hours';\\n        } else if (diff.inMinutes > 0) {\\n          value = '${diff.inMinutes} mins';\\n        } else {\\n          value = '${diff.inSeconds} seconds';\\n        }\\n\\n        label.value = 'asked $value ago';\\n      }\\n\\n      setLabel();\\n      final timer =\\n          Timer.periodic(const Duration(minutes: 1), (_) => setLabel());\\n\\n      return timer.cancel;\\n    },\\n    [creationDate],\\n  );\\n\\n  return label.value;\\n}\\n\\nclass PostInfo extends HookConsumerWidget {\\n  const PostInfo({\\n    super.key,\\n    required this.originalPoster,\\n    required this.postCreationDate,\\n  });\\n\\n  final User originalPoster;\\n  final DateTime postCreationDate;\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final askedHowLongAgoLabel = _useAskedHowLongAgo(postCreationDate);\\n\\n    return Column(\\n      crossAxisAlignment: CrossAxisAlignment.start,\\n      children: [\\n        Text(\\n          askedHowLongAgoLabel,\\n          style: const TextStyle(color: Color(0xFF9fa6ad), fontSize: 12),\\n        ),\\n        const SizedBox(height: 3),\\n        UserAvatar(owner: originalPoster),\\n      ],\\n    );\\n  }\\n}\\n\\n/// A UI component for showing the answer count on a question\\nclass AnswersCount extends StatelessWidget {\\n  const AnswersCount(\\n    this.answerCount, {\\n    super.key,\\n    required this.accepted,\\n  });\\n\\n  final int answerCount;\\n  final bool accepted;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final textStyle = accepted\\n        ? null\\n        : answerCount == 0\\n            ? const TextStyle(color: Color(0xffacb2b8))\\n            : const TextStyle(color: Color(0xff5a9e6f));\\n    return Container(\\n      decoration: answerCount > 0\\n          ? BoxDecoration(\\n              color: accepted ? const Color(0xff5a9e6f) : null,\\n              border: Border.all(color: const Color(0xff5a9e6f)),\\n              borderRadius: BorderRadius.circular(3),\\n            )\\n          : null,\\n      padding: const EdgeInsets.all(7),\\n      child: Column(\\n        children: [\\n          Text(answerCount.toString(), style: textStyle),\\n          Text('answers', style: textStyle),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\\n/// A UI component for showing the upvotes count on a question\\nclass UpvoteCount extends StatelessWidget {\\n  const UpvoteCount(this.upvoteCount, {super.key});\\n\\n  final int upvoteCount;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    const textStyle = TextStyle(color: Color(0xffacb2b8));\\n\\n    return Padding(\\n      padding: const EdgeInsets.all(7),\\n      child: Column(\\n        children: [\\n          Text(upvoteCount.toString(), style: textStyle),\\n          const Text('votes', style: textStyle),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\",\"path\":\"stackoverflow/lib/question.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'question.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\nQuestionsResponse _$QuestionsResponseFromJson(Map<String, dynamic> json) {\\n  return _QuestionsResponse.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$QuestionsResponse {\\n  List<Question> get items => throw _privateConstructorUsedError;\\n  int get total => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $QuestionsResponseCopyWith<QuestionsResponse> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $QuestionsResponseCopyWith<$Res> {\\n  factory $QuestionsResponseCopyWith(\\n          QuestionsResponse value, $Res Function(QuestionsResponse) then) =\\n      _$QuestionsResponseCopyWithImpl<$Res, QuestionsResponse>;\\n  @useResult\\n  $Res call({List<Question> items, int total});\\n}\\n\\n/// @nodoc\\nclass _$QuestionsResponseCopyWithImpl<$Res, $Val extends QuestionsResponse>\\n    implements $QuestionsResponseCopyWith<$Res> {\\n  _$QuestionsResponseCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? items = null,\\n    Object? total = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      items: null == items\\n          ? _value.items\\n          : items // ignore: cast_nullable_to_non_nullable\\n              as List<Question>,\\n      total: null == total\\n          ? _value.total\\n          : total // ignore: cast_nullable_to_non_nullable\\n              as int,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$QuestionsResponseImplCopyWith<$Res>\\n    implements $QuestionsResponseCopyWith<$Res> {\\n  factory _$$QuestionsResponseImplCopyWith(_$QuestionsResponseImpl value,\\n          $Res Function(_$QuestionsResponseImpl) then) =\\n      __$$QuestionsResponseImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({List<Question> items, int total});\\n}\\n\\n/// @nodoc\\nclass __$$QuestionsResponseImplCopyWithImpl<$Res>\\n    extends _$QuestionsResponseCopyWithImpl<$Res, _$QuestionsResponseImpl>\\n    implements _$$QuestionsResponseImplCopyWith<$Res> {\\n  __$$QuestionsResponseImplCopyWithImpl(_$QuestionsResponseImpl _value,\\n      $Res Function(_$QuestionsResponseImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? items = null,\\n    Object? total = null,\\n  }) {\\n    return _then(_$QuestionsResponseImpl(\\n      items: null == items\\n          ? _value._items\\n          : items // ignore: cast_nullable_to_non_nullable\\n              as List<Question>,\\n      total: null == total\\n          ? _value.total\\n          : total // ignore: cast_nullable_to_non_nullable\\n              as int,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$QuestionsResponseImpl implements _QuestionsResponse {\\n  _$QuestionsResponseImpl(\\n      {required final List<Question> items, required this.total})\\n      : _items = items;\\n\\n  factory _$QuestionsResponseImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$QuestionsResponseImplFromJson(json);\\n\\n  final List<Question> _items;\\n  @override\\n  List<Question> get items {\\n    if (_items is EqualUnmodifiableListView) return _items;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_items);\\n  }\\n\\n  @override\\n  final int total;\\n\\n  @override\\n  String toString() {\\n    return 'QuestionsResponse(items: $items, total: $total)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$QuestionsResponseImpl &&\\n            const DeepCollectionEquality().equals(other._items, _items) &&\\n            (identical(other.total, total) || other.total == total));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(\\n      runtimeType, const DeepCollectionEquality().hash(_items), total);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$QuestionsResponseImplCopyWith<_$QuestionsResponseImpl> get copyWith =>\\n      __$$QuestionsResponseImplCopyWithImpl<_$QuestionsResponseImpl>(\\n          this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$QuestionsResponseImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _QuestionsResponse implements QuestionsResponse {\\n  factory _QuestionsResponse(\\n      {required final List<Question> items,\\n      required final int total}) = _$QuestionsResponseImpl;\\n\\n  factory _QuestionsResponse.fromJson(Map<String, dynamic> json) =\\n      _$QuestionsResponseImpl.fromJson;\\n\\n  @override\\n  List<Question> get items;\\n  @override\\n  int get total;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$QuestionsResponseImplCopyWith<_$QuestionsResponseImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nQuestion _$QuestionFromJson(Map<String, dynamic> json) {\\n  return _Question.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$Question {\\n  List<String> get tags => throw _privateConstructorUsedError;\\n  int get viewCount => throw _privateConstructorUsedError;\\n  int get score => throw _privateConstructorUsedError;\\n  int? get bountyAmount => throw _privateConstructorUsedError;\\n  int? get acceptedAnswerId => throw _privateConstructorUsedError;\\n  User get owner => throw _privateConstructorUsedError;\\n  int get answerCount => throw _privateConstructorUsedError;\\n  @TimestampParser()\\n  DateTime get creationDate => throw _privateConstructorUsedError;\\n  int get questionId => throw _privateConstructorUsedError;\\n  String get link => throw _privateConstructorUsedError;\\n  String get title => throw _privateConstructorUsedError;\\n  String get body => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $QuestionCopyWith<Question> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $QuestionCopyWith<$Res> {\\n  factory $QuestionCopyWith(Question value, $Res Function(Question) then) =\\n      _$QuestionCopyWithImpl<$Res, Question>;\\n  @useResult\\n  $Res call(\\n      {List<String> tags,\\n      int viewCount,\\n      int score,\\n      int? bountyAmount,\\n      int? acceptedAnswerId,\\n      User owner,\\n      int answerCount,\\n      @TimestampParser() DateTime creationDate,\\n      int questionId,\\n      String link,\\n      String title,\\n      String body});\\n\\n  $UserCopyWith<$Res> get owner;\\n}\\n\\n/// @nodoc\\nclass _$QuestionCopyWithImpl<$Res, $Val extends Question>\\n    implements $QuestionCopyWith<$Res> {\\n  _$QuestionCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? tags = null,\\n    Object? viewCount = null,\\n    Object? score = null,\\n    Object? bountyAmount = freezed,\\n    Object? acceptedAnswerId = freezed,\\n    Object? owner = null,\\n    Object? answerCount = null,\\n    Object? creationDate = null,\\n    Object? questionId = null,\\n    Object? link = null,\\n    Object? title = null,\\n    Object? body = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      tags: null == tags\\n          ? _value.tags\\n          : tags // ignore: cast_nullable_to_non_nullable\\n              as List<String>,\\n      viewCount: null == viewCount\\n          ? _value.viewCount\\n          : viewCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      score: null == score\\n          ? _value.score\\n          : score // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      bountyAmount: freezed == bountyAmount\\n          ? _value.bountyAmount\\n          : bountyAmount // ignore: cast_nullable_to_non_nullable\\n              as int?,\\n      acceptedAnswerId: freezed == acceptedAnswerId\\n          ? _value.acceptedAnswerId\\n          : acceptedAnswerId // ignore: cast_nullable_to_non_nullable\\n              as int?,\\n      owner: null == owner\\n          ? _value.owner\\n          : owner // ignore: cast_nullable_to_non_nullable\\n              as User,\\n      answerCount: null == answerCount\\n          ? _value.answerCount\\n          : answerCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      creationDate: null == creationDate\\n          ? _value.creationDate\\n          : creationDate // ignore: cast_nullable_to_non_nullable\\n              as DateTime,\\n      questionId: null == questionId\\n          ? _value.questionId\\n          : questionId // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      link: null == link\\n          ? _value.link\\n          : link // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      title: null == title\\n          ? _value.title\\n          : title // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      body: null == body\\n          ? _value.body\\n          : body // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ) as $Val);\\n  }\\n\\n  @override\\n  @pragma('vm:prefer-inline')\\n  $UserCopyWith<$Res> get owner {\\n    return $UserCopyWith<$Res>(_value.owner, (value) {\\n      return _then(_value.copyWith(owner: value) as $Val);\\n    });\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$QuestionImplCopyWith<$Res>\\n    implements $QuestionCopyWith<$Res> {\\n  factory _$$QuestionImplCopyWith(\\n          _$QuestionImpl value, $Res Function(_$QuestionImpl) then) =\\n      __$$QuestionImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call(\\n      {List<String> tags,\\n      int viewCount,\\n      int score,\\n      int? bountyAmount,\\n      int? acceptedAnswerId,\\n      User owner,\\n      int answerCount,\\n      @TimestampParser() DateTime creationDate,\\n      int questionId,\\n      String link,\\n      String title,\\n      String body});\\n\\n  @override\\n  $UserCopyWith<$Res> get owner;\\n}\\n\\n/// @nodoc\\nclass __$$QuestionImplCopyWithImpl<$Res>\\n    extends _$QuestionCopyWithImpl<$Res, _$QuestionImpl>\\n    implements _$$QuestionImplCopyWith<$Res> {\\n  __$$QuestionImplCopyWithImpl(\\n      _$QuestionImpl _value, $Res Function(_$QuestionImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? tags = null,\\n    Object? viewCount = null,\\n    Object? score = null,\\n    Object? bountyAmount = freezed,\\n    Object? acceptedAnswerId = freezed,\\n    Object? owner = null,\\n    Object? answerCount = null,\\n    Object? creationDate = null,\\n    Object? questionId = null,\\n    Object? link = null,\\n    Object? title = null,\\n    Object? body = null,\\n  }) {\\n    return _then(_$QuestionImpl(\\n      tags: null == tags\\n          ? _value._tags\\n          : tags // ignore: cast_nullable_to_non_nullable\\n              as List<String>,\\n      viewCount: null == viewCount\\n          ? _value.viewCount\\n          : viewCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      score: null == score\\n          ? _value.score\\n          : score // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      bountyAmount: freezed == bountyAmount\\n          ? _value.bountyAmount\\n          : bountyAmount // ignore: cast_nullable_to_non_nullable\\n              as int?,\\n      acceptedAnswerId: freezed == acceptedAnswerId\\n          ? _value.acceptedAnswerId\\n          : acceptedAnswerId // ignore: cast_nullable_to_non_nullable\\n              as int?,\\n      owner: null == owner\\n          ? _value.owner\\n          : owner // ignore: cast_nullable_to_non_nullable\\n              as User,\\n      answerCount: null == answerCount\\n          ? _value.answerCount\\n          : answerCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      creationDate: null == creationDate\\n          ? _value.creationDate\\n          : creationDate // ignore: cast_nullable_to_non_nullable\\n              as DateTime,\\n      questionId: null == questionId\\n          ? _value.questionId\\n          : questionId // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      link: null == link\\n          ? _value.link\\n          : link // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      title: null == title\\n          ? _value.title\\n          : title // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      body: null == body\\n          ? _value.body\\n          : body // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\n@JsonSerializable(fieldRename: FieldRename.snake)\\nclass _$QuestionImpl implements _Question {\\n  _$QuestionImpl(\\n      {required final List<String> tags,\\n      required this.viewCount,\\n      required this.score,\\n      this.bountyAmount,\\n      this.acceptedAnswerId,\\n      required this.owner,\\n      required this.answerCount,\\n      @TimestampParser() required this.creationDate,\\n      required this.questionId,\\n      required this.link,\\n      required this.title,\\n      required this.body})\\n      : _tags = tags;\\n\\n  factory _$QuestionImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$QuestionImplFromJson(json);\\n\\n  final List<String> _tags;\\n  @override\\n  List<String> get tags {\\n    if (_tags is EqualUnmodifiableListView) return _tags;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_tags);\\n  }\\n\\n  @override\\n  final int viewCount;\\n  @override\\n  final int score;\\n  @override\\n  final int? bountyAmount;\\n  @override\\n  final int? acceptedAnswerId;\\n  @override\\n  final User owner;\\n  @override\\n  final int answerCount;\\n  @override\\n  @TimestampParser()\\n  final DateTime creationDate;\\n  @override\\n  final int questionId;\\n  @override\\n  final String link;\\n  @override\\n  final String title;\\n  @override\\n  final String body;\\n\\n  @override\\n  String toString() {\\n    return 'Question(tags: $tags, viewCount: $viewCount, score: $score, bountyAmount: $bountyAmount, acceptedAnswerId: $acceptedAnswerId, owner: $owner, answerCount: $answerCount, creationDate: $creationDate, questionId: $questionId, link: $link, title: $title, body: $body)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$QuestionImpl &&\\n            const DeepCollectionEquality().equals(other._tags, _tags) &&\\n            (identical(other.viewCount, viewCount) ||\\n                other.viewCount == viewCount) &&\\n            (identical(other.score, score) || other.score == score) &&\\n            (identical(other.bountyAmount, bountyAmount) ||\\n                other.bountyAmount == bountyAmount) &&\\n            (identical(other.acceptedAnswerId, acceptedAnswerId) ||\\n                other.acceptedAnswerId == acceptedAnswerId) &&\\n            (identical(other.owner, owner) || other.owner == owner) &&\\n            (identical(other.answerCount, answerCount) ||\\n                other.answerCount == answerCount) &&\\n            (identical(other.creationDate, creationDate) ||\\n                other.creationDate == creationDate) &&\\n            (identical(other.questionId, questionId) ||\\n                other.questionId == questionId) &&\\n            (identical(other.link, link) || other.link == link) &&\\n            (identical(other.title, title) || other.title == title) &&\\n            (identical(other.body, body) || other.body == body));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(\\n      runtimeType,\\n      const DeepCollectionEquality().hash(_tags),\\n      viewCount,\\n      score,\\n      bountyAmount,\\n      acceptedAnswerId,\\n      owner,\\n      answerCount,\\n      creationDate,\\n      questionId,\\n      link,\\n      title,\\n      body);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$QuestionImplCopyWith<_$QuestionImpl> get copyWith =>\\n      __$$QuestionImplCopyWithImpl<_$QuestionImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$QuestionImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _Question implements Question {\\n  factory _Question(\\n      {required final List<String> tags,\\n      required final int viewCount,\\n      required final int score,\\n      final int? bountyAmount,\\n      final int? acceptedAnswerId,\\n      required final User owner,\\n      required final int answerCount,\\n      @TimestampParser() required final DateTime creationDate,\\n      required final int questionId,\\n      required final String link,\\n      required final String title,\\n      required final String body}) = _$QuestionImpl;\\n\\n  factory _Question.fromJson(Map<String, dynamic> json) =\\n      _$QuestionImpl.fromJson;\\n\\n  @override\\n  List<String> get tags;\\n  @override\\n  int get viewCount;\\n  @override\\n  int get score;\\n  @override\\n  int? get bountyAmount;\\n  @override\\n  int? get acceptedAnswerId;\\n  @override\\n  User get owner;\\n  @override\\n  int get answerCount;\\n  @override\\n  @TimestampParser()\\n  DateTime get creationDate;\\n  @override\\n  int get questionId;\\n  @override\\n  String get link;\\n  @override\\n  String get title;\\n  @override\\n  String get body;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$QuestionImplCopyWith<_$QuestionImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nmixin _$QuestionTheme {\\n  TextStyle get titleStyle => throw _privateConstructorUsedError;\\n  TextStyle get descriptionStyle => throw _privateConstructorUsedError;\\n\\n  @JsonKey(ignore: true)\\n  $QuestionThemeCopyWith<QuestionTheme> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $QuestionThemeCopyWith<$Res> {\\n  factory $QuestionThemeCopyWith(\\n          QuestionTheme value, $Res Function(QuestionTheme) then) =\\n      _$QuestionThemeCopyWithImpl<$Res, QuestionTheme>;\\n  @useResult\\n  $Res call({TextStyle titleStyle, TextStyle descriptionStyle});\\n}\\n\\n/// @nodoc\\nclass _$QuestionThemeCopyWithImpl<$Res, $Val extends QuestionTheme>\\n    implements $QuestionThemeCopyWith<$Res> {\\n  _$QuestionThemeCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? titleStyle = null,\\n    Object? descriptionStyle = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      titleStyle: null == titleStyle\\n          ? _value.titleStyle\\n          : titleStyle // ignore: cast_nullable_to_non_nullable\\n              as TextStyle,\\n      descriptionStyle: null == descriptionStyle\\n          ? _value.descriptionStyle\\n          : descriptionStyle // ignore: cast_nullable_to_non_nullable\\n              as TextStyle,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$QuestionThemeImplCopyWith<$Res>\\n    implements $QuestionThemeCopyWith<$Res> {\\n  factory _$$QuestionThemeImplCopyWith(\\n          _$QuestionThemeImpl value, $Res Function(_$QuestionThemeImpl) then) =\\n      __$$QuestionThemeImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({TextStyle titleStyle, TextStyle descriptionStyle});\\n}\\n\\n/// @nodoc\\nclass __$$QuestionThemeImplCopyWithImpl<$Res>\\n    extends _$QuestionThemeCopyWithImpl<$Res, _$QuestionThemeImpl>\\n    implements _$$QuestionThemeImplCopyWith<$Res> {\\n  __$$QuestionThemeImplCopyWithImpl(\\n      _$QuestionThemeImpl _value, $Res Function(_$QuestionThemeImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? titleStyle = null,\\n    Object? descriptionStyle = null,\\n  }) {\\n    return _then(_$QuestionThemeImpl(\\n      titleStyle: null == titleStyle\\n          ? _value.titleStyle\\n          : titleStyle // ignore: cast_nullable_to_non_nullable\\n              as TextStyle,\\n      descriptionStyle: null == descriptionStyle\\n          ? _value.descriptionStyle\\n          : descriptionStyle // ignore: cast_nullable_to_non_nullable\\n              as TextStyle,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\nclass _$QuestionThemeImpl implements _QuestionTheme {\\n  const _$QuestionThemeImpl(\\n      {required this.titleStyle, required this.descriptionStyle});\\n\\n  @override\\n  final TextStyle titleStyle;\\n  @override\\n  final TextStyle descriptionStyle;\\n\\n  @override\\n  String toString() {\\n    return 'QuestionTheme(titleStyle: $titleStyle, descriptionStyle: $descriptionStyle)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$QuestionThemeImpl &&\\n            (identical(other.titleStyle, titleStyle) ||\\n                other.titleStyle == titleStyle) &&\\n            (identical(other.descriptionStyle, descriptionStyle) ||\\n                other.descriptionStyle == descriptionStyle));\\n  }\\n\\n  @override\\n  int get hashCode => Object.hash(runtimeType, titleStyle, descriptionStyle);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$QuestionThemeImplCopyWith<_$QuestionThemeImpl> get copyWith =>\\n      __$$QuestionThemeImplCopyWithImpl<_$QuestionThemeImpl>(this, _$identity);\\n}\\n\\nabstract class _QuestionTheme implements QuestionTheme {\\n  const factory _QuestionTheme(\\n      {required final TextStyle titleStyle,\\n      required final TextStyle descriptionStyle}) = _$QuestionThemeImpl;\\n\\n  @override\\n  TextStyle get titleStyle;\\n  @override\\n  TextStyle get descriptionStyle;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$QuestionThemeImplCopyWith<_$QuestionThemeImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"stackoverflow/lib/question.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'user.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\nUser _$UserFromJson(Map<String, dynamic> json) {\\n  return _User.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$User {\\n  int get reputation => throw _privateConstructorUsedError;\\n  int get userId => throw _privateConstructorUsedError;\\n  BadgeCount? get badgeCounts => throw _privateConstructorUsedError;\\n  String get displayName => throw _privateConstructorUsedError;\\n  String get profileImage => throw _privateConstructorUsedError;\\n  String get link => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $UserCopyWith<User> get copyWith => throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $UserCopyWith<$Res> {\\n  factory $UserCopyWith(User value, $Res Function(User) then) =\\n      _$UserCopyWithImpl<$Res, User>;\\n  @useResult\\n  $Res call(\\n      {int reputation,\\n      int userId,\\n      BadgeCount? badgeCounts,\\n      String displayName,\\n      String profileImage,\\n      String link});\\n\\n  $BadgeCountCopyWith<$Res>? get badgeCounts;\\n}\\n\\n/// @nodoc\\nclass _$UserCopyWithImpl<$Res, $Val extends User>\\n    implements $UserCopyWith<$Res> {\\n  _$UserCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? reputation = null,\\n    Object? userId = null,\\n    Object? badgeCounts = freezed,\\n    Object? displayName = null,\\n    Object? profileImage = null,\\n    Object? link = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      reputation: null == reputation\\n          ? _value.reputation\\n          : reputation // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      userId: null == userId\\n          ? _value.userId\\n          : userId // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      badgeCounts: freezed == badgeCounts\\n          ? _value.badgeCounts\\n          : badgeCounts // ignore: cast_nullable_to_non_nullable\\n              as BadgeCount?,\\n      displayName: null == displayName\\n          ? _value.displayName\\n          : displayName // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      profileImage: null == profileImage\\n          ? _value.profileImage\\n          : profileImage // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      link: null == link\\n          ? _value.link\\n          : link // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ) as $Val);\\n  }\\n\\n  @override\\n  @pragma('vm:prefer-inline')\\n  $BadgeCountCopyWith<$Res>? get badgeCounts {\\n    if (_value.badgeCounts == null) {\\n      return null;\\n    }\\n\\n    return $BadgeCountCopyWith<$Res>(_value.badgeCounts!, (value) {\\n      return _then(_value.copyWith(badgeCounts: value) as $Val);\\n    });\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$UserImplCopyWith<$Res> implements $UserCopyWith<$Res> {\\n  factory _$$UserImplCopyWith(\\n          _$UserImpl value, $Res Function(_$UserImpl) then) =\\n      __$$UserImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call(\\n      {int reputation,\\n      int userId,\\n      BadgeCount? badgeCounts,\\n      String displayName,\\n      String profileImage,\\n      String link});\\n\\n  @override\\n  $BadgeCountCopyWith<$Res>? get badgeCounts;\\n}\\n\\n/// @nodoc\\nclass __$$UserImplCopyWithImpl<$Res>\\n    extends _$UserCopyWithImpl<$Res, _$UserImpl>\\n    implements _$$UserImplCopyWith<$Res> {\\n  __$$UserImplCopyWithImpl(_$UserImpl _value, $Res Function(_$UserImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? reputation = null,\\n    Object? userId = null,\\n    Object? badgeCounts = freezed,\\n    Object? displayName = null,\\n    Object? profileImage = null,\\n    Object? link = null,\\n  }) {\\n    return _then(_$UserImpl(\\n      reputation: null == reputation\\n          ? _value.reputation\\n          : reputation // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      userId: null == userId\\n          ? _value.userId\\n          : userId // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      badgeCounts: freezed == badgeCounts\\n          ? _value.badgeCounts\\n          : badgeCounts // ignore: cast_nullable_to_non_nullable\\n              as BadgeCount?,\\n      displayName: null == displayName\\n          ? _value.displayName\\n          : displayName // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      profileImage: null == profileImage\\n          ? _value.profileImage\\n          : profileImage // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      link: null == link\\n          ? _value.link\\n          : link // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\n@JsonSerializable(fieldRename: FieldRename.snake)\\nclass _$UserImpl implements _User {\\n  _$UserImpl(\\n      {required this.reputation,\\n      required this.userId,\\n      this.badgeCounts,\\n      required this.displayName,\\n      required this.profileImage,\\n      required this.link});\\n\\n  factory _$UserImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$UserImplFromJson(json);\\n\\n  @override\\n  final int reputation;\\n  @override\\n  final int userId;\\n  @override\\n  final BadgeCount? badgeCounts;\\n  @override\\n  final String displayName;\\n  @override\\n  final String profileImage;\\n  @override\\n  final String link;\\n\\n  @override\\n  String toString() {\\n    return 'User(reputation: $reputation, userId: $userId, badgeCounts: $badgeCounts, displayName: $displayName, profileImage: $profileImage, link: $link)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$UserImpl &&\\n            (identical(other.reputation, reputation) ||\\n                other.reputation == reputation) &&\\n            (identical(other.userId, userId) || other.userId == userId) &&\\n            (identical(other.badgeCounts, badgeCounts) ||\\n                other.badgeCounts == badgeCounts) &&\\n            (identical(other.displayName, displayName) ||\\n                other.displayName == displayName) &&\\n            (identical(other.profileImage, profileImage) ||\\n                other.profileImage == profileImage) &&\\n            (identical(other.link, link) || other.link == link));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, reputation, userId, badgeCounts,\\n      displayName, profileImage, link);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$UserImplCopyWith<_$UserImpl> get copyWith =>\\n      __$$UserImplCopyWithImpl<_$UserImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$UserImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _User implements User {\\n  factory _User(\\n      {required final int reputation,\\n      required final int userId,\\n      final BadgeCount? badgeCounts,\\n      required final String displayName,\\n      required final String profileImage,\\n      required final String link}) = _$UserImpl;\\n\\n  factory _User.fromJson(Map<String, dynamic> json) = _$UserImpl.fromJson;\\n\\n  @override\\n  int get reputation;\\n  @override\\n  int get userId;\\n  @override\\n  BadgeCount? get badgeCounts;\\n  @override\\n  String get displayName;\\n  @override\\n  String get profileImage;\\n  @override\\n  String get link;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$UserImplCopyWith<_$UserImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nBadgeCount _$BadgeCountFromJson(Map<String, dynamic> json) {\\n  return _BadgeCount.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$BadgeCount {\\n  int get bronze => throw _privateConstructorUsedError;\\n  int get silver => throw _privateConstructorUsedError;\\n  int get gold => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $BadgeCountCopyWith<BadgeCount> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $BadgeCountCopyWith<$Res> {\\n  factory $BadgeCountCopyWith(\\n          BadgeCount value, $Res Function(BadgeCount) then) =\\n      _$BadgeCountCopyWithImpl<$Res, BadgeCount>;\\n  @useResult\\n  $Res call({int bronze, int silver, int gold});\\n}\\n\\n/// @nodoc\\nclass _$BadgeCountCopyWithImpl<$Res, $Val extends BadgeCount>\\n    implements $BadgeCountCopyWith<$Res> {\\n  _$BadgeCountCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? bronze = null,\\n    Object? silver = null,\\n    Object? gold = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      bronze: null == bronze\\n          ? _value.bronze\\n          : bronze // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      silver: null == silver\\n          ? _value.silver\\n          : silver // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      gold: null == gold\\n          ? _value.gold\\n          : gold // ignore: cast_nullable_to_non_nullable\\n              as int,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$BadgeCountImplCopyWith<$Res>\\n    implements $BadgeCountCopyWith<$Res> {\\n  factory _$$BadgeCountImplCopyWith(\\n          _$BadgeCountImpl value, $Res Function(_$BadgeCountImpl) then) =\\n      __$$BadgeCountImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({int bronze, int silver, int gold});\\n}\\n\\n/// @nodoc\\nclass __$$BadgeCountImplCopyWithImpl<$Res>\\n    extends _$BadgeCountCopyWithImpl<$Res, _$BadgeCountImpl>\\n    implements _$$BadgeCountImplCopyWith<$Res> {\\n  __$$BadgeCountImplCopyWithImpl(\\n      _$BadgeCountImpl _value, $Res Function(_$BadgeCountImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? bronze = null,\\n    Object? silver = null,\\n    Object? gold = null,\\n  }) {\\n    return _then(_$BadgeCountImpl(\\n      bronze: null == bronze\\n          ? _value.bronze\\n          : bronze // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      silver: null == silver\\n          ? _value.silver\\n          : silver // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      gold: null == gold\\n          ? _value.gold\\n          : gold // ignore: cast_nullable_to_non_nullable\\n              as int,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$BadgeCountImpl implements _BadgeCount {\\n  _$BadgeCountImpl(\\n      {required this.bronze, required this.silver, required this.gold});\\n\\n  factory _$BadgeCountImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$BadgeCountImplFromJson(json);\\n\\n  @override\\n  final int bronze;\\n  @override\\n  final int silver;\\n  @override\\n  final int gold;\\n\\n  @override\\n  String toString() {\\n    return 'BadgeCount(bronze: $bronze, silver: $silver, gold: $gold)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$BadgeCountImpl &&\\n            (identical(other.bronze, bronze) || other.bronze == bronze) &&\\n            (identical(other.silver, silver) || other.silver == silver) &&\\n            (identical(other.gold, gold) || other.gold == gold));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, bronze, silver, gold);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$BadgeCountImplCopyWith<_$BadgeCountImpl> get copyWith =>\\n      __$$BadgeCountImplCopyWithImpl<_$BadgeCountImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$BadgeCountImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _BadgeCount implements BadgeCount {\\n  factory _BadgeCount(\\n      {required final int bronze,\\n      required final int silver,\\n      required final int gold}) = _$BadgeCountImpl;\\n\\n  factory _BadgeCount.fromJson(Map<String, dynamic> json) =\\n      _$BadgeCountImpl.fromJson;\\n\\n  @override\\n  int get bronze;\\n  @override\\n  int get silver;\\n  @override\\n  int get gold;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$BadgeCountImplCopyWith<_$BadgeCountImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"stackoverflow/lib/user.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'tag.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\n/// @nodoc\\nmixin _$TagTheme {\\n  TextStyle get style => throw _privateConstructorUsedError;\\n  EdgeInsets get padding => throw _privateConstructorUsedError;\\n  Color get backgroundColor => throw _privateConstructorUsedError;\\n  BorderRadius get borderRadius => throw _privateConstructorUsedError;\\n\\n  @JsonKey(ignore: true)\\n  $TagThemeCopyWith<TagTheme> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $TagThemeCopyWith<$Res> {\\n  factory $TagThemeCopyWith(TagTheme value, $Res Function(TagTheme) then) =\\n      _$TagThemeCopyWithImpl<$Res, TagTheme>;\\n  @useResult\\n  $Res call(\\n      {TextStyle style,\\n      EdgeInsets padding,\\n      Color backgroundColor,\\n      BorderRadius borderRadius});\\n}\\n\\n/// @nodoc\\nclass _$TagThemeCopyWithImpl<$Res, $Val extends TagTheme>\\n    implements $TagThemeCopyWith<$Res> {\\n  _$TagThemeCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? style = null,\\n    Object? padding = null,\\n    Object? backgroundColor = null,\\n    Object? borderRadius = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      style: null == style\\n          ? _value.style\\n          : style // ignore: cast_nullable_to_non_nullable\\n              as TextStyle,\\n      padding: null == padding\\n          ? _value.padding\\n          : padding // ignore: cast_nullable_to_non_nullable\\n              as EdgeInsets,\\n      backgroundColor: null == backgroundColor\\n          ? _value.backgroundColor\\n          : backgroundColor // ignore: cast_nullable_to_non_nullable\\n              as Color,\\n      borderRadius: null == borderRadius\\n          ? _value.borderRadius\\n          : borderRadius // ignore: cast_nullable_to_non_nullable\\n              as BorderRadius,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$TagThemeImplCopyWith<$Res>\\n    implements $TagThemeCopyWith<$Res> {\\n  factory _$$TagThemeImplCopyWith(\\n          _$TagThemeImpl value, $Res Function(_$TagThemeImpl) then) =\\n      __$$TagThemeImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call(\\n      {TextStyle style,\\n      EdgeInsets padding,\\n      Color backgroundColor,\\n      BorderRadius borderRadius});\\n}\\n\\n/// @nodoc\\nclass __$$TagThemeImplCopyWithImpl<$Res>\\n    extends _$TagThemeCopyWithImpl<$Res, _$TagThemeImpl>\\n    implements _$$TagThemeImplCopyWith<$Res> {\\n  __$$TagThemeImplCopyWithImpl(\\n      _$TagThemeImpl _value, $Res Function(_$TagThemeImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? style = null,\\n    Object? padding = null,\\n    Object? backgroundColor = null,\\n    Object? borderRadius = null,\\n  }) {\\n    return _then(_$TagThemeImpl(\\n      style: null == style\\n          ? _value.style\\n          : style // ignore: cast_nullable_to_non_nullable\\n              as TextStyle,\\n      padding: null == padding\\n          ? _value.padding\\n          : padding // ignore: cast_nullable_to_non_nullable\\n              as EdgeInsets,\\n      backgroundColor: null == backgroundColor\\n          ? _value.backgroundColor\\n          : backgroundColor // ignore: cast_nullable_to_non_nullable\\n              as Color,\\n      borderRadius: null == borderRadius\\n          ? _value.borderRadius\\n          : borderRadius // ignore: cast_nullable_to_non_nullable\\n              as BorderRadius,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\nclass _$TagThemeImpl implements _TagTheme {\\n  const _$TagThemeImpl(\\n      {required this.style,\\n      required this.padding,\\n      required this.backgroundColor,\\n      required this.borderRadius});\\n\\n  @override\\n  final TextStyle style;\\n  @override\\n  final EdgeInsets padding;\\n  @override\\n  final Color backgroundColor;\\n  @override\\n  final BorderRadius borderRadius;\\n\\n  @override\\n  String toString() {\\n    return 'TagTheme(style: $style, padding: $padding, backgroundColor: $backgroundColor, borderRadius: $borderRadius)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$TagThemeImpl &&\\n            (identical(other.style, style) || other.style == style) &&\\n            (identical(other.padding, padding) || other.padding == padding) &&\\n            (identical(other.backgroundColor, backgroundColor) ||\\n                other.backgroundColor == backgroundColor) &&\\n            (identical(other.borderRadius, borderRadius) ||\\n                other.borderRadius == borderRadius));\\n  }\\n\\n  @override\\n  int get hashCode =>\\n      Object.hash(runtimeType, style, padding, backgroundColor, borderRadius);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$TagThemeImplCopyWith<_$TagThemeImpl> get copyWith =>\\n      __$$TagThemeImplCopyWithImpl<_$TagThemeImpl>(this, _$identity);\\n}\\n\\nabstract class _TagTheme implements TagTheme {\\n  const factory _TagTheme(\\n      {required final TextStyle style,\\n      required final EdgeInsets padding,\\n      required final Color backgroundColor,\\n      required final BorderRadius borderRadius}) = _$TagThemeImpl;\\n\\n  @override\\n  TextStyle get style;\\n  @override\\n  EdgeInsets get padding;\\n  @override\\n  Color get backgroundColor;\\n  @override\\n  BorderRadius get borderRadius;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$TagThemeImplCopyWith<_$TagThemeImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"stackoverflow/lib/tag.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\n// ignore_for_file: non_constant_identifier_names, require_trailing_commas\\n\\npart of 'user.dart';\\n\\n// **************************************************************************\\n// JsonSerializableGenerator\\n// **************************************************************************\\n\\n_$UserImpl _$$UserImplFromJson(Map<String, dynamic> json) => _$UserImpl(\\n      reputation: json['reputation'] as int,\\n      userId: json['user_id'] as int,\\n      badgeCounts: json['badge_counts'] == null\\n          ? null\\n          : BadgeCount.fromJson(\\n              (json['badge_counts'] as Map<String, dynamic>).map(\\n              (k, e) => MapEntry(k, e as Object),\\n            )),\\n      displayName: json['display_name'] as String,\\n      profileImage: json['profile_image'] as String,\\n      link: json['link'] as String,\\n    );\\n\\nMap<String, dynamic> _$$UserImplToJson(_$UserImpl instance) =>\\n    <String, dynamic>{\\n      'reputation': instance.reputation,\\n      'user_id': instance.userId,\\n      'badge_counts': instance.badgeCounts,\\n      'display_name': instance.displayName,\\n      'profile_image': instance.profileImage,\\n      'link': instance.link,\\n    };\\n\\n_$BadgeCountImpl _$$BadgeCountImplFromJson(Map<String, dynamic> json) =>\\n    _$BadgeCountImpl(\\n      bronze: json['bronze'] as int,\\n      silver: json['silver'] as int,\\n      gold: json['gold'] as int,\\n    );\\n\\nMap<String, dynamic> _$$BadgeCountImplToJson(_$BadgeCountImpl instance) =>\\n    <String, dynamic>{\\n      'bronze': instance.bronze,\\n      'silver': instance.silver,\\n      'gold': instance.gold,\\n    };\\n\",\"path\":\"stackoverflow/lib/user.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// ignore_for_file: unused_import, prefer_const_constructors\\n// Ignored so that uncommenting the code to mock HTP requests is simple.\\nimport 'package:flutter/material.dart';\\nimport 'package:flutter_hooks/flutter_hooks.dart';\\nimport 'package:flutter_portal/flutter_portal.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport 'src/fake_marvel.dart';\\nimport 'src/marvel.dart';\\nimport 'src/screens/character_detail.dart';\\nimport 'src/screens/home.dart';\\n\\nvoid main() {\\n  runApp(\\n    ProviderScope(\\n      // uncomment to mock the HTTP requests\\n\\n      // overrides: [\\n      //   dioProvider.overrideWithValue(FakeDio(null))\\n      // ],\\n      child: MyApp(),\\n    ),\\n  );\\n}\\n\\nclass MyApp extends HookConsumerWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    return MaterialApp(\\n      theme: ThemeData(primarySwatch: Colors.red),\\n      builder: (context, child) {\\n        return _Unfocus(\\n          child: child!,\\n        );\\n      },\\n      home: const Portal(child: Home()),\\n      onGenerateRoute: (settings) {\\n        if (settings.name == null) {\\n          return null;\\n        }\\n        final split = settings.name!.split('/');\\n        Widget? result;\\n        if (settings.name!.startsWith('/characters/') && split.length == 3) {\\n          result = ProviderScope(\\n            overrides: [\\n              selectedCharacterId.overrideWithValue(split.last),\\n            ],\\n            child: const CharacterView(),\\n          );\\n        }\\n\\n        if (result == null) {\\n          return null;\\n        }\\n        return MaterialPageRoute<void>(builder: (context) => result!);\\n      },\\n      routes: {\\n        '/character': (c) => const CharacterView(),\\n      },\\n    );\\n  }\\n}\\n\\n/// A widget that unfocus everything when tapped.\\n///\\n/// This implements the \\\"Unfocus when tapping in empty space\\\" behavior for the\\n/// entire application.\\nclass _Unfocus extends HookConsumerWidget {\\n  const _Unfocus({\\n    Key? key,\\n    required this.child,\\n  }) : super(key: key);\\n\\n  final Widget child;\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    return GestureDetector(\\n      behavior: HitTestBehavior.opaque,\\n      onTap: () {\\n        FocusManager.instance.primaryFocus?.unfocus();\\n      },\\n      child: child,\\n    );\\n  }\\n}\\n\",\"path\":\"marvel/lib/main.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\npart of 'marvel.dart';\\n\\n// **************************************************************************\\n// JsonSerializableGenerator\\n// **************************************************************************\\n\\n_$CharacterImpl _$$CharacterImplFromJson(Map<String, dynamic> json) =>\\n    _$CharacterImpl(\\n      id: json['id'] as int,\\n      name: json['name'] as String,\\n      thumbnail: Thumbnail.fromJson(json['thumbnail'] as Map<String, dynamic>),\\n    );\\n\\nMap<String, dynamic> _$$CharacterImplToJson(_$CharacterImpl instance) =>\\n    <String, dynamic>{\\n      'id': instance.id,\\n      'name': instance.name,\\n      'thumbnail': instance.thumbnail,\\n    };\\n\\n_$ThumbnailImpl _$$ThumbnailImplFromJson(Map<String, dynamic> json) =>\\n    _$ThumbnailImpl(\\n      path: json['path'] as String,\\n      extension: json['extension'] as String,\\n    );\\n\\nMap<String, dynamic> _$$ThumbnailImplToJson(_$ThumbnailImpl instance) =>\\n    <String, dynamic>{\\n      'path': instance.path,\\n      'extension': instance.extension,\\n    };\\n\\n_$MarvelResponseImpl _$$MarvelResponseImplFromJson(Map<String, dynamic> json) =>\\n    _$MarvelResponseImpl(\\n      MarvelData.fromJson(json['data'] as Map<String, dynamic>),\\n    );\\n\\nMap<String, dynamic> _$$MarvelResponseImplToJson(\\n        _$MarvelResponseImpl instance) =>\\n    <String, dynamic>{\\n      'data': instance.data,\\n    };\\n\\n_$MarvelDataImpl _$$MarvelDataImplFromJson(Map<String, dynamic> json) =>\\n    _$MarvelDataImpl(\\n      (json['results'] as List<dynamic>)\\n          .map((e) => e as Map<String, dynamic>)\\n          .toList(),\\n      json['total'] as int,\\n    );\\n\\nMap<String, dynamic> _$$MarvelDataImplToJson(_$MarvelDataImpl instance) =>\\n    <String, dynamic>{\\n      'results': instance.results,\\n      'total': instance.total,\\n    };\\n\",\"path\":\"marvel/lib/src/marvel.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'marvel.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\n/// @nodoc\\nmixin _$MarvelListCharactersResponse {\\n  int get totalCount => throw _privateConstructorUsedError;\\n  List<Character> get characters => throw _privateConstructorUsedError;\\n\\n  @JsonKey(ignore: true)\\n  $MarvelListCharactersResponseCopyWith<MarvelListCharactersResponse>\\n      get copyWith => throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $MarvelListCharactersResponseCopyWith<$Res> {\\n  factory $MarvelListCharactersResponseCopyWith(\\n          MarvelListCharactersResponse value,\\n          $Res Function(MarvelListCharactersResponse) then) =\\n      _$MarvelListCharactersResponseCopyWithImpl<$Res,\\n          MarvelListCharactersResponse>;\\n  @useResult\\n  $Res call({int totalCount, List<Character> characters});\\n}\\n\\n/// @nodoc\\nclass _$MarvelListCharactersResponseCopyWithImpl<$Res,\\n        $Val extends MarvelListCharactersResponse>\\n    implements $MarvelListCharactersResponseCopyWith<$Res> {\\n  _$MarvelListCharactersResponseCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? totalCount = null,\\n    Object? characters = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      totalCount: null == totalCount\\n          ? _value.totalCount\\n          : totalCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      characters: null == characters\\n          ? _value.characters\\n          : characters // ignore: cast_nullable_to_non_nullable\\n              as List<Character>,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$MarvelListCharactersResponseImplCopyWith<$Res>\\n    implements $MarvelListCharactersResponseCopyWith<$Res> {\\n  factory _$$MarvelListCharactersResponseImplCopyWith(\\n          _$MarvelListCharactersResponseImpl value,\\n          $Res Function(_$MarvelListCharactersResponseImpl) then) =\\n      __$$MarvelListCharactersResponseImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({int totalCount, List<Character> characters});\\n}\\n\\n/// @nodoc\\nclass __$$MarvelListCharactersResponseImplCopyWithImpl<$Res>\\n    extends _$MarvelListCharactersResponseCopyWithImpl<$Res,\\n        _$MarvelListCharactersResponseImpl>\\n    implements _$$MarvelListCharactersResponseImplCopyWith<$Res> {\\n  __$$MarvelListCharactersResponseImplCopyWithImpl(\\n      _$MarvelListCharactersResponseImpl _value,\\n      $Res Function(_$MarvelListCharactersResponseImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? totalCount = null,\\n    Object? characters = null,\\n  }) {\\n    return _then(_$MarvelListCharactersResponseImpl(\\n      totalCount: null == totalCount\\n          ? _value.totalCount\\n          : totalCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      characters: null == characters\\n          ? _value._characters\\n          : characters // ignore: cast_nullable_to_non_nullable\\n              as List<Character>,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\nclass _$MarvelListCharactersResponseImpl\\n    implements _MarvelListCharactersResponse {\\n  _$MarvelListCharactersResponseImpl(\\n      {required this.totalCount, required final List<Character> characters})\\n      : _characters = characters;\\n\\n  @override\\n  final int totalCount;\\n  final List<Character> _characters;\\n  @override\\n  List<Character> get characters {\\n    if (_characters is EqualUnmodifiableListView) return _characters;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_characters);\\n  }\\n\\n  @override\\n  String toString() {\\n    return 'MarvelListCharactersResponse(totalCount: $totalCount, characters: $characters)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$MarvelListCharactersResponseImpl &&\\n            (identical(other.totalCount, totalCount) ||\\n                other.totalCount == totalCount) &&\\n            const DeepCollectionEquality()\\n                .equals(other._characters, _characters));\\n  }\\n\\n  @override\\n  int get hashCode => Object.hash(runtimeType, totalCount,\\n      const DeepCollectionEquality().hash(_characters));\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$MarvelListCharactersResponseImplCopyWith<\\n          _$MarvelListCharactersResponseImpl>\\n      get copyWith => __$$MarvelListCharactersResponseImplCopyWithImpl<\\n          _$MarvelListCharactersResponseImpl>(this, _$identity);\\n}\\n\\nabstract class _MarvelListCharactersResponse\\n    implements MarvelListCharactersResponse {\\n  factory _MarvelListCharactersResponse(\\n          {required final int totalCount,\\n          required final List<Character> characters}) =\\n      _$MarvelListCharactersResponseImpl;\\n\\n  @override\\n  int get totalCount;\\n  @override\\n  List<Character> get characters;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$MarvelListCharactersResponseImplCopyWith<\\n          _$MarvelListCharactersResponseImpl>\\n      get copyWith => throw _privateConstructorUsedError;\\n}\\n\\nCharacter _$CharacterFromJson(Map<String, dynamic> json) {\\n  return _Character.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$Character {\\n  int get id => throw _privateConstructorUsedError;\\n  String get name => throw _privateConstructorUsedError;\\n  Thumbnail get thumbnail => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $CharacterCopyWith<Character> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $CharacterCopyWith<$Res> {\\n  factory $CharacterCopyWith(Character value, $Res Function(Character) then) =\\n      _$CharacterCopyWithImpl<$Res, Character>;\\n  @useResult\\n  $Res call({int id, String name, Thumbnail thumbnail});\\n\\n  $ThumbnailCopyWith<$Res> get thumbnail;\\n}\\n\\n/// @nodoc\\nclass _$CharacterCopyWithImpl<$Res, $Val extends Character>\\n    implements $CharacterCopyWith<$Res> {\\n  _$CharacterCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? id = null,\\n    Object? name = null,\\n    Object? thumbnail = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      id: null == id\\n          ? _value.id\\n          : id // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      name: null == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      thumbnail: null == thumbnail\\n          ? _value.thumbnail\\n          : thumbnail // ignore: cast_nullable_to_non_nullable\\n              as Thumbnail,\\n    ) as $Val);\\n  }\\n\\n  @override\\n  @pragma('vm:prefer-inline')\\n  $ThumbnailCopyWith<$Res> get thumbnail {\\n    return $ThumbnailCopyWith<$Res>(_value.thumbnail, (value) {\\n      return _then(_value.copyWith(thumbnail: value) as $Val);\\n    });\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$CharacterImplCopyWith<$Res>\\n    implements $CharacterCopyWith<$Res> {\\n  factory _$$CharacterImplCopyWith(\\n          _$CharacterImpl value, $Res Function(_$CharacterImpl) then) =\\n      __$$CharacterImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({int id, String name, Thumbnail thumbnail});\\n\\n  @override\\n  $ThumbnailCopyWith<$Res> get thumbnail;\\n}\\n\\n/// @nodoc\\nclass __$$CharacterImplCopyWithImpl<$Res>\\n    extends _$CharacterCopyWithImpl<$Res, _$CharacterImpl>\\n    implements _$$CharacterImplCopyWith<$Res> {\\n  __$$CharacterImplCopyWithImpl(\\n      _$CharacterImpl _value, $Res Function(_$CharacterImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? id = null,\\n    Object? name = null,\\n    Object? thumbnail = null,\\n  }) {\\n    return _then(_$CharacterImpl(\\n      id: null == id\\n          ? _value.id\\n          : id // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      name: null == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      thumbnail: null == thumbnail\\n          ? _value.thumbnail\\n          : thumbnail // ignore: cast_nullable_to_non_nullable\\n              as Thumbnail,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$CharacterImpl implements _Character {\\n  _$CharacterImpl(\\n      {required this.id, required this.name, required this.thumbnail});\\n\\n  factory _$CharacterImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$CharacterImplFromJson(json);\\n\\n  @override\\n  final int id;\\n  @override\\n  final String name;\\n  @override\\n  final Thumbnail thumbnail;\\n\\n  @override\\n  String toString() {\\n    return 'Character(id: $id, name: $name, thumbnail: $thumbnail)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$CharacterImpl &&\\n            (identical(other.id, id) || other.id == id) &&\\n            (identical(other.name, name) || other.name == name) &&\\n            (identical(other.thumbnail, thumbnail) ||\\n                other.thumbnail == thumbnail));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, id, name, thumbnail);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$CharacterImplCopyWith<_$CharacterImpl> get copyWith =>\\n      __$$CharacterImplCopyWithImpl<_$CharacterImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$CharacterImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _Character implements Character {\\n  factory _Character(\\n      {required final int id,\\n      required final String name,\\n      required final Thumbnail thumbnail}) = _$CharacterImpl;\\n\\n  factory _Character.fromJson(Map<String, dynamic> json) =\\n      _$CharacterImpl.fromJson;\\n\\n  @override\\n  int get id;\\n  @override\\n  String get name;\\n  @override\\n  Thumbnail get thumbnail;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$CharacterImplCopyWith<_$CharacterImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nThumbnail _$ThumbnailFromJson(Map<String, dynamic> json) {\\n  return _Thumbnail.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$Thumbnail {\\n  String get path => throw _privateConstructorUsedError;\\n  String get extension => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $ThumbnailCopyWith<Thumbnail> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $ThumbnailCopyWith<$Res> {\\n  factory $ThumbnailCopyWith(Thumbnail value, $Res Function(Thumbnail) then) =\\n      _$ThumbnailCopyWithImpl<$Res, Thumbnail>;\\n  @useResult\\n  $Res call({String path, String extension});\\n}\\n\\n/// @nodoc\\nclass _$ThumbnailCopyWithImpl<$Res, $Val extends Thumbnail>\\n    implements $ThumbnailCopyWith<$Res> {\\n  _$ThumbnailCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? path = null,\\n    Object? extension = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      path: null == path\\n          ? _value.path\\n          : path // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      extension: null == extension\\n          ? _value.extension\\n          : extension // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$ThumbnailImplCopyWith<$Res>\\n    implements $ThumbnailCopyWith<$Res> {\\n  factory _$$ThumbnailImplCopyWith(\\n          _$ThumbnailImpl value, $Res Function(_$ThumbnailImpl) then) =\\n      __$$ThumbnailImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({String path, String extension});\\n}\\n\\n/// @nodoc\\nclass __$$ThumbnailImplCopyWithImpl<$Res>\\n    extends _$ThumbnailCopyWithImpl<$Res, _$ThumbnailImpl>\\n    implements _$$ThumbnailImplCopyWith<$Res> {\\n  __$$ThumbnailImplCopyWithImpl(\\n      _$ThumbnailImpl _value, $Res Function(_$ThumbnailImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? path = null,\\n    Object? extension = null,\\n  }) {\\n    return _then(_$ThumbnailImpl(\\n      path: null == path\\n          ? _value.path\\n          : path // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      extension: null == extension\\n          ? _value.extension\\n          : extension // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$ThumbnailImpl extends _Thumbnail {\\n  _$ThumbnailImpl({required this.path, required this.extension}) : super._();\\n\\n  factory _$ThumbnailImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$ThumbnailImplFromJson(json);\\n\\n  @override\\n  final String path;\\n  @override\\n  final String extension;\\n\\n  @override\\n  String toString() {\\n    return 'Thumbnail(path: $path, extension: $extension)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$ThumbnailImpl &&\\n            (identical(other.path, path) || other.path == path) &&\\n            (identical(other.extension, extension) ||\\n                other.extension == extension));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, path, extension);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$ThumbnailImplCopyWith<_$ThumbnailImpl> get copyWith =>\\n      __$$ThumbnailImplCopyWithImpl<_$ThumbnailImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$ThumbnailImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _Thumbnail extends Thumbnail {\\n  factory _Thumbnail(\\n      {required final String path,\\n      required final String extension}) = _$ThumbnailImpl;\\n  _Thumbnail._() : super._();\\n\\n  factory _Thumbnail.fromJson(Map<String, dynamic> json) =\\n      _$ThumbnailImpl.fromJson;\\n\\n  @override\\n  String get path;\\n  @override\\n  String get extension;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$ThumbnailImplCopyWith<_$ThumbnailImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nMarvelResponse _$MarvelResponseFromJson(Map<String, dynamic> json) {\\n  return _MarvelResponse.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$MarvelResponse {\\n  MarvelData get data => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $MarvelResponseCopyWith<MarvelResponse> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $MarvelResponseCopyWith<$Res> {\\n  factory $MarvelResponseCopyWith(\\n          MarvelResponse value, $Res Function(MarvelResponse) then) =\\n      _$MarvelResponseCopyWithImpl<$Res, MarvelResponse>;\\n  @useResult\\n  $Res call({MarvelData data});\\n\\n  $MarvelDataCopyWith<$Res> get data;\\n}\\n\\n/// @nodoc\\nclass _$MarvelResponseCopyWithImpl<$Res, $Val extends MarvelResponse>\\n    implements $MarvelResponseCopyWith<$Res> {\\n  _$MarvelResponseCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? data = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      data: null == data\\n          ? _value.data\\n          : data // ignore: cast_nullable_to_non_nullable\\n              as MarvelData,\\n    ) as $Val);\\n  }\\n\\n  @override\\n  @pragma('vm:prefer-inline')\\n  $MarvelDataCopyWith<$Res> get data {\\n    return $MarvelDataCopyWith<$Res>(_value.data, (value) {\\n      return _then(_value.copyWith(data: value) as $Val);\\n    });\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$MarvelResponseImplCopyWith<$Res>\\n    implements $MarvelResponseCopyWith<$Res> {\\n  factory _$$MarvelResponseImplCopyWith(_$MarvelResponseImpl value,\\n          $Res Function(_$MarvelResponseImpl) then) =\\n      __$$MarvelResponseImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({MarvelData data});\\n\\n  @override\\n  $MarvelDataCopyWith<$Res> get data;\\n}\\n\\n/// @nodoc\\nclass __$$MarvelResponseImplCopyWithImpl<$Res>\\n    extends _$MarvelResponseCopyWithImpl<$Res, _$MarvelResponseImpl>\\n    implements _$$MarvelResponseImplCopyWith<$Res> {\\n  __$$MarvelResponseImplCopyWithImpl(\\n      _$MarvelResponseImpl _value, $Res Function(_$MarvelResponseImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? data = null,\\n  }) {\\n    return _then(_$MarvelResponseImpl(\\n      null == data\\n          ? _value.data\\n          : data // ignore: cast_nullable_to_non_nullable\\n              as MarvelData,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$MarvelResponseImpl implements _MarvelResponse {\\n  _$MarvelResponseImpl(this.data);\\n\\n  factory _$MarvelResponseImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$MarvelResponseImplFromJson(json);\\n\\n  @override\\n  final MarvelData data;\\n\\n  @override\\n  String toString() {\\n    return 'MarvelResponse(data: $data)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$MarvelResponseImpl &&\\n            (identical(other.data, data) || other.data == data));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, data);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$MarvelResponseImplCopyWith<_$MarvelResponseImpl> get copyWith =>\\n      __$$MarvelResponseImplCopyWithImpl<_$MarvelResponseImpl>(\\n          this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$MarvelResponseImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _MarvelResponse implements MarvelResponse {\\n  factory _MarvelResponse(final MarvelData data) = _$MarvelResponseImpl;\\n\\n  factory _MarvelResponse.fromJson(Map<String, dynamic> json) =\\n      _$MarvelResponseImpl.fromJson;\\n\\n  @override\\n  MarvelData get data;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$MarvelResponseImplCopyWith<_$MarvelResponseImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nMarvelData _$MarvelDataFromJson(Map<String, dynamic> json) {\\n  return _MarvelData.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$MarvelData {\\n  List<Map<String, Object?>> get results => throw _privateConstructorUsedError;\\n  int get total => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $MarvelDataCopyWith<MarvelData> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $MarvelDataCopyWith<$Res> {\\n  factory $MarvelDataCopyWith(\\n          MarvelData value, $Res Function(MarvelData) then) =\\n      _$MarvelDataCopyWithImpl<$Res, MarvelData>;\\n  @useResult\\n  $Res call({List<Map<String, Object?>> results, int total});\\n}\\n\\n/// @nodoc\\nclass _$MarvelDataCopyWithImpl<$Res, $Val extends MarvelData>\\n    implements $MarvelDataCopyWith<$Res> {\\n  _$MarvelDataCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? results = null,\\n    Object? total = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      results: null == results\\n          ? _value.results\\n          : results // ignore: cast_nullable_to_non_nullable\\n              as List<Map<String, Object?>>,\\n      total: null == total\\n          ? _value.total\\n          : total // ignore: cast_nullable_to_non_nullable\\n              as int,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$MarvelDataImplCopyWith<$Res>\\n    implements $MarvelDataCopyWith<$Res> {\\n  factory _$$MarvelDataImplCopyWith(\\n          _$MarvelDataImpl value, $Res Function(_$MarvelDataImpl) then) =\\n      __$$MarvelDataImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({List<Map<String, Object?>> results, int total});\\n}\\n\\n/// @nodoc\\nclass __$$MarvelDataImplCopyWithImpl<$Res>\\n    extends _$MarvelDataCopyWithImpl<$Res, _$MarvelDataImpl>\\n    implements _$$MarvelDataImplCopyWith<$Res> {\\n  __$$MarvelDataImplCopyWithImpl(\\n      _$MarvelDataImpl _value, $Res Function(_$MarvelDataImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? results = null,\\n    Object? total = null,\\n  }) {\\n    return _then(_$MarvelDataImpl(\\n      null == results\\n          ? _value._results\\n          : results // ignore: cast_nullable_to_non_nullable\\n              as List<Map<String, Object?>>,\\n      null == total\\n          ? _value.total\\n          : total // ignore: cast_nullable_to_non_nullable\\n              as int,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$MarvelDataImpl implements _MarvelData {\\n  _$MarvelDataImpl(final List<Map<String, Object?>> results, this.total)\\n      : _results = results;\\n\\n  factory _$MarvelDataImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$MarvelDataImplFromJson(json);\\n\\n  final List<Map<String, Object?>> _results;\\n  @override\\n  List<Map<String, Object?>> get results {\\n    if (_results is EqualUnmodifiableListView) return _results;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_results);\\n  }\\n\\n  @override\\n  final int total;\\n\\n  @override\\n  String toString() {\\n    return 'MarvelData(results: $results, total: $total)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$MarvelDataImpl &&\\n            const DeepCollectionEquality().equals(other._results, _results) &&\\n            (identical(other.total, total) || other.total == total));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(\\n      runtimeType, const DeepCollectionEquality().hash(_results), total);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$MarvelDataImplCopyWith<_$MarvelDataImpl> get copyWith =>\\n      __$$MarvelDataImplCopyWithImpl<_$MarvelDataImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$MarvelDataImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _MarvelData implements MarvelData {\\n  factory _MarvelData(\\n          final List<Map<String, Object?>> results, final int total) =\\n      _$MarvelDataImpl;\\n\\n  factory _MarvelData.fromJson(Map<String, dynamic> json) =\\n      _$MarvelDataImpl.fromJson;\\n\\n  @override\\n  List<Map<String, Object?>> get results;\\n  @override\\n  int get total;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$MarvelDataImplCopyWith<_$MarvelDataImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"marvel/lib/src/marvel.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// ignore: import_of_legacy_library_into_null_safe\\n// ignore_for_file: invalid_annotation_target\\n\\nimport 'package:dio/dio.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\n\\npart 'fake_marvel.g.dart';\\n\\n@JsonLiteral('characters.json')\\nfinal _characters = _$_charactersJsonLiteral;\\n\\n@JsonLiteral('characters_20.json')\\nfinal _characters20 = _$_characters20JsonLiteral;\\n\\n@JsonLiteral('characters_name= Iron man.json')\\nfinal _charactersIronMan = _$_charactersIronManJsonLiteral;\\n\\n@JsonLiteral('characters_name= Iron man (.json')\\nfinal _charactersIronMan2 = _$_charactersIronMan2JsonLiteral;\\n\\n@JsonLiteral('character_1009368.json')\\nfinal _character1009368 = _$_character1009368JsonLiteral;\\n\\nclass FakeDio implements Dio {\\n  FakeDio([this._apiKey = '42']);\\n\\n  final String? _apiKey;\\n\\n  @override\\n  Future<Response<T>> get<T>(\\n    String path, {\\n    Object? data,\\n    Map<String, dynamic>? queryParameters,\\n    Options? options,\\n    CancelToken? cancelToken,\\n    ProgressCallback? onReceiveProgress,\\n  }) async {\\n    print('hello $_apiKey $queryParameters');\\n    if (_apiKey != null && queryParameters?['apikey'] != _apiKey) {\\n      throw StateError('Missing api key');\\n    }\\n\\n    switch (path) {\\n      case 'https://gateway.marvel.com/v1/public/characters/1009368':\\n        return FakeResponse(_character1009368) as Response<T>;\\n      case 'https://gateway.marvel.com/v1/public/characters':\\n        if (queryParameters?['nameStartsWith'] == 'Iron man') {\\n          return FakeResponse(_charactersIronMan) as Response<T>;\\n        }\\n        if (queryParameters?['nameStartsWith'] == 'Iron man (') {\\n          return FakeResponse(_charactersIronMan2) as Response<T>;\\n        }\\n        if (queryParameters?['offset'] == 0) {\\n          return FakeResponse(_characters) as Response<T>;\\n        }\\n        if (queryParameters?['offset'] == 20) {\\n          return FakeResponse(_characters20) as Response<T>;\\n        }\\n        break;\\n    }\\n    if (path == '?apikey=$_apiKey') {}\\n    throw UnimplementedError();\\n  }\\n\\n  @override\\n  void noSuchMethod(Invocation invocation) {\\n    throw UnimplementedError();\\n  }\\n}\\n\\nclass FakeResponse implements Response<Map<String, Object?>> {\\n  FakeResponse(this.data);\\n\\n  @override\\n  final Map<String, Object?> data;\\n\\n  @override\\n  void noSuchMethod(Invocation invocation) {\\n    throw UnimplementedError();\\n  }\\n}\\n\",\"path\":\"marvel/lib/src/fake_marvel.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'configuration.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\nConfiguration _$ConfigurationFromJson(Map<String, dynamic> json) {\\n  return _Configuration.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$Configuration {\\n  String get publicKey => throw _privateConstructorUsedError;\\n  String get privateKey => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $ConfigurationCopyWith<Configuration> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $ConfigurationCopyWith<$Res> {\\n  factory $ConfigurationCopyWith(\\n          Configuration value, $Res Function(Configuration) then) =\\n      _$ConfigurationCopyWithImpl<$Res, Configuration>;\\n  @useResult\\n  $Res call({String publicKey, String privateKey});\\n}\\n\\n/// @nodoc\\nclass _$ConfigurationCopyWithImpl<$Res, $Val extends Configuration>\\n    implements $ConfigurationCopyWith<$Res> {\\n  _$ConfigurationCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? publicKey = null,\\n    Object? privateKey = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      publicKey: null == publicKey\\n          ? _value.publicKey\\n          : publicKey // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      privateKey: null == privateKey\\n          ? _value.privateKey\\n          : privateKey // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$ConfigurationImplCopyWith<$Res>\\n    implements $ConfigurationCopyWith<$Res> {\\n  factory _$$ConfigurationImplCopyWith(\\n          _$ConfigurationImpl value, $Res Function(_$ConfigurationImpl) then) =\\n      __$$ConfigurationImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({String publicKey, String privateKey});\\n}\\n\\n/// @nodoc\\nclass __$$ConfigurationImplCopyWithImpl<$Res>\\n    extends _$ConfigurationCopyWithImpl<$Res, _$ConfigurationImpl>\\n    implements _$$ConfigurationImplCopyWith<$Res> {\\n  __$$ConfigurationImplCopyWithImpl(\\n      _$ConfigurationImpl _value, $Res Function(_$ConfigurationImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? publicKey = null,\\n    Object? privateKey = null,\\n  }) {\\n    return _then(_$ConfigurationImpl(\\n      publicKey: null == publicKey\\n          ? _value.publicKey\\n          : publicKey // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      privateKey: null == privateKey\\n          ? _value.privateKey\\n          : privateKey // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\n@JsonSerializable(fieldRename: FieldRename.snake)\\nclass _$ConfigurationImpl implements _Configuration {\\n  _$ConfigurationImpl({required this.publicKey, required this.privateKey});\\n\\n  factory _$ConfigurationImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$ConfigurationImplFromJson(json);\\n\\n  @override\\n  final String publicKey;\\n  @override\\n  final String privateKey;\\n\\n  @override\\n  String toString() {\\n    return 'Configuration(publicKey: $publicKey, privateKey: $privateKey)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$ConfigurationImpl &&\\n            (identical(other.publicKey, publicKey) ||\\n                other.publicKey == publicKey) &&\\n            (identical(other.privateKey, privateKey) ||\\n                other.privateKey == privateKey));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, publicKey, privateKey);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$ConfigurationImplCopyWith<_$ConfigurationImpl> get copyWith =>\\n      __$$ConfigurationImplCopyWithImpl<_$ConfigurationImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$ConfigurationImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _Configuration implements Configuration {\\n  factory _Configuration(\\n      {required final String publicKey,\\n      required final String privateKey}) = _$ConfigurationImpl;\\n\\n  factory _Configuration.fromJson(Map<String, dynamic> json) =\\n      _$ConfigurationImpl.fromJson;\\n\\n  @override\\n  String get publicKey;\\n  @override\\n  String get privateKey;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$ConfigurationImplCopyWith<_$ConfigurationImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"marvel/lib/src/configuration.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\npart of 'configuration.dart';\\n\\n// **************************************************************************\\n// JsonSerializableGenerator\\n// **************************************************************************\\n\\n_$ConfigurationImpl _$$ConfigurationImplFromJson(Map<String, dynamic> json) =>\\n    _$ConfigurationImpl(\\n      publicKey: json['public_key'] as String,\\n      privateKey: json['private_key'] as String,\\n    );\\n\\nMap<String, dynamic> _$$ConfigurationImplToJson(_$ConfigurationImpl instance) =>\\n    <String, dynamic>{\\n      'public_key': instance.publicKey,\\n      'private_key': instance.privateKey,\\n    };\\n\",\"path\":\"marvel/lib/src/configuration.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\npart of 'fake_marvel.dart';\\n\\n// **************************************************************************\\n// JsonLiteralGenerator\\n// **************************************************************************\\n\\nfinal _$_charactersJsonLiteral = {\\n  'code': 200,\\n  'status': 'Ok',\\n  'copyright': '© 2020 MARVEL',\\n  'attributionText': 'Data provided by Marvel. © 2020 MARVEL',\\n  'attributionHTML':\\n      '<a href=\\\"http://marvel.com\\\">Data provided by Marvel. © 2020 MARVEL</a>',\\n  'etag': 'eba58984956be48bdfd28818fa4fad1ff5f5cf81',\\n  'data': {\\n    'offset': 0,\\n    'limit': 20,\\n    'total': 1493,\\n    'count': 20,\\n    'results': [\\n      {\\n        'id': 1011334,\\n        'name': '3-D Man',\\n        'description': '',\\n        'modified': '2014-04-29T14:18:17-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/c/e0/535fecbbb9784',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011334',\\n        'comics': {\\n          'available': 12,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011334/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21366',\\n              'name': 'Avengers: The Initiative (2007) #14'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24571',\\n              'name': 'Avengers: The Initiative (2007) #14 (SPOTLIGHT VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21546',\\n              'name': 'Avengers: The Initiative (2007) #15'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21741',\\n              'name': 'Avengers: The Initiative (2007) #16'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21975',\\n              'name': 'Avengers: The Initiative (2007) #17'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/22299',\\n              'name': 'Avengers: The Initiative (2007) #18'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/22300',\\n              'name': 'Avengers: The Initiative (2007) #18 (ZOMBIE VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/22506',\\n              'name': 'Avengers: The Initiative (2007) #19'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/8500',\\n              'name': 'Deadpool (1997) #44'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10223',\\n              'name': 'Marvel Premiere (1972) #35'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10224',\\n              'name': 'Marvel Premiere (1972) #36'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10225',\\n              'name': 'Marvel Premiere (1972) #37'\\n            }\\n          ],\\n          'returned': 12\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011334/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1945',\\n              'name': 'Avengers: The Initiative (2007 - 2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2005',\\n              'name': 'Deadpool (1997 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2045',\\n              'name': 'Marvel Premiere (1972 - 1981)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 21,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011334/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19947',\\n              'name': 'Cover #19947',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19948',\\n              'name': 'The 3-D Man!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19949',\\n              'name': 'Cover #19949',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19950',\\n              'name': \\\"The Devil's Music!\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19951',\\n              'name': 'Cover #19951',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19952',\\n              'name': 'Code-Name:  The Cold Warrior!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47184',\\n              'name': 'AVENGERS: THE INITIATIVE (2007) #14',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47185',\\n              'name': 'Avengers: The Initiative (2007) #14 - Int',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47498',\\n              'name': 'AVENGERS: THE INITIATIVE (2007) #15',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47499',\\n              'name': 'Avengers: The Initiative (2007) #15 - Int',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47792',\\n              'name': 'AVENGERS: THE INITIATIVE (2007) #16',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47793',\\n              'name': 'Avengers: The Initiative (2007) #16 - Int',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/48361',\\n              'name': 'AVENGERS: THE INITIATIVE (2007) #17',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/48362',\\n              'name': 'Avengers: The Initiative (2007) #17 - Int',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49103',\\n              'name': 'AVENGERS: THE INITIATIVE (2007) #18',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49104',\\n              'name': 'Avengers: The Initiative (2007) #18 - Int',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49106',\\n              'name':\\n                  'Avengers: The Initiative (2007) #18, Zombie Variant - Int',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49888',\\n              'name': 'AVENGERS: THE INITIATIVE (2007) #19',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49889',\\n              'name': 'Avengers: The Initiative (2007) #19 - Int',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/54371',\\n              'name':\\n                  'Avengers: The Initiative (2007) #14, Spotlight Variant - Int',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011334/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/269',\\n              'name': 'Secret Invasion'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/74/3-d_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/3-D_Man_(Chandler)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011334/3-d_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017100,\\n        'name': 'A-Bomb (HAS)',\\n        'description':\\n            \\\"Rick Jones has been Hulk's best bud since day one, but now he's more than a friend...he's a teammate! Transformed by a Gamma energy explosion, A-Bomb's thick, armored skin is just as strong and powerful as it is blue. And when he curls into action, he uses it like a giant bowling ball of destruction! \\\",\\n        'modified': '2013-09-18T15:54:04-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/3/20/5232158de5b16',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017100',\\n        'comics': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017100/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40632',\\n              'name': 'Hulk (2008) #53'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40630',\\n              'name': 'Hulk (2008) #54'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40628',\\n              'name': 'Hulk (2008) #55'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'series': {\\n          'available': 2,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017100/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/17765',\\n              'name': 'FREE COMIC BOOK DAY 2013 1 (2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3374',\\n              'name': 'Hulk (2008 - 2012)'\\n            }\\n          ],\\n          'returned': 2\\n        },\\n        'stories': {\\n          'available': 7,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017100/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92078',\\n              'name': 'Hulk (2008) #55',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92079',\\n              'name': 'Interior #92079',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92082',\\n              'name': 'Hulk (2008) #54',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92083',\\n              'name': 'Interior #92083',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92086',\\n              'name': 'Hulk (2008) #53',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92087',\\n              'name': 'Interior #92087',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/105929',\\n              'name':\\n                  'cover from Free Comic Book Day 2013 (Avengers/Hulk) (2013) #1',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 7\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017100/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1017100/a-bomb_has?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017100/a-bomb_has?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009144,\\n        'name': 'A.I.M.',\\n        'description':\\n            'AIM is a terrorist organization bent on destroying the world.',\\n        'modified': '2013-10-17T14:41:30-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/6/20/52602f21f29ec',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009144',\\n        'comics': {\\n          'available': 49,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009144/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/36763',\\n              'name': 'Ant-Man & the Wasp (2010) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17553',\\n              'name': 'Avengers (1998) #67'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/7340',\\n              'name': 'Avengers (1963) #87'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/4214',\\n              'name': 'Avengers and Power Pack Assemble! (2006) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/63217',\\n              'name': 'Avengers and Power Pack (2017) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/63218',\\n              'name': 'Avengers and Power Pack (2017) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/63219',\\n              'name': 'Avengers and Power Pack (2017) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/63220',\\n              'name': 'Avengers and Power Pack (2017) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/64790',\\n              'name':\\n                  'Avengers by Brian Michael Bendis: The Complete Collection Vol. 2 (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1170',\\n              'name': 'Avengers Vol. 2: Red Zone (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1214',\\n              'name': 'Avengers Vol. II: Red Zone (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12787',\\n              'name': 'Captain America (1998) #28'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/7513',\\n              'name': 'Captain America (1968) #132'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/7514',\\n              'name': 'Captain America (1968) #133'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/65466',\\n              'name':\\n                  'Captain America by Mark Waid, Ron Garney & Andy Kubert (Hardcover)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20367',\\n              'name': 'Defenders (1972) #57'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/31068',\\n              'name': 'Incredible Hulks (2010) #606 (VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/46168',\\n              'name': 'Indestructible Hulk (2012) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/43944',\\n              'name': 'Iron Man (2012) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/9544',\\n              'name': 'Iron Man (1968) #295'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 33,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009144/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13082',\\n              'name': 'Ant-Man & the Wasp (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/354',\\n              'name': 'Avengers (1998 - 2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1991',\\n              'name': 'Avengers (1963 - 1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23123',\\n              'name': 'Avengers and Power Pack (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1046',\\n              'name': 'Avengers and Power Pack Assemble! (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23600',\\n              'name':\\n                  'Avengers by Brian Michael Bendis: The Complete Collection Vol. 2 (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/227',\\n              'name': 'Avengers Vol. 2: Red Zone (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/271',\\n              'name': 'Avengers Vol. II: Red Zone (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1996',\\n              'name': 'Captain America (1968 - 1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1997',\\n              'name': 'Captain America (1998 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23810',\\n              'name':\\n                  'Captain America by Mark Waid, Ron Garney & Andy Kubert (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3743',\\n              'name': 'Defenders (1972 - 1986)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8842',\\n              'name': 'Incredible Hulks (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16583',\\n              'name': 'Indestructible Hulk (2012 - 2014)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2029',\\n              'name': 'Iron Man (1968 - 1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16593',\\n              'name': 'Iron Man (2012 - 2014)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23915',\\n              'name': 'Iron Man Epic Collection: Doom (2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9718',\\n              'name': 'Marvel Adventures Super Heroes (2010 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/189',\\n              'name':\\n                  'Marvel Masterworks: Captain America Vol. 1 - 2nd Edition (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1506',\\n              'name': 'MARVEL MASTERWORKS: CAPTAIN AMERICA VOL. 1 HC (2005)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 52,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009144/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5800',\\n              'name': 'Avengers and Power Pack Assemble! (2006) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5801',\\n              'name': '2 of 4 - 4XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10253',\\n              'name': 'When the Unliving Strike',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10255',\\n              'name': 'Cover #10255',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10256',\\n              'name': 'The Enemy Within!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10259',\\n              'name': 'Death Before Dishonor!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10261',\\n              'name': 'Cover #10261',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10262',\\n              'name': 'The End of A.I.M.!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11921',\\n              'name': 'The Red Skull Lives!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11930',\\n              'name': 'He Who Holds the Cosmic Cube',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11936',\\n              'name': 'The Maddening Mystery of the Inconceivable Adaptoid!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11981',\\n              'name': 'If This Be... Modok',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11984',\\n              'name': 'A Time to Die -- A Time to Live!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11995',\\n              'name': 'At the Mercy of the Maggia',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/15243',\\n              'name': 'Look Homeward, Avenger',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/17518',\\n              'name': 'Captain America (1968) #132',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/17519',\\n              'name': 'The Fearful Secret of Bucky Barnes',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/17520',\\n              'name': 'Captain America (1968) #133',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/17521',\\n              'name': 'Madness In the Slums',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28233',\\n              'name': 'In Sin Airy X',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009144/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009144/aim.?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/A.I.M.?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009144/aim.?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010699,\\n        'name': 'Aaron Stack',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010699',\\n        'comics': {\\n          'available': 14,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010699/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40776',\\n              'name': 'Dark Avengers (2012) #177'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40773',\\n              'name': 'Dark Avengers (2012) #179'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40774',\\n              'name': 'Dark Avengers (2012) #180'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40778',\\n              'name': 'Dark Avengers (2012) #181'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40787',\\n              'name': 'Dark Avengers (2012) #182'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40786',\\n              'name': 'Dark Avengers (2012) #183'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38073',\\n              'name': 'Hulk (2008) #43'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/11910',\\n              'name': 'Universe X (2000) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/11911',\\n              'name': 'Universe X (2000) #7'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/11912',\\n              'name': 'Universe X (2000) #8'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/11913',\\n              'name': 'Universe X (2000) #9'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/11903',\\n              'name': 'Universe X (2000) #10'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/11904',\\n              'name': 'Universe X (2000) #11'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/11905',\\n              'name': 'Universe X (2000) #12'\\n            }\\n          ],\\n          'returned': 14\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010699/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/789',\\n              'name': 'Dark Avengers (2012 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3374',\\n              'name': 'Hulk (2008 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2085',\\n              'name': 'Universe X (2000 - 2001)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 27,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010699/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25634',\\n              'name': 'Universe X (2000) #10',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25635',\\n              'name': 'Interior #25635',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25637',\\n              'name': 'Universe X (2000) #12',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25638',\\n              'name': 'Interior #25638',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25647',\\n              'name': 'Universe X (2000) #6',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25648',\\n              'name': 'Interior #25648',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25649',\\n              'name': 'Universe X (2000) #7',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25650',\\n              'name': 'Interior #25650',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25651',\\n              'name': 'Universe X (2000) #8',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25652',\\n              'name': 'Interior #25652',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25653',\\n              'name': 'Universe X (2000) #9',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/25654',\\n              'name': 'Interior #25654',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/67100',\\n              'name': 'Universe X (2000) #11',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/89190',\\n              'name': 'Hulk (2008) #43',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/90002',\\n              'name': 'Interior #90002',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92370',\\n              'name': 'Dark Avengers (2012) #179',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92371',\\n              'name': 'Interior #92371',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92372',\\n              'name': 'Dark Avengers (2012) #180',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92373',\\n              'name': 'Interior #92373',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92376',\\n              'name': 'Dark Avengers (2012) #177',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010699/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010699/aaron_stack?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010699/aaron_stack?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009146,\\n        'name': 'Abomination (Emil Blonsky)',\\n        'description':\\n            'Formerly known as Emil Blonsky, a spy of Soviet Yugoslavian origin working for the KGB, the Abomination gained his powers after receiving a dose of gamma radiation similar to that which transformed Bruce Banner into the incredible Hulk.',\\n        'modified': '2012-03-20T12:32:12-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/50/4ce18691cbf04',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009146',\\n        'comics': {\\n          'available': 53,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009146/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17547',\\n              'name': 'Avengers (1998) #61'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17548',\\n              'name': 'Avengers (1998) #62'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1098',\\n              'name': 'Avengers Vol. 1: World Trust (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/8557',\\n              'name': 'Earth X (1999) #7'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/4241',\\n              'name': 'Earth X (New (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20863',\\n              'name': 'Hulk (2008) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2499',\\n              'name': 'Hulk: Destruction (2005) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14424',\\n              'name': 'Hulk (1999) #24'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14425',\\n              'name': 'Hulk (1999) #25'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14428',\\n              'name': 'Hulk (1999) #28'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14450',\\n              'name': 'Hulk (1999) #50'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14451',\\n              'name': 'Hulk (1999) #51'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14453',\\n              'name': 'Hulk (1999) #53'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14454',\\n              'name': 'Hulk (1999) #54'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/8948',\\n              'name': 'Incredible Hulk (1962) #137'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/8982',\\n              'name': 'Incredible Hulk (1962) #171'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/9005',\\n              'name': 'Incredible Hulk (1962) #194'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/9006',\\n              'name': 'Incredible Hulk (1962) #195'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/9007',\\n              'name': 'Incredible Hulk (1962) #196'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/9011',\\n              'name': 'Incredible Hulk (1962) #200'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 26,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009146/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/354',\\n              'name': 'Avengers (1998 - 2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/158',\\n              'name': 'Avengers Vol. 1: World Trust (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/378',\\n              'name': 'Earth X (1999 - 2000)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1806',\\n              'name': 'Earth X (New (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3374',\\n              'name': 'Hulk (2008 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/465',\\n              'name': 'Hulk (1999 - 2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/924',\\n              'name': 'Hulk: Destruction (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2021',\\n              'name': 'Incredible Hulk (1962 - 1999)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2983',\\n              'name': 'Incredible Hulk Annual (1976 - 1994)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22424',\\n              'name':\\n                  'Incredible Hulk Epic Collection: The Hulk Must Die (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/212',\\n              'name': 'Incredible Hulk Vol. 4: Abominable (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/244',\\n              'name': 'Incredible Hulk Vol. IV: Abominable (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8842',\\n              'name': 'Incredible Hulks (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2572',\\n              'name': 'Iron Man (1998 - 2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/977',\\n              'name': 'Irredeemable Ant-Man (2006 - 2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2423',\\n              'name': 'Irredeemable Ant-Man Vol. 1: Low-Life (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3722',\\n              'name': 'Killraven (2002 - 2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2437',\\n              'name': 'Killraven Premiere (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/21675',\\n              'name':\\n                  'Marvel Cinematic Universe Guidebook: The Avengers Initiative (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22327',\\n              'name': 'Marvel Masterworks: The Incredible Hulk Vol. 11 (2017)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 63,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009146/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4946',\\n              'name': '4 of 4 - 4XLS',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5496',\\n              'name': 'Irredeemable Ant-Man (2006) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12370',\\n              'name': 'Cover #12370',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12372',\\n              'name': 'Whosoever Harms the Hulk..!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18419',\\n              'name': '[none]',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18420',\\n              'name': 'The Stars Mine Enemy',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18488',\\n              'name': 'Incredible Hulk (1962) #171',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18489',\\n              'name': 'Revenge',\\n              'type': ''\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18534',\\n              'name': 'Incredible Hulk (1962) #194',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18535',\\n              'name': 'The Day of the Locust!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18536',\\n              'name': 'Incredible Hulk (1962) #195',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18537',\\n              'name': 'Warfare In Wonderland!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18538',\\n              'name': 'Incredible Hulk (1962) #196',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18539',\\n              'name': 'The Abomination Proclamation!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18546',\\n              'name': 'Incredible Hulk (1962) #200',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18547',\\n              'name': 'An Intruder In the Mind!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18776',\\n              'name': 'Cover #18776',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18877',\\n              'name': 'Incredible Hulk (1962) #364',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18878',\\n              'name': 'Countdown Part 4: The Abomination',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18881',\\n              'name': 'Incredible Hulk (1962) #366',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009146/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/296',\\n              'name': 'Chaos War'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009146/abomination_emil_blonsky?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Abomination?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009146/abomination_emil_blonsky?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1016823,\\n        'name': 'Abomination (Ultimate)',\\n        'description': '',\\n        'modified': '2012-07-10T19:11:52-0400',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1016823',\\n        'comics': {\\n          'available': 2,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1016823/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40638',\\n              'name': 'Hulk (2008) #50'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15717',\\n              'name': 'Ultimate X-Men (2000) #26'\\n            }\\n          ],\\n          'returned': 2\\n        },\\n        'series': {\\n          'available': 2,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1016823/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3374',\\n              'name': 'Hulk (2008 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/474',\\n              'name': 'Ultimate X-Men (2000 - 2009)'\\n            }\\n          ],\\n          'returned': 2\\n        },\\n        'stories': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1016823/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/31883',\\n              'name': 'Free Preview of THE INCREDIBLE HULK #50',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92098',\\n              'name': 'Hulk (2008) #50',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/92099',\\n              'name': 'Interior #92099',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1016823/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1016823/abomination_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1016823/abomination_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009148,\\n        'name': 'Absorbing Man',\\n        'description': '',\\n        'modified': '2013-10-24T14:32:08-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/1/b0/5269678709fb7',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009148',\\n        'comics': {\\n          'available': 91,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009148/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/43507',\\n              'name': 'A+X (2012) #8'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/7045',\\n              'name': 'Avengers (1963) #183'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/7046',\\n              'name': 'Avengers (1963) #184'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/7142',\\n              'name': 'Avengers (1963) #270'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/36481',\\n              'name': 'Avengers Academy (2010) #16'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/36480',\\n              'name': 'Avengers Academy (2010) #17'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/36479',\\n              'name': 'Avengers Academy (2010) #18'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/36484',\\n              'name': 'Avengers Academy (2010) #19'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17776',\\n              'name': 'Avengers Annual (1967) #20'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/63662',\\n              'name': 'Black Bolt (2017) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/64278',\\n              'name': 'Black Bolt (2017) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/66533',\\n              'name': 'Black Bolt (2017) #11'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/65327',\\n              'name': 'Black Bolt Vol. 1: Hard Time (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12783',\\n              'name': 'Captain America (1998) #24'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20427',\\n              'name': 'Dazzler (1981) #18'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20428',\\n              'name': 'Dazzler (1981) #19'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/8499',\\n              'name': 'Deadpool (1997) #43'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15541',\\n              'name': 'Fantastic Four (1998) #22'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13151',\\n              'name': 'Fantastic Four (1961) #330'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/41433',\\n              'name': 'Fear Itself (2010) #2 (3rd Printing Variant)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 47,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009148/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16450',\\n              'name': 'A+X (2012 - 2014)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1991',\\n              'name': 'Avengers (1963 - 1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9086',\\n              'name': 'Avengers Academy (2010 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1988',\\n              'name': 'Avengers Annual (1967 - 1994)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23121',\\n              'name': 'Black Bolt (2017 - 2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23778',\\n              'name': 'Black Bolt Vol. 1: Hard Time (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1997',\\n              'name': 'Captain America (1998 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3745',\\n              'name': 'Dazzler (1981 - 1986)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2005',\\n              'name': 'Deadpool (1997 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/421',\\n              'name': 'Fantastic Four (1998 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2121',\\n              'name': 'Fantastic Four (1961 - 1998)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13691',\\n              'name': 'Fear Itself (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13857',\\n              'name': 'Fear Itself: Fellowship of Fear (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13827',\\n              'name': 'Fear Itself: The Worthy (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20084',\\n              'name': 'Heroes for Hire (1997 - 1999)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/465',\\n              'name': 'Hulk (1999 - 2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20552',\\n              'name': 'Illuminati (2015 - 2016)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24278',\\n              'name': 'Immortal Hulk (2018 - Present)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24891',\\n              'name': 'Immortal Hulk Vol. 2: The Green Door (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2021',\\n              'name': 'Incredible Hulk (1962 - 1999)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 104,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009148/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4988',\\n              'name': '1 of 1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/7866',\\n              'name': 'Punisher War Journal (2006) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10997',\\n              'name': 'Journey Into Mystery (1952) #114',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/10998',\\n              'name': 'The Stronger I Am, the Sooner I Die',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11000',\\n              'name': 'Journey Into Mystery (1952) #115',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11001',\\n              'name': 'The Vengeance of the Thunder God',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11022',\\n              'name': 'Journey Into Mystery (1952) #120',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11023',\\n              'name': 'With My Hammer In Hand',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11025',\\n              'name': 'Journey Into Mystery (1952) #121',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11026',\\n              'name': 'The Power!  The Passion!  The Pride!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11028',\\n              'name': 'Journey Into Mystery (1952) #122',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11029',\\n              'name': 'Where Mortals Fear To Tread!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11031',\\n              'name': 'Journey Into Mystery (1952) #123',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/11032',\\n              'name': 'While a Universe Trembles',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12951',\\n              'name': 'Fantastic Four (1961) #330',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12952',\\n              'name': 'Good Dreams!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/14628',\\n              'name': 'Avengers (1963) #183',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/14630',\\n              'name': 'Avengers (1963) #184',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/14823',\\n              'name': 'Avengers (1963) #270',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/16688',\\n              'name': 'Thor (1966) #206',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 4,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009148/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/238',\\n              'name': 'Civil War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/302',\\n              'name': 'Fear Itself'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/270',\\n              'name': 'Secret Wars'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/273',\\n              'name': 'Siege'\\n            }\\n          ],\\n          'returned': 4\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009148/absorbing_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Absorbing_Man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009148/absorbing_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009149,\\n        'name': 'Abyss',\\n        'description': '',\\n        'modified': '2014-04-29T14:10:43-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/30/535feab462a64',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009149',\\n        'comics': {\\n          'available': 8,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009149/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13943',\\n              'name': 'Uncanny X-Men (1963) #402'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13945',\\n              'name': 'Uncanny X-Men (1963) #404'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13946',\\n              'name': 'Uncanny X-Men (1963) #405'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13947',\\n              'name': 'Uncanny X-Men (1963) #406'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13970',\\n              'name': 'Uncanny X-Men (1963) #429'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13972',\\n              'name': 'Uncanny X-Men (1963) #431'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12386',\\n              'name': 'X-Men: Alpha (1995) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2539',\\n              'name':\\n                  'X-Men: The Complete Age of Apocalypse Epic Book 2 (Trade Paperback)'\\n            }\\n          ],\\n          'returned': 8\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009149/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2258',\\n              'name': 'Uncanny X-Men (1963 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2104',\\n              'name': 'X-Men: Alpha (1995)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1583',\\n              'name': 'X-Men: The Complete Age of Apocalypse Epic Book 2 (2005)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 8,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009149/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/26281',\\n              'name': 'A Beginning',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28352',\\n              'name': 'Utility of Myth',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28356',\\n              'name': 'Army Ants',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28358',\\n              'name': 'Ballroom Blitzkrieg',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28360',\\n              'name': 'Staring Contests are for Suckers',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28407',\\n              'name': 'The Draco Part One: Sins of the Father',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28411',\\n              'name': 'The Draco Part Three',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28413',\\n              'name': 'The Draco Part Four',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 8\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009149/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/227',\\n              'name': 'Age of Apocalypse'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009149/abyss?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Abyss_(alien)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009149/abyss?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010903,\\n        'name': 'Abyss (Age of Apocalypse)',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/3/80/4c00358ec7548',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010903',\\n        'comics': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010903/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18099',\\n              'name': 'Weapon X (1995) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12386',\\n              'name': 'X-Men: Alpha (1995) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2539',\\n              'name':\\n                  'X-Men: The Complete Age of Apocalypse Epic Book 2 (Trade Paperback)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010903/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3635',\\n              'name': 'Weapon X (1995)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2104',\\n              'name': 'X-Men: Alpha (1995)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1583',\\n              'name': 'X-Men: The Complete Age of Apocalypse Epic Book 2 (2005)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 2,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010903/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/26280',\\n              'name': 'X-Men: Alpha (1994) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/38448',\\n              'name': 'X-Facts',\\n              'type': ''\\n            }\\n          ],\\n          'returned': 2\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010903/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/227',\\n              'name': 'Age of Apocalypse'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010903/abyss_age_of_apocalypse?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Abyss_(Age_of_Apocalypse)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010903/abyss_age_of_apocalypse?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011266,\\n        'name': 'Adam Destine',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011266',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011266/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011266/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011266/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011266/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/2902/adam_destine?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Destine,_Adam?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011266/adam_destine?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010354,\\n        'name': 'Adam Warlock',\\n        'description':\\n            'Adam Warlock is an artificially created human who was born in a cocoon at a scientific complex called The Beehive.',\\n        'modified': '2013-08-07T13:49:06-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/a/f0/5202887448860',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010354',\\n        'comics': {\\n          'available': 188,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010354/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/62151',\\n              'name':\\n                  'All-New Guardians of the Galaxy Vol. 3: Infinity Quest (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17271',\\n              'name': 'Annihilation: Conquest (2007) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17405',\\n              'name': 'Annihilation: Conquest (2007) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17645',\\n              'name': 'Annihilation: Conquest (2007) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20686',\\n              'name': 'Annihilation: Conquest (2007) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20885',\\n              'name': 'Annihilation: Conquest (2007) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21016',\\n              'name': 'Annihilation: Conquest (2007) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12412',\\n              'name': 'Avengers Forever (1998) #9'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1033',\\n              'name':\\n                  'Avengers Legends Vol. I: Avengers Forever (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20731',\\n              'name': 'Clandestine Classic Premiere (Hardcover)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20187',\\n              'name': 'Doctor Strange, Sorcerer Supreme (1988) #27'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20193',\\n              'name': 'Doctor Strange, Sorcerer Supreme (1988) #32'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20197',\\n              'name': 'Doctor Strange, Sorcerer Supreme (1988) #36'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/8552',\\n              'name': 'Earth X (1999) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/8550',\\n              'name': 'Earth X (1999) #11'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/4241',\\n              'name': 'Earth X (New (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12975',\\n              'name': 'Fantastic Four (1961) #172'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13195',\\n              'name': 'Fantastic Four (1961) #370'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/25305',\\n              'name': 'Guardians of the Galaxy (2008) #17'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/65547',\\n              'name': 'All-New Guardians of the Galaxy (2017) #150'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 82,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010354/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23058',\\n              'name': 'All-New Guardians of the Galaxy (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22778',\\n              'name':\\n                  'All-New Guardians of the Galaxy Vol. 3: Infinity Quest (2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3061',\\n              'name': 'Annihilation: Conquest (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2111',\\n              'name': 'Avengers Forever (1998 - 2001)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/93',\\n              'name': 'Avengers Legends Vol. I: Avengers Forever (2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3874',\\n              'name': 'Clandestine Classic Premiere (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3741',\\n              'name': 'Doctor Strange, Sorcerer Supreme (1988 - 1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/378',\\n              'name': 'Earth X (1999 - 2000)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1806',\\n              'name': 'Earth X (New (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2121',\\n              'name': 'Fantastic Four (1961 - 1998)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/4885',\\n              'name': 'Guardians of the Galaxy (2008 - 2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27554',\\n              'name': 'Guardians Of The Galaxy Annual (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/26496',\\n              'name': 'Guardians Of The Galaxy Vol. 2: Faithless (2020)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22422',\\n              'name':\\n                  'GUARDIANS OF THE GALAXY: ROAD TO ANNIHILATION VOL. 2 TPB (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2021',\\n              'name': 'Incredible Hulk (1962 - 1999)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2983',\\n              'name': 'Incredible Hulk Annual (1976 - 1994)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/26307',\\n              'name': 'Infinity By Starlin & Hickman (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24050',\\n              'name': 'Infinity Countdown (2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24300',\\n              'name': 'Infinity Countdown Prime (2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23991',\\n              'name': 'Infinity Countdown: Adam Warlock (2018)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 217,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010354/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1412',\\n              'name': 'Cover #1412',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1602',\\n              'name': 'Cover #1602',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1800',\\n              'name': 'Cover #1800',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1842',\\n              'name': 'Cover #1842',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3758',\\n              'name': 'WARLOCK (2004) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3760',\\n              'name': 'WARLOCK (2004) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3762',\\n              'name': 'WARLOCK (2004) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3764',\\n              'name': 'WARLOCK (2004) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12568',\\n              'name': 'Fantastic Four (1961) #172',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12569',\\n              'name': 'Cry, the Bedeviled Planet!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/13121',\\n              'name': 'Forever Evil',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18500',\\n              'name': 'Incredible Hulk (1962) #177',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18501',\\n              'name': 'Peril of the Paired Planets',\\n              'type': ''\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/18503',\\n              'name': 'Triumph On Terra-Two',\\n              'type': ''\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19847',\\n              'name': 'Cover #19847',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19848',\\n              'name': 'Performance',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19859',\\n              'name': 'Days of Future Present Part 4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19860',\\n              'name': 'You Must Remember This',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19883',\\n              'name':\\n                  'The Adventures of Lockheed the Space Dragon and His Pet Girl, Kitty',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/19884',\\n              'name': 'The Saga of Storm: Goddess of Thunder',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 8,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010354/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/293',\\n              'name': 'Annihilation: Conquest'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/233',\\n              'name': 'Atlantis Attacks'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/235',\\n              'name': 'Blood and Thunder'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/240',\\n              'name': 'Days of Future Present'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/29',\\n              'name': 'Infinity War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/263',\\n              'name': 'Mutant Massacre'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/271',\\n              'name': 'Secret Wars II'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/280',\\n              'name': 'X-Tinction Agenda'\\n            }\\n          ],\\n          'returned': 8\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010354/adam_warlock?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Warlock,_Adam?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010354/adam_warlock?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010846,\\n        'name': 'Aegis (Trey Rollins)',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/5/e0/4c0035c9c425d',\\n          'extension': 'gif'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010846',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010846/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010846/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010846/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010846/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/95/aegis?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Aegis_%28Trey_Rollins%29?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010846/aegis_trey_rollins?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011297,\\n        'name': 'Agent Brand',\\n        'description': '',\\n        'modified': '2013-10-24T13:09:30-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/4/60/52695285d6e7e',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011297',\\n        'comics': {\\n          'available': 17,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011297/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5477',\\n              'name': 'Astonishing X-Men (2004) #19 (Variant)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/6120',\\n              'name': 'Astonishing X-Men (2004) #21'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/6309',\\n              'name': 'Astonishing X-Men (2004) #22'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/16119',\\n              'name': 'Astonishing X-Men (2004) #23'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17353',\\n              'name': 'Astonishing X-Men (2004) #24'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24503',\\n              'name': 'Astonishing X-Men (2004) #32'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24504',\\n              'name': 'Astonishing X-Men (2004) #33'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38318',\\n              'name': 'Astonishing X-Men (2004) #38'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38319',\\n              'name': 'Astonishing X-Men (2004) #40'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/40024',\\n              'name':\\n                  'Astonishing X-Men (2004) #40 (I Am Captain America Variant)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/45950',\\n              'name': 'Cable and X-Force (2012) #8'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/39890',\\n              'name': 'Heralds (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/26232',\\n              'name': 'S.W.O.R.D. (2009) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/26233',\\n              'name': 'S.W.O.R.D. (2009) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/26234',\\n              'name': 'S.W.O.R.D. (2009) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30518',\\n              'name': 'S.W.O.R.D. (2009) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61430',\\n              'name': 'The Mighty Captain Marvel (2017) #5'\\n            }\\n          ],\\n          'returned': 17\\n        },\\n        'series': {\\n          'available': 5,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011297/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/744',\\n              'name': 'Astonishing X-Men (2004 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16907',\\n              'name': 'Cable and X-Force (2012 - 2014)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13065',\\n              'name': 'Heralds (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8233',\\n              'name': 'S.W.O.R.D. (2009 - 2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22551',\\n              'name': 'The Mighty Captain Marvel (2017 - 2018)'\\n            }\\n          ],\\n          'returned': 5\\n        },\\n        'stories': {\\n          'available': 20,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011297/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3353',\\n              'name': 'Interior #3353',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/7670',\\n              'name': 'ASTONISHING X-MEN (2004) #21',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/8144',\\n              'name': 'ASTONISHING X-MEN (2004) #22',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/32919',\\n              'name': 'ASTONISHING X-MEN (2004) #23',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/36374',\\n              'name': 'ASTONISHING X-MEN (2004) #24',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/54039',\\n              'name': 'ASTONISHING X-MEN (2004) #32',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/54041',\\n              'name': 'ASTONISHING X-MEN (2004) #33',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/57763',\\n              'name': 'S.W.O.R.D. (2009) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/57765',\\n              'name': 'S.W.O.R.D. (2009) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/57767',\\n              'name': 'S.W.O.R.D. (2009) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/69862',\\n              'name': 'S.W.O.R.D. (2009) #5',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/89830',\\n              'name': 'ASTONISHING X-MEN (2004) #38',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/89900',\\n              'name': 'Astonishing X-Men (2004) #38',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/90548',\\n              'name': 'Heralds TPB',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/90819',\\n              'name': 'Interior #90819',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/90853',\\n              'name': ' Interior  Astonishing X-Men (2004) #40',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/90944',\\n              'name': 'ASTONISHING X-MEN (2004) #40',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/103418',\\n              'name': 'Cable and X-Force (2012) #8',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/103419',\\n              'name': 'story from Cable and X-Force (2012) #8',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/133289',\\n              'name': 'cover from Captain Marvel (2016) #5',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011297/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011297/agent_brand?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Agent_Brand?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011297/agent_brand?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011031,\\n        'name': 'Agent X (Nijo)',\\n        'description':\\n            \\\"Originally a partner of the mind-altering assassin Black Swan, Nijo spied on Deadpool as part of the Swan's plan to exact revenge for Deadpool falsely taking credit for the Swan's assassination of the Four Winds crime family, which included Nijo's brother.\\\",\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011031',\\n        'comics': {\\n          'available': 18,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011031/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17702',\\n              'name': 'Agent X (2002) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17709',\\n              'name': 'Agent X (2002) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17710',\\n              'name': 'Agent X (2002) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17711',\\n              'name': 'Agent X (2002) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17712',\\n              'name': 'Agent X (2002) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17713',\\n              'name': 'Agent X (2002) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17714',\\n              'name': 'Agent X (2002) #7'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17715',\\n              'name': 'Agent X (2002) #8'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17716',\\n              'name': 'Agent X (2002) #9'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17703',\\n              'name': 'Agent X (2002) #10'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17704',\\n              'name': 'Agent X (2002) #11'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17705',\\n              'name': 'Agent X (2002) #12'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17706',\\n              'name': 'Agent X (2002) #13'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17707',\\n              'name': 'Agent X (2002) #14'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/394',\\n              'name': 'Agent X (2002) #15'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1649',\\n              'name': 'Cable & Deadpool (2004) #12'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21845',\\n              'name': 'Cable & Deadpool (2004) #46 (Zombie Variant)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5761',\\n              'name':\\n                  'Cable & Deadpool Vol. 2: The Burnt Offering (Trade Paperback)'\\n            }\\n          ],\\n          'returned': 18\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011031/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/459',\\n              'name': 'Agent X (2002 - 2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/693',\\n              'name': 'Cable & Deadpool (2004 - 2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1338',\\n              'name': 'Cable & Deadpool Vol. 2: The Burnt Offering (2007)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 23,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011031/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1135',\\n              'name': 'AGENT X (2002) #15',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2484',\\n              'name': 'CABLE & DEADPOOL (2004) #12',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37514',\\n              'name': 'AGENT X (2002) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37515',\\n              'name': \\\"Dead Man's Switch Part One\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37516',\\n              'name': 'AGENT X (2002) #10',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37518',\\n              'name': 'AGENT X (2002) #11',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37521',\\n              'name': 'AGENT X (2002) #13',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37523',\\n              'name': 'AGENT X (2002) #14',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37525',\\n              'name': 'AGENT X (2002) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37526',\\n              'name': \\\"Dead Man's Switch Part Two\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37527',\\n              'name': 'AGENT X (2002) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37528',\\n              'name': \\\"Dead Man's Switch Part Three\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37529',\\n              'name': 'AGENT X (2002) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37530',\\n              'name': \\\"Dead Man's Switch Part Four\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37531',\\n              'name': 'AGENT X (2002) #5',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37532',\\n              'name': \\\"Dead Man's Switch Part Five\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37533',\\n              'name': 'AGENT X (2002) #6',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37534',\\n              'name': \\\"Dead Man's Switch Part Six\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37535',\\n              'name': 'AGENT X (2002) #7',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/67703',\\n              'name': 'AGENT X (2002) #12',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011031/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011031/agent_x_nijo?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Agent_X_(Nijo)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011031/agent_x_nijo?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009150,\\n        'name': 'Agent Zero',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c0042121d790',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009150',\\n        'comics': {\\n          'available': 28,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009150/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18082',\\n              'name': 'Weapon X (2002) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18092',\\n              'name': 'Weapon X (2002) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18074',\\n              'name': 'Weapon X (2002) #12'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/246',\\n              'name': 'Weapon X (2002) #13'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2204',\\n              'name': 'Weapon X: Days of Future Now (2005) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2324',\\n              'name': 'Weapon X: Days of Future Now (2005) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2438',\\n              'name': 'Weapon X: Days of Future Now (2005) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2439',\\n              'name': 'Weapon X: Days of Future Now (2005) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/3016',\\n              'name': 'Weapon X: Days of Future Now (2005) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/3357',\\n              'name': 'Weapon X: Days of Future Now (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18408',\\n              'name': 'WEAPON X: THE DRAFT - AGENT ZERO 1 (2002) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14182',\\n              'name': 'Wolverine (1988) #60'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14183',\\n              'name': 'Wolverine (1988) #61'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14184',\\n              'name': 'Wolverine (1988) #62'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14185',\\n              'name': 'Wolverine (1988) #63'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14186',\\n              'name': 'Wolverine (1988) #64'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14189',\\n              'name': 'Wolverine (1988) #67'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14190',\\n              'name': 'Wolverine (1988) #68'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14211',\\n              'name': 'Wolverine (1988) #87'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14107',\\n              'name': 'Wolverine (1988) #163'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 9,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009150/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/543',\\n              'name': 'Weapon X (2002 - 2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1478',\\n              'name': 'Weapon X: Days of Future Now (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/869',\\n              'name': 'Weapon X: Days of Future Now (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3649',\\n              'name': 'WEAPON X: THE DRAFT - AGENT ZERO 1 (2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2262',\\n              'name': 'Wolverine (1988 - 2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/84',\\n              'name': 'Wolverine/Deadpool: Weapon X (1999)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3643',\\n              'name': 'X-Man (1995 - 2000)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2265',\\n              'name': 'X-Men (1991 - 2001)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3637',\\n              'name': 'X-Men Unlimited (1993 - 2003)'\\n            }\\n          ],\\n          'returned': 9\\n        },\\n        'stories': {\\n          'available': 30,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009150/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1131',\\n              'name': 'WEAPON X (2002) #13',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4603',\\n              'name': '1 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4605',\\n              'name': '2 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4606',\\n              'name': '3 of 5 - 5XLS',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4608',\\n              'name': '4 of 5 - 5XLS',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4610',\\n              'name': '5 of 5 - 5XLS',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28706',\\n              'name': 'The Hunted Part 2',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28712',\\n              'name': 'The Hunted Part 5',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28738',\\n              'name': 'The Logan Files Epilogue',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28881',\\n              'name': 'Counting Coup',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28883',\\n              'name': 'Nightmare Quest!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28885',\\n              'name': 'Reunion!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28887',\\n              'name': 'Bastions of Glory!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28889',\\n              'name': 'What Goes Around...',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28895',\\n              'name': \\\"Valley O' Death\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28897',\\n              'name': 'Epsilon Red',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28941',\\n              'name': 'Showdown In Lowtown',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/29125',\\n              'name': 'Last Stand',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/29139',\\n              'name': 'Over...Again',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/38511',\\n              'name': 'Second Contact',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009150/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009150/agent_zero?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Agent_Zero?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009150/agent_zero?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011198,\\n        'name': 'Agents of Atlas',\\n        'description': '',\\n        'modified': '2016-02-03T10:25:22-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/a0/4ce18a834b7f5',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011198',\\n        'comics': {\\n          'available': 43,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011198/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/77001',\\n              'name': 'Agents of Atlas (2019) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/23659',\\n              'name': 'Agents of Atlas (2009) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/4801',\\n              'name': 'Agents of Atlas (2006) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/23660',\\n              'name': 'Agents of Atlas (2009) #1 (50/50 COVER)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5089',\\n              'name': 'Agents of Atlas (2006) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/23825',\\n              'name': 'Agents of Atlas (2009) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27402',\\n              'name': 'Agents of Atlas (2009) #2 (BACHALO 2ND PRINTING VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/23824',\\n              'name': 'Agents of Atlas (2009) #2 (MCGUINNESS VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5241',\\n              'name': 'Agents of Atlas (2006) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24015',\\n              'name': 'Agents of Atlas (2009) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24017',\\n              'name':\\n                  'Agents of Atlas (2009) #3 (Wolverine Art Appreciation Variant)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24016',\\n              'name': 'Agents of Atlas (2009) #3 (MCGUINNESS VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24219',\\n              'name': 'Agents of Atlas (2009) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5404',\\n              'name': 'Agents of Atlas (2006) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5665',\\n              'name': 'Agents of Atlas (2006) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24221',\\n              'name': 'Agents of Atlas (2009) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24222',\\n              'name': 'Agents of Atlas (2009) #5 (MCGUINNESS VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5842',\\n              'name': 'Agents of Atlas (2006) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24360',\\n              'name': 'Agents of Atlas (2009) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24361',\\n              'name': 'Agents of Atlas (2009) #7'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 13,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011198/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6807',\\n              'name': 'Agents of Atlas (2009)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27624',\\n              'name': 'Agents of Atlas (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1097',\\n              'name': 'Agents of Atlas (2006 - 2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1980',\\n              'name': 'AGENTS OF ATLAS PREMIERE HC (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24134',\\n              'name': 'Agents of Atlas: The Complete Collection Vol. 1 (2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/29600',\\n              'name': 'Atlantis Attacks (2020)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9782',\\n              'name': 'Atlas (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9181',\\n              'name': 'Avengers Vs. Atlas (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6415',\\n              'name': 'Dark Reign: New Nation (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27620',\\n              'name': 'Incoming (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27505',\\n              'name': 'War of the Realms: New Agents of Atlas (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27374',\\n              'name': 'War Of The Realms: New Agents Of Atlas (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22365',\\n              'name': 'Wolverine: Prehistory (2017)'\\n            }\\n          ],\\n          'returned': 13\\n        },\\n        'stories': {\\n          'available': 51,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011198/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6008',\\n              'name': '1 of 6 - 6 XLS-',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6009',\\n              'name': '1 of 6 - 6 XLS-',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6010',\\n              'name': '2 of 6 - 6 XLS -',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6011',\\n              'name': '2 of 6 - 6 XLS -',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6012',\\n              'name': '3 of 6 - 6 XLS -',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6013',\\n              'name': '3 of 6 - 6 XLS -',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6014',\\n              'name': '4 of 6 - 6 XLS -',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6015',\\n              'name': '4 of 6 - 6 XLS -',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6016',\\n              'name': '5 of 6 - 6 XLS -',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6017',\\n              'name': '5 of 6 - 6 XLS -',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6018',\\n              'name': '5 of 6 - Story A - 6XLS',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/6019',\\n              'name': '5 of 6 - Story A - 6XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/51050',\\n              'name': '1 of 1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/52393',\\n              'name': '1 of 3',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/52395',\\n              'name': '1 of 3',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/52861',\\n              'name': '2 of 3',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/52863',\\n              'name': '2 of 3',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/53263',\\n              'name': '3 of 3',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/53265',\\n              'name': '3 of 3',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/53266',\\n              'name': '3 of 3',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011198/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/318',\\n              'name': 'Dark Reign'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011198/agents_of_atlas?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Agents_of_Atlas?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011198/agents_of_atlas?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011175,\\n        'name': 'Aginar',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011175',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011175/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011175/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011175/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011175/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/105/aginar?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Aginar?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011175/aginar?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011136,\\n        'name': 'Air-Walker (Gabriel Lan)',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011136',\\n        'comics': {\\n          'available': 4,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011136/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/4108',\\n              'name': 'Annihilation: Silver Surfer (2006) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5589',\\n              'name': 'Heroes Reborn: Iron Man (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/16330',\\n              'name': 'Iron Man (1996) #11'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/16331',\\n              'name': 'Iron Man (1996) #12'\\n            }\\n          ],\\n          'returned': 4\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011136/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1078',\\n              'name': 'Annihilation: Silver Surfer (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1814',\\n              'name': 'Heroes Reborn: Iron Man (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13577',\\n              'name': 'Iron Man (1996 - 1998)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011136/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5925',\\n              'name': 'Annihilation: Silver Surfer (2006) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/34082',\\n              'name': 'Magical Mystery Tour',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/34085',\\n              'name': 'Matters of the Heart',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011136/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/229',\\n              'name': 'Annihilation'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011136/air-walker_gabriel_lan?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Air-Walker_(Gabriel_Lan)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011136/air-walker_gabriel_lan?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011176,\\n        'name': 'Ajak',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/2/80/4c002f35c5215',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011176',\\n        'comics': {\\n          'available': 4,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011176/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21175',\\n              'name': 'Incredible Hercules (2008) #117'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21324',\\n              'name': 'Incredible Hercules (2008) #118'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21505',\\n              'name': 'Incredible Hercules (2008) #119'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21707',\\n              'name': 'Incredible Hercules (2008) #120'\\n            }\\n          ],\\n          'returned': 4\\n        },\\n        'series': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011176/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3762',\\n              'name': 'Incredible Hercules (2008 - 2010)'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'stories': {\\n          'available': 8,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011176/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/46776',\\n              'name': 'Incredible Hercules (2008) #117',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/46777',\\n              'name': 'Interior #46777',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47097',\\n              'name': 'Incredible Hercules (2008) #118',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47098',\\n              'name': 'Interior #47098',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47415',\\n              'name': 'Incredible Hercules (2008) #119',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47416',\\n              'name': '3 of 4 - Secret Invasion',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47721',\\n              'name': 'Incredible Hercules (2008) #120',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47722',\\n              'name': '4 of 4 - Secret Invasion',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 8\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011176/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/269',\\n              'name': 'Secret Invasion'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011176/ajak?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Ajak?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011176/ajak?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010870,\\n        'name': 'Ajaxis',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/b/70/4c0035adc7d3a',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010870',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010870/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010870/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010870/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010870/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/113/ajaxis?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Ajaxis?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010870/ajaxis?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n};\\n\\nfinal _$_characters20JsonLiteral = {\\n  'code': 200,\\n  'status': 'Ok',\\n  'copyright': '© 2020 MARVEL',\\n  'attributionText': 'Data provided by Marvel. © 2020 MARVEL',\\n  'attributionHTML':\\n      '<a href=\\\"http://marvel.com\\\">Data provided by Marvel. © 2020 MARVEL</a>',\\n  'etag': '91584345a803fa36544ed9bbf0beef429cfa7dcf',\\n  'data': {\\n    'offset': 20,\\n    'limit': 20,\\n    'total': 1493,\\n    'count': 20,\\n    'results': [\\n      {\\n        'id': 1011194,\\n        'name': 'Akemi',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011194',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011194/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011194/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011194/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011194/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/114/akemi?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011194/akemi?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011170,\\n        'name': 'Alain',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011170',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011170/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011170/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011170/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011170/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/116/alain?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Alain?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011170/alain?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009240,\\n        'name': 'Albert Cleary',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009240',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009240/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009240/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009240/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009240/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/2692/albert_cleary?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009240/albert_cleary?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011120,\\n        'name': 'Albion',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011120',\\n        'comics': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011120/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/16489',\\n              'name': 'New Excalibur (2005) #23'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'series': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011120/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/935',\\n              'name': 'New Excalibur (2005 - 2007)'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'stories': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011120/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/33247',\\n              'name': 'NEW EXCALIBUR (2005) #23',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011120/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011120/albion?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Albion?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011120/albion?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010836,\\n        'name': 'Alex Power',\\n        'description': '',\\n        'modified': '2011-10-27T09:57:58-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/50/4ce5a385a2e82',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010836',\\n        'comics': {\\n          'available': 18,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010836/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/78439',\\n              'name': 'Future Foundation (2019) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/79184',\\n              'name': 'Future Foundation (2019) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/79185',\\n              'name': 'Future Foundation (2019) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/79186',\\n              'name': 'Future Foundation (2019) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17285',\\n              'name': 'Iron Man and Power Pack (2007) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17417',\\n              'name': 'Iron Man and Power Pack (2007) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17652',\\n              'name': 'Iron Man and Power Pack (2007) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/20697',\\n              'name': 'Iron Man and Power Pack (2007) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/65092',\\n              'name': 'Power Pack (2017) #63'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/31366',\\n              'name': 'Thor and the Warriors Four (2010) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/31368',\\n              'name': 'Thor and the Warriors Four (2010) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/31370',\\n              'name': 'Thor and the Warriors Four (2010) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/31372',\\n              'name': 'Thor and the Warriors Four (2010) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2565',\\n              'name': 'X-Men and Power Pack (2005) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/3093',\\n              'name': 'X-Men and Power Pack (2005) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/3207',\\n              'name': 'X-Men and Power Pack (2005) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/3416',\\n              'name': 'X-Men and Power Pack (2005) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/4060',\\n              'name': 'X-Men and Power Pack: The Power of X (Digest)'\\n            }\\n          ],\\n          'returned': 18\\n        },\\n        'series': {\\n          'available': 6,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010836/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27824',\\n              'name': 'Future Foundation (2019 - Present)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3077',\\n              'name': 'Iron Man and Power Pack (2007 - 2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23679',\\n              'name': 'Power Pack (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9731',\\n              'name': 'Thor and the Warriors Four (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/970',\\n              'name': 'X-Men and Power Pack (2005 - 2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1634',\\n              'name': 'X-Men and Power Pack: The Power of X (2006)'\\n            }\\n          ],\\n          'returned': 6\\n        },\\n        'stories': {\\n          'available': 25,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010836/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5463',\\n              'name': 'X-Men and Power Pack (2005) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5464',\\n              'name': '1 of 4 - 4XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5465',\\n              'name': 'X-Men and Power Pack (2005) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5466',\\n              'name': '2 of 4 - 4XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5467',\\n              'name': 'X-Men and Power Pack (2005) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5468',\\n              'name': '3 of 4 - 4XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5469',\\n              'name': 'X-Men and Power Pack (2005) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5470',\\n              'name': '4 of 4 - 4XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/36224',\\n              'name': 'Iron Man and Power Pack (2007) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/36225',\\n              'name': '4XLS 1 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/36519',\\n              'name': 'Iron Man and Power Pack (2007) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/36520',\\n              'name': '4XLS 2 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/36949',\\n              'name': 'Iron Man and Power Pack (2007) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/36950',\\n              'name': '4XLS 3 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/44388',\\n              'name': 'Iron Man and Power Pack (2007) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/44389',\\n              'name': '4XLS 4 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/71416',\\n              'name': 'Thor and the Warriors Four (2010) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/71420',\\n              'name': 'Thor and the Warriors Four (2010) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/71424',\\n              'name': 'Thor and the Warriors Four (2010) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/71428',\\n              'name': 'Thor and the Warriors Four (2010) #4',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010836/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010836/alex_power?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010836/alex_power?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010755,\\n        'name': 'Alex Wilder',\\n        'description':\\n            'Despite being the only one of the Runaways without any superhuman abilities or tech, Alex Wilder became the de facto leader of the group due to his natural leadership skills and intellect, as well as prodigy-level logic and strategy.',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/2/c0/4c00377144d5a',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010755',\\n        'comics': {\\n          'available': 9,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010755/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/60754',\\n              'name': 'Power Man and Iron Fist (2016) #14'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15061',\\n              'name': 'Runaways (2003) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15071',\\n              'name': 'Runaways (2003) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15072',\\n              'name': 'Runaways (2003) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15073',\\n              'name': 'Runaways (2003) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15074',\\n              'name': 'Runaways (2003) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15075',\\n              'name': 'Runaways (2003) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/70566',\\n              'name': 'Runaways (2017) #17'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1273',\\n              'name': 'Runaways Vol. 1: Pride & Joy (Digest)'\\n            }\\n          ],\\n          'returned': 9\\n        },\\n        'series': {\\n          'available': 4,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010755/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/21122',\\n              'name': 'Power Man and Iron Fist (2016 - 2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2584',\\n              'name': 'Runaways (2003 - 2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23461',\\n              'name': 'Runaways (2017 - Present)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/327',\\n              'name': 'Runaways Vol. 1: Pride & Joy (2004)'\\n            }\\n          ],\\n          'returned': 4\\n        },\\n        'stories': {\\n          'available': 9,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010755/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/30606',\\n              'name': 'Pride and Joy, Part 1 of 6',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/30622',\\n              'name': 'Cover #30622',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/30623',\\n              'name': 'Pride and Joy, Part 2 of 6',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/30625',\\n              'name': 'Pride and Joy, Part 3 of 6',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/30627',\\n              'name': 'Pride and Joy, Part 4 of 6',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/30629',\\n              'name': 'Pride and Joy, Part 5 of 6',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/30631',\\n              'name': 'Pride and Joy, Part 6 of 6',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/131977',\\n              'name': 'cover from Power Man and Iron Fist (2016) #14',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/156957',\\n              'name': 'cover from Runaways (2017) #17',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 9\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010755/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010755/alex_wilder?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Wilder%2C_Alex?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010755/alex_wilder?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011214,\\n        'name': 'Alexa Mendez',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011214',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011214/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011214/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011214/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011214/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/2892/alexa_mendez?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011214/alexa_mendez?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009497,\\n        'name': 'Alexander Pierce',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009497',\\n        'comics': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009497/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/26285',\\n              'name': 'Secret Warriors (2009) #12'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'series': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009497/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6796',\\n              'name': 'Secret Warriors (2009 - 2011)'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'stories': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009497/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/57873',\\n              'name': 'Secret Warriors (2008) #12',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009497/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009497/alexander_pierce?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009497/alexander_pierce?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1014990,\\n        'name': 'Alice',\\n        'description': '',\\n        'modified': '2010-11-18T16:01:44-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/6/70/4cd061e6d6573',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1014990',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1014990/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1014990/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1014990/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1014990/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/122/alice?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1014990/alice?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009435,\\n        'name': 'Alicia Masters',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/4c003d40ac7ae',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009435',\\n        'comics': {\\n          'available': 60,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009435/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/2055',\\n              'name': 'Essential Fantastic Four Vol. 4 (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/15546',\\n              'name': 'Fantastic Four (1998) #27'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12965',\\n              'name': 'Fantastic Four (1961) #163'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12966',\\n              'name': 'Fantastic Four (1961) #164'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12970',\\n              'name': 'Fantastic Four (1961) #168'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12971',\\n              'name': 'Fantastic Four (1961) #169'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12973',\\n              'name': 'Fantastic Four (1961) #170'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13056',\\n              'name': 'Fantastic Four (1961) #245'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13062',\\n              'name': 'Fantastic Four (1961) #250'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13063',\\n              'name': 'Fantastic Four (1961) #251'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13064',\\n              'name': 'Fantastic Four (1961) #252'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13067',\\n              'name': 'Fantastic Four (1961) #255'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13068',\\n              'name': 'Fantastic Four (1961) #256'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13141',\\n              'name': 'Fantastic Four (1961) #321'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13142',\\n              'name': 'Fantastic Four (1961) #322'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13146',\\n              'name': 'Fantastic Four (1961) #326'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13147',\\n              'name': 'Fantastic Four (1961) #327'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13148',\\n              'name': 'Fantastic Four (1961) #328'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13149',\\n              'name': 'Fantastic Four (1961) #329'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13153',\\n              'name': 'Fantastic Four (1961) #332'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 20,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009435/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1263',\\n              'name': 'Essential Fantastic Four Vol. 4 (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/421',\\n              'name': 'Fantastic Four (1998 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2121',\\n              'name': 'Fantastic Four (1961 - 1998)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3292',\\n              'name': 'Fantastic Four 1 2 3 4 (2001)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2012',\\n              'name': 'Fantastic Four Annual (1963 - 1994)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3090',\\n              'name': 'Fantastic Four Omnibus Vol. 1 (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1458',\\n              'name':\\n                  'FANTASTIC FOUR VISIONARIES: GEORGE PEREZ VOL. 1 TPB (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/341',\\n              'name': 'FANTASTIC FOUR VISIONARIES: JOHN BYRNE VOL. 2 TPB (2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1424',\\n              'name': 'Fantastic Four Visionaries: John Byrne Vol. 3 (2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2254',\\n              'name':\\n                  'FANTASTIC FOUR VISIONARIES: WALTER SIMONSON VOL. 1 TPB (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1266',\\n              'name': 'Fantastic Four Vol. 2 (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/25306',\\n              'name': 'Fantastic Four Vol. 2: Mr. And Mrs. Grimm (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2579',\\n              'name': 'Fantastic Four: 1234 (2001 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/14102',\\n              'name': 'Fear Itself: FF (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20424',\\n              'name': 'Galactus the Devourer (1999 - 2000)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1346',\\n              'name': 'Marvel Masterworks: The Fantastic Four Vol. 7 (2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3715',\\n              'name': 'Marvel Two-in-One (1974 - 1983)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3667',\\n              'name': 'Thing (1983 - 1986)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2085',\\n              'name': 'Universe X (2000 - 2001)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3657',\\n              'name': 'Universe X Special: 4 (2001)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 84,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009435/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/802',\\n              'name': 'Fantastic Four (1998) #509',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/803',\\n              'name': 'Interior #803',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/912',\\n              'name': 'Fantastic Four (1998) #512',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/913',\\n              'name': 'Interior #913',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12548',\\n              'name': 'Fantastic Four (1961) #163',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12549',\\n              'name': 'Finale!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12550',\\n              'name': 'Fantastic Four (1961) #164',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12551',\\n              'name': 'The Crusader Syndrome!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12558',\\n              'name': 'Fantastic Four (1961) #168',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12559',\\n              'name': 'Where Have All the Powers Gone?',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12560',\\n              'name': 'Fantastic Four (1961) #169',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12561',\\n              'name': 'Five Characters in Search of a Madman!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12564',\\n              'name': 'Fantastic Four (1961) #170',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12565',\\n              'name': 'A Sky Full of Fear!',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12753',\\n              'name': 'Fantastic Four (1961) #245',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12754',\\n              'name': \\\"Childhood's End\\\",\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12765',\\n              'name': 'Fantastic Four (1961) #250',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12766',\\n              'name': 'X-Factor',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12768',\\n              'name': 'Fantastic Four (1961) #251',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/12769',\\n              'name': 'Into the Negative Zone',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 2,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009435/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/116',\\n              'name': 'Acts of Vengeance!'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/252',\\n              'name': 'Inferno'\\n            }\\n          ],\\n          'returned': 2\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009435/alicia_masters?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Masters%2C_Alicia?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009435/alicia_masters?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010370,\\n        'name': 'Alpha Flight',\\n        'description': '',\\n        'modified': '2013-10-24T13:09:22-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/1/60/52695277ee088',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010370',\\n        'comics': {\\n          'available': 207,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010370/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/39654',\\n              'name': 'Alpha Flight (2011) #0.1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/393',\\n              'name': 'Alpha Flight (2004) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12637',\\n              'name': 'Alpha Flight (1983) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/39819',\\n              'name': 'Alpha Flight (2011) #1 (Eaglesham Variant)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38569',\\n              'name': 'Alpha Flight (2011) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12679',\\n              'name': 'Alpha Flight (1983) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/456',\\n              'name': 'Alpha Flight (2004) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/39818',\\n              'name': 'Alpha Flight (2011) #2 (Eaglesham Variant)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12690',\\n              'name': 'Alpha Flight (1983) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/616',\\n              'name': 'Alpha Flight (2004) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/39820',\\n              'name': 'Alpha Flight (2011) #3 (Eaglesham Variant)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38567',\\n              'name': 'Alpha Flight (2011) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/677',\\n              'name': 'Alpha Flight (2004) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12701',\\n              'name': 'Alpha Flight (1983) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12712',\\n              'name': 'Alpha Flight (1983) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38568',\\n              'name': 'Alpha Flight (2011) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/613',\\n              'name': 'Alpha Flight (2004) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/572',\\n              'name': 'Alpha Flight (2004) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12723',\\n              'name': 'Alpha Flight (1983) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38566',\\n              'name': 'Alpha Flight (2011) #6'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 39,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010370/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/719',\\n              'name': 'Alpha Flight (2004 - 2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13907',\\n              'name': 'Alpha Flight (2011 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2116',\\n              'name': 'Alpha Flight (1983 - 1994)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27041',\\n              'name': 'Alpha Flight Facsimile Edition (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27625',\\n              'name': 'Alpha Flight: True North (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/28069',\\n              'name': 'Annihilation: Scourge (2020)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/744',\\n              'name': 'Astonishing X-Men (2004 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1991',\\n              'name': 'Avengers (1963 - 1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1995',\\n              'name': 'Cable (1993 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20718',\\n              'name': 'Captain Marvel (2016 - 2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22552',\\n              'name': 'Champions (2016 - 2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/11854',\\n              'name': 'Chaos War (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13468',\\n              'name': 'Chaos War One-Shots (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13260',\\n              'name': 'Chaos War: Alpha Flight (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/21692',\\n              'name': 'Civil War II: Choosing Sides (2016)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/14399',\\n              'name':\\n                  'Essential X-Men Vol. 2 (All-New Edition) (2011 - Present)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2123',\\n              'name': 'Fantastic Four (1996 - 1997)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2121',\\n              'name': 'Fantastic Four (1961 - 1998)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20465',\\n              'name': 'Guardians of the Galaxy (2015 - 2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1812',\\n              'name': 'Heroes Reborn: Fantastic Four (2006)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 377,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010370/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2921',\\n              'name': 'Alpha Flight (2004) #9',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2922',\\n              'name': '1 of 4 - Days of Future Present Past Participle',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2923',\\n              'name': 'Alpha Flight (2004) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2924',\\n              'name': 'Interior #2924',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2925',\\n              'name': 'Alpha Flight (2004) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2926',\\n              'name': 'Interior #2926',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2927',\\n              'name': 'Alpha Flight (2004) #6',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2928',\\n              'name': 'Interior #2928',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2929',\\n              'name': 'Alpha Flight (2004) #5',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2930',\\n              'name': 'Interior #2930',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2931',\\n              'name': 'Alpha Flight (2004) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2932',\\n              'name': 'Interior #2932',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2933',\\n              'name': 'Alpha Flight (2004) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2934',\\n              'name': 'Interior #2934',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2935',\\n              'name': 'Alpha Flight (2004) #7',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2936',\\n              'name':\\n                  '\\\"WAXING POETIC\\\" PART 1 (OF 2) Is the All-New, All-Different Alpha Flight really disbanding after only seven issues? Not if the r',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2937',\\n              'name': 'Alpha Flight (2004) #8',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2938',\\n              'name':\\n                  '\\\"WAXING POETIC\\\" PART 2 (OF 2) Montreal faces its gravest hour as it falls under attack by…wax statues of the entire Marvel Unive',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2939',\\n              'name': 'Alpha Flight (2004) #10',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/2940',\\n              'name': '2 of 4 - Days of Future Present Past Participle',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 7,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010370/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/116',\\n              'name': 'Acts of Vengeance!'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/296',\\n              'name': 'Chaos War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/302',\\n              'name': 'Fear Itself'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/29',\\n              'name': 'Infinity War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/337',\\n              'name': 'Monsters Unleashed'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/333',\\n              'name': 'Monsters Unleashed'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/271',\\n              'name': 'Secret Wars II'\\n            }\\n          ],\\n          'returned': 7\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010370/alpha_flight?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Alpha_Flight?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010370/alpha_flight?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011324,\\n        'name': 'Alpha Flight (Ultimate)',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011324',\\n        'comics': {\\n          'available': 2,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011324/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21177',\\n              'name': 'Ultimate X-Men (2000) #94'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21326',\\n              'name': 'Ultimate X-Men (2000) #95'\\n            }\\n          ],\\n          'returned': 2\\n        },\\n        'series': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011324/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/474',\\n              'name': 'Ultimate X-Men (2000 - 2009)'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'stories': {\\n          'available': 4,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011324/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/46780',\\n              'name': 'Ultimate X-Men (2001) #94',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/46781',\\n              'name': '1 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47101',\\n              'name': 'Ultimate X-Men (2001) #95',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47102',\\n              'name': '2 of 4',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 4\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011324/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011324/alpha_flight_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Alpha%20Flight%20(Ultimate)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011324/alpha_flight_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011164,\\n        'name': 'Alvin Maker',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011164',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011164/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011164/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011164/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011164/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/2880/alvin_maker?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011164/alvin_maker?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011227,\\n        'name': 'Amadeus Cho',\\n        'description': '',\\n        'modified': '2013-08-07T13:50:56-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/3/80/520288b9cb581',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011227',\\n        'comics': {\\n          'available': 146,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011227/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/77001',\\n              'name': 'Agents of Atlas (2019) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/77002',\\n              'name': 'Agents of Atlas (2019) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/77004',\\n              'name': 'Agents of Atlas (2019) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/77005',\\n              'name': 'Agents of Atlas (2019) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/83994',\\n              'name': 'Atlantis Attacks (2020) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/65264',\\n              'name': 'Avengers (2016) #674'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61442',\\n              'name': 'Champions (2016) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/73805',\\n              'name': 'Champions (2019) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61443',\\n              'name': 'Champions (2016) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61444',\\n              'name': 'Champions (2016) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/73806',\\n              'name': 'Champions (2019) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/73807',\\n              'name': 'Champions (2019) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61445',\\n              'name': 'Champions (2016) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61446',\\n              'name': 'Champions (2016) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61447',\\n              'name': 'Champions (2016) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61448',\\n              'name': 'Champions (2016) #7'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61449',\\n              'name': 'Champions (2016) #8'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/73812',\\n              'name': 'Champions (2019) #9'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/61450',\\n              'name': 'Champions (2016) #9'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/73813',\\n              'name': 'Champions (2019) #10'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 33,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011227/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/27624',\\n              'name': 'Agents of Atlas (2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/29600',\\n              'name': 'Atlantis Attacks (2020)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22547',\\n              'name': 'Avengers (2016 - 2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/26592',\\n              'name': 'Champions (2019 - Present)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22552',\\n              'name': 'Champions (2016 - 2019)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22755',\\n              'name': 'Champions Vol. 1: Change the World (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/22756',\\n              'name': 'Champions Vol. 2: The Freelancer Lifestyle (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24137',\\n              'name': 'Domino (2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13881',\\n              'name': 'Fear Itself: The Home Front (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23684',\\n              'name': 'Generations (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23281',\\n              'name':\\n                  'Generations: Banner Hulk & The Totally Awesome Hulk (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20866',\\n              'name': 'Ghost Rider (2016 - 2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20867',\\n              'name': 'Ghost Rider: Four on the Floor (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9350',\\n              'name': 'Hercules: Fall of an Avenger (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23453',\\n              'name': 'Hulk: Planet Hulk Omnibus (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24832',\\n              'name': 'Hulk: Return to Planet Hulk (2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3762',\\n              'name': 'Incredible Hercules (2008 - 2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23635',\\n              'name': 'Incredible Hulk (2017 - 2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8842',\\n              'name': 'Incredible Hulks (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23456',\\n              'name': 'Marvel Legacy (2017)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 172,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011227/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/44255',\\n              'name': 'Incredible Hercules (2008) #114',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/44256',\\n              'name': 'Herc 3 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/44605',\\n              'name': 'Incredible Hercules (2008) #115',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/44606',\\n              'name': 'Herc 4 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/44607',\\n              'name': 'Herc 4 of 4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/45230',\\n              'name': 'Incredible Hercules (2008) #116',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/45231',\\n              'name': 'Interior #45231',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/46776',\\n              'name': 'Incredible Hercules (2008) #117',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/46777',\\n              'name': 'Interior #46777',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47097',\\n              'name': 'Incredible Hercules (2008) #118',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47098',\\n              'name': 'Interior #47098',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47415',\\n              'name': 'Incredible Hercules (2008) #119',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47416',\\n              'name': '3 of 4 - Secret Invasion',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47721',\\n              'name': 'Incredible Hercules (2008) #120',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/47722',\\n              'name': '4 of 4 - Secret Invasion',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/48208',\\n              'name': 'Incredible Hercules (2008) #121',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/48209',\\n              'name': '1 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49032',\\n              'name': 'Incredible Hercules (2008) #122',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49033',\\n              'name': '2 of 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/49816',\\n              'name': 'Incredible Hercules (2008) #123',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 5,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011227/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/318',\\n              'name': 'Dark Reign'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/302',\\n              'name': 'Fear Itself'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/336',\\n              'name': 'Secret Empire'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/269',\\n              'name': 'Secret Invasion'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/273',\\n              'name': 'Siege'\\n            }\\n          ],\\n          'returned': 5\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011227/amadeus_cho?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Amadeus_Cho?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011227/amadeus_cho?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009567,\\n        'name': 'Amanda Sefton',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009567',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009567/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009567/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009567/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009567/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/2755/amanda_sefton?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009567/amanda_sefton?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011382,\\n        'name': 'Amazoness',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011382',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011382/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011382/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011382/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011382/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/130/amazoness?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011382/amazoness?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1011361,\\n        'name': 'American Eagle (Jason Strongbow)',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/f/80/4ce5a6d8b8f2a',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1011361',\\n        'comics': {\\n          'available': 5,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011361/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10105',\\n              'name': 'Marvel Comics Presents (1988) #27'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10042',\\n              'name': 'Marvel Comics Presents (1988) #128'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10045',\\n              'name': 'Marvel Comics Presents (1988) #130'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10063',\\n              'name': 'Marvel Comics Presents (1988) #147'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/10064',\\n              'name': 'Marvel Comics Presents (1988) #148'\\n            }\\n          ],\\n          'returned': 5\\n        },\\n        'series': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011361/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2039',\\n              'name': 'Marvel Comics Presents (1988 - 1995)'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'stories': {\\n          'available': 5,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011361/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/22862',\\n              'name': 'The Hunter and the Hunted',\\n              'type': ''\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/22880',\\n              'name': 'Screams',\\n              'type': ''\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/22990',\\n              'name': 'Saints and Sinner',\\n              'type': ''\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/22996',\\n              'name': '500 Guns',\\n              'type': ''\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/23237',\\n              'name': 'Just Another Shade of Hate',\\n              'type': ''\\n            }\\n          ],\\n          'returned': 5\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1011361/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1011361/american_eagle_jason_strongbow?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/American_Eagle_(Jason_Strongbow)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1011361/american_eagle_jason_strongbow?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1009151,\\n        'name': 'Amiko',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009151',\\n        'comics': {\\n          'available': 12,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009151/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/62744',\\n              'name': 'Elektra (1996) #15'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/13722',\\n              'name': 'Uncanny X-Men (1963) #181'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14206',\\n              'name': 'Wolverine (1988) #82'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14045',\\n              'name': 'Wolverine (1988) #107'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14046',\\n              'name': 'Wolverine (1988) #108'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14047',\\n              'name': 'Wolverine (1988) #109'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14093',\\n              'name': 'Wolverine (1988) #150'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14094',\\n              'name': 'Wolverine (1988) #151'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14095',\\n              'name': 'Wolverine (1988) #152'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14096',\\n              'name': 'Wolverine (1988) #153'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14118',\\n              'name': 'Wolverine (1988) #173'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/14119',\\n              'name': 'Wolverine (1988) #174'\\n            }\\n          ],\\n          'returned': 12\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009151/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23024',\\n              'name': 'Elektra (1996 - 1998)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2258',\\n              'name': 'Uncanny X-Men (1963 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2262',\\n              'name': 'Wolverine (1988 - 2003)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 12,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009151/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/27872',\\n              'name': 'Tokyo Story',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28580',\\n              'name': 'Once Upon a Time in Little Tokyo',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28582',\\n              'name': 'East is East',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28584',\\n              'name': '[Untitled]',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28677',\\n              'name': 'Blood Debt Part 1',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28680',\\n              'name': 'Blood Debt Part 2',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28682',\\n              'name': 'Blood Debt Part 3',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28684',\\n              'name': 'Blood Debt Part 4',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28729',\\n              'name': 'The Logan Files Part 1',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28732',\\n              'name': 'The Logan Files Part 2',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/28931',\\n              'name': 'Omnia Mutantur',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/156489',\\n              'name': 'cover to Elektra (1996) #15',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 12\\n        },\\n        'events': {\\n          'available': 1,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009151/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/270',\\n              'name': 'Secret Wars'\\n            }\\n          ],\\n          'returned': 1\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009151/amiko?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Amiko?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009151/amiko?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010672,\\n        'name': 'Amora',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010672',\\n        'comics': {\\n          'available': 8,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010672/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/17763',\\n              'name': 'Avengers (1996) #9'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/48369',\\n              'name': 'Journey Into Mystery (1996) #503'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/48370',\\n              'name': 'Journey Into Mystery (1996) #504'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/48373',\\n              'name': 'Journey Into Mystery (1996) #507'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/48374',\\n              'name': 'Journey Into Mystery (1996) #508'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/48375',\\n              'name': 'Journey Into Mystery (1996) #510'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18681',\\n              'name': 'Thor (1998) #55'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18684',\\n              'name': 'Thor (1998) #58'\\n            }\\n          ],\\n          'returned': 8\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010672/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3621',\\n              'name': 'Avengers (1996 - 1997)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13569',\\n              'name': 'Journey Into Mystery (1996 - 1998)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/581',\\n              'name': 'Thor (1998 - 2004)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 8,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010672/stories',\\n          'items': [\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/37703',\\n              'name': 'Avengers (1996) #9',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/67955',\\n              'name': 'Thor (1998) #55',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/67958',\\n              'name': 'Thor (1998) #58',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/113168',\\n              'name': 'Cover from Journey Into Mystery (1996) #510',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/113169',\\n              'name': 'Cover from Journey Into Mystery (1996) #508',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/113170',\\n              'name': 'Cover from Journey Into Mystery (1996) #507',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/113173',\\n              'name': 'Cover from Journey Into Mystery (1996) #504',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/113174',\\n              'name': 'Cover from Journey Into Mystery (1996) #503',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 8\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010672/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010672/amora?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010672/amora?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010673,\\n        'name': 'Amphibian (Earth-712)',\\n        'description': '',\\n        'modified': '1969-12-31T19:00:00-0500',\\n        'thumbnail': {\\n          'path':\\n              'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010673',\\n        'comics': {\\n          'available': 4,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010673/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/3908',\\n              'name': 'Squadron Supreme (2006) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/4038',\\n              'name': 'Squadron Supreme (2006) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/5425',\\n              'name':\\n                  'Squadron Supreme Vol. 1: The Pre-War Years Premiere (Hardcover)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18820',\\n              'name': 'SQUADRON SUPREME: NEW WORLD ORDER 1 (1999) #1'\\n            }\\n          ],\\n          'returned': 4\\n        },\\n        'series': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010673/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/944',\\n              'name': 'Squadron Supreme (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1791',\\n              'name':\\n                  'Squadron Supreme Vol. 1: The Pre-War Years Premiere (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3685',\\n              'name': 'SQUADRON SUPREME: NEW WORLD ORDER 1 (1999)'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'stories': {\\n          'available': 3,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010673/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5249',\\n              'name': '1 of 6 - The Pre-War Years',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5251',\\n              'name': '2 of 6 - The Pre-War Years',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI':\\n                  'http://gateway.marvel.com/v1/public/stories/40338',\\n              'name': 'Cover #40338',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 3\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010673/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/137/amphibian?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Amphibian_(Earth-712)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010673/amphibian_earth-712?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n};\\n\\nfinal _$_charactersIronManJsonLiteral = {\\n  'code': 200,\\n  'status': 'Ok',\\n  'copyright': '© 2020 MARVEL',\\n  'attributionText': 'Data provided by Marvel. © 2020 MARVEL',\\n  'attributionHTML':\\n      '<a href=\\\"http://marvel.com\\\">Data provided by Marvel. © 2020 MARVEL</a>',\\n  'etag': '0a1b4019f34ab16d5056f7f208325c7fc8c99b0b',\\n  'data': {\\n    'offset': 0,\\n    'limit': 20,\\n    'total': 7,\\n    'count': 7,\\n    'results': [\\n      {\\n        'id': 1009368,\\n        'name': 'Iron Man',\\n        'description':\\n            'Wounded, captured and forced to build a weapon by his enemies, billionaire industrialist Tony Stark instead created an advanced suit of armor to save his life and escape captivity. Now with a new outlook on life, Tony uses his money and intelligence to make the world a safer, better place as Iron Man.',\\n        'modified': '2016-09-28T12:08:19-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/c0/527bb7b37ff55',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009368',\\n        'comics': {\\n          'available': 2554,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/43495',\\n              'name': 'A+X (2012) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/43506',\\n              'name': 'A+X (2012) #7'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24348',\\n              'name': 'Adam: Legend of the Blue Marvel (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/22461',\\n              'name': 'Adam: Legend of the Blue Marvel (2008) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/22856',\\n              'name': 'Adam: Legend of the Blue Marvel (2008) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/23733',\\n              'name': 'Adam: Legend of the Blue Marvel (2008) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30090',\\n              'name': 'Age of Heroes (2010) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/33566',\\n              'name': 'Age of Heroes (2010) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30092',\\n              'name': 'Age of Heroes (2010) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30093',\\n              'name': 'Age of Heroes (2010) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/67603',\\n              'name': 'Age of Innocence: The Rebirth of Iron Man (1996) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38524',\\n              'name': 'Age of X: Universe (2011) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38523',\\n              'name': 'Age of X: Universe (2011) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21280',\\n              'name': 'All-New Iron Manual (2008) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55363',\\n              'name': 'All-New, All-Different Avengers (2015) #10'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55364',\\n              'name': 'All-New, All-Different Avengers (2015) #11'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12653',\\n              'name': 'Alpha Flight (1983) #113'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12668',\\n              'name': 'Alpha Flight (1983) #127'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55311',\\n              'name': 'The Amazing Spider-Man (2015) #13'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55312',\\n              'name': 'The Amazing Spider-Man (2015) #14'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 623,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16450',\\n              'name': 'A+X (2012 - 2014)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/7524',\\n              'name': 'Adam: Legend of the Blue Marvel (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6079',\\n              'name': 'Adam: Legend of the Blue Marvel (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9790',\\n              'name': 'Age of Heroes (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24380',\\n              'name': 'Age of Innocence: The Rebirth of Iron Man (1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13896',\\n              'name': 'Age of X: Universe (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/4897',\\n              'name': 'All-New Iron Manual (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20443',\\n              'name': 'All-New, All-Different Avengers (2015 - 2016)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2116',\\n              'name': 'Alpha Flight (1983 - 1994)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/454',\\n              'name': 'Amazing Spider-Man (1999 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2984',\\n              'name': 'Amazing Spider-Man Annual (1964 - 2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/15540',\\n              'name': 'Amazing Spider-Man Annual (2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1489',\\n              'name': 'AMAZING SPIDER-MAN VOL. 10: NEW AVENGERS TPB (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/318',\\n              'name': 'Amazing Spider-Man Vol. 6 (2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23446',\\n              'name': 'Amazing Spider-Man: Worldwide Vol. 2 (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6056',\\n              'name': 'ANNIHILATION CLASSIC HC (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/14818',\\n              'name': 'Annihilators: Earthfall (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/14779',\\n              'name': 'Art of Marvel Studios TPB Slipcase (2011 - Present)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9792',\\n              'name': 'Astonishing Spider-Man/Wolverine (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6792',\\n              'name': 'Astonishing Tales (2009)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 3875,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/670',\\n              'name': 'X-MEN (2004) #186',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/892',\\n              'name': 'THOR (1998) #81',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/960',\\n              'name': '3 of ?',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/982',\\n              'name': 'Interior #982',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/984',\\n              'name': 'Interior #984',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/986',\\n              'name': 'Interior #986',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/988',\\n              'name': 'Interior #988',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/990',\\n              'name': 'Interior #990',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/992',\\n              'name': 'Interior #992',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/994',\\n              'name': 'Interior #994',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/996',\\n              'name': 'Interior #996',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/998',\\n              'name': 'Interior #998',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1000',\\n              'name': 'Interior #1000',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1002',\\n              'name':\\n                  'AVENGERS DISASSEMBLED TIE-IN! Still reeling from recent traumas, Iron Man must face off against his evil doppelganger. Meanwhile',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1004',\\n              'name':\\n                  '\\\"THE SINGULARITY\\\" CONCLUSION! PART 4 (OF 4) The battle rages on between Iron Man and his doppelganger, but only one of them can ',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1018',\\n              'name': 'Amazing Spider-Man (1999) #500',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1024',\\n              'name': 'Avengers (1998) #80',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1026',\\n              'name': 'Avengers (1998) #81',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1041',\\n              'name': 'Avengers (1998) #502',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1051',\\n              'name': 'Interior #1051',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 31,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/116',\\n              'name': 'Acts of Vengeance!'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/303',\\n              'name': 'Age of X'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/231',\\n              'name': 'Armor Wars'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/233',\\n              'name': 'Atlantis Attacks'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/234',\\n              'name': 'Avengers Disassembled'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/310',\\n              'name': 'Avengers VS X-Men'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/296',\\n              'name': 'Chaos War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/238',\\n              'name': 'Civil War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/239',\\n              'name': 'Crossing'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/318',\\n              'name': 'Dark Reign'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/245',\\n              'name': 'Enemy of the State'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/249',\\n              'name': 'Fatal Attractions'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/302',\\n              'name': 'Fear Itself'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/251',\\n              'name': 'House of M'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/315',\\n              'name': 'Infinity'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/29',\\n              'name': 'Infinity War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/317',\\n              'name': 'Inhumanity'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/255',\\n              'name': 'Initiative'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/37',\\n              'name': 'Maximum Security'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/154',\\n              'name': 'Onslaught'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009368/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Iron_Man_(Anthony_Stark)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009368/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017320,\\n        'name': 'Iron Man (Iron Man 3 - The Official Game)',\\n        'description': '',\\n        'modified': '2013-09-18T11:05:44-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/03/5239c1408c936',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017320',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017320/iron_man_iron_man_3_-_the_official_game?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017294,\\n        'name': 'Iron Man (LEGO Marvel Super Heroes)',\\n        'description': '',\\n        'modified': '2013-09-18T17:03:08-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/6/90/5239c3cc8a259',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017294',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017294/iron_man_lego_marvel_super_heroes?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017310,\\n        'name': 'Iron Man (Marvel Heroes)',\\n        'description': '',\\n        'modified': '2013-09-18T10:53:29-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/40/5239be60a67da',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017310',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017310/iron_man_marvel_heroes?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017326,\\n        'name': 'Iron Man (Marvel War of Heroes)',\\n        'description': '',\\n        'modified': '2013-09-18T10:59:29-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/f/f0/5239bfbfeea88',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017326',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017326/iron_man_marvel_war_of_heroes?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010935,\\n        'name': 'Iron Man (Ultimate)',\\n        'description': '',\\n        'modified': '2014-03-05T13:37:05-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/1/90/53176e7785d95',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010935',\\n        'comics': {\\n          'available': 76,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18479',\\n              'name': 'Ultimate Adventures (2002) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18480',\\n              'name': 'Ultimate Adventures (2002) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18482',\\n              'name': 'Ultimate Adventures (2002) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18483',\\n              'name': 'Ultimate Adventures (2002) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/160',\\n              'name': 'Ultimate Adventures (2002) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1934',\\n              'name':\\n                  'Ultimate Adventures Vol. 1: One Tin Soldier (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1204',\\n              'name': 'Ultimate Adventures Vol. I (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27663',\\n              'name': 'Ultimate Armor Wars (2009) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/36129',\\n              'name': 'Ultimate Avengers Vs. New Ultimates (2011) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27660',\\n              'name': 'Ultimate Armor Wars (2009) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27661',\\n              'name': 'Ultimate Armor Wars (2009) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27662',\\n              'name': 'Ultimate Armor Wars (2009) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38503',\\n              'name':\\n                  'Ultimate Avengers Vs. New Ultimates (2011) #2 (HITCH VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/45715',\\n              'name': 'Ultimate Comics Iron Man (2012) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/45421',\\n              'name': 'Ultimate Comics Iron Man (2012) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/46544',\\n              'name': 'Ultimate Comics Iron Man (2012) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30600',\\n              'name': 'Ultimate Comics New Ultimates (2010) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30602',\\n              'name': 'Ultimate Comics New Ultimates (2010) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/37461',\\n              'name': 'Ultimate Comics Spider-Man (2009) #150'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/37520',\\n              'name':\\n                  'Ultimate Comics Spider-Man (2009) #150 (WRAPAROUND VARIANT)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 28,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/469',\\n              'name': 'Ultimate Adventures (2002 - 2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1173',\\n              'name': 'Ultimate Adventures Vol. 1: One Tin Soldier (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/261',\\n              'name': 'Ultimate Adventures Vol. I (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8845',\\n              'name': 'Ultimate Armor Wars (2009)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/12615',\\n              'name': 'Ultimate Avengers Vs. New Ultimates (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16739',\\n              'name': 'Ultimate Comics Iron Man (2012 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9026',\\n              'name': 'Ultimate Comics New Ultimates (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8509',\\n              'name': 'Ultimate Comics Spider-Man (2009 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/11272',\\n              'name': 'Ultimate Comics Thor (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13936',\\n              'name': 'Ultimate Comics Ultimates (2011 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13108',\\n              'name': 'Ultimate Comics X-Men (2010 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/759',\\n              'name': 'Ultimate Extinction (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/702',\\n              'name': 'Ultimate Fantastic Four (2003 - 2009)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2223',\\n              'name': 'Ultimate Galactus Trilogy (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3421',\\n              'name': 'Ultimate Human (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/761',\\n              'name': 'Ultimate Iron Man (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3179',\\n              'name': 'Ultimate Iron Man II (2007 - 2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1275',\\n              'name': 'Ultimate Iron Man Vol. 1 (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2311',\\n              'name': 'Ultimate Marvel Team-Up (2001 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1823',\\n              'name': 'Ultimate Marvel Team-Up Ultimate Collection (2006)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 92,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1298',\\n              'name': 'Ultimate Adventures (2002) #6',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1334',\\n              'name': 'Ultimate Spider-Man (2000) #70',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1460',\\n              'name': 'Ultimate X-Men (2001) #64',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1461',\\n              'name': '4 of 5 - Magnetic North',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3548',\\n              'name': 'Ultimate Extinction (2006) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3549',\\n              'name': '2 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3550',\\n              'name': 'Ultimate Extinction (2006) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3551',\\n              'name': '3 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3552',\\n              'name': 'Ultimate Extinction (2006) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3553',\\n              'name': '4 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3554',\\n              'name': 'Ultimate Extinction (2006) #5',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3555',\\n              'name': '5 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3566',\\n              'name': 'ULTIMATE IRON MAN (2005) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3570',\\n              'name': 'ULTIMATE IRON MAN (2005) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3572',\\n              'name': 'ULTIMATE IRON MAN (2005) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3574',\\n              'name': 'ULTIMATE IRON MAN (2005) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3576',\\n              'name': 'ULTIMATE IRON MAN (2005) #5',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4312',\\n              'name': '4 of 4 - 4XLS',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5364',\\n              'name': 'Cover #5364',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5708',\\n              'name': 'ULTIMATE WOLVERINE VS. HULK (2005) #2',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010935/iron_man_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Iron_Man_%28Ultimate%29?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010935/iron_man_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017104,\\n        'name': 'Iron Man/Tony Stark (MAA)',\\n        'description':\\n            \\\"Tony Stark is the genius inventor/billionaire/philanthropist owner of Stark Industries. With his super high-tech Iron Man suit, he is practically indestructible, able to fly, and has a large selection of weapons to choose from - but it's Tony's quick thinking and ability to adapt and improvise that make him an effective leader of the Avengers.        \\\",\\n        'modified': '2013-09-18T15:49:18-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/2/d0/5232190d42df2',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017104',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017104/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017104/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017104/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017104/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017104/iron_mantony_stark_maa?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n};\\n\\nfinal _$_charactersIronMan2JsonLiteral = {\\n  'code': 200,\\n  'status': 'Ok',\\n  'copyright': '© 2020 MARVEL',\\n  'attributionText': 'Data provided by Marvel. © 2020 MARVEL',\\n  'attributionHTML':\\n      '<a href=\\\"http://marvel.com\\\">Data provided by Marvel. © 2020 MARVEL</a>',\\n  'etag': '45d270d72b59f76de9a1d5ff668748c3431617db',\\n  'data': {\\n    'offset': 0,\\n    'limit': 20,\\n    'total': 5,\\n    'count': 5,\\n    'results': [\\n      {\\n        'id': 1017320,\\n        'name': 'Iron Man (Iron Man 3 - The Official Game)',\\n        'description': '',\\n        'modified': '2013-09-18T11:05:44-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/03/5239c1408c936',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017320',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017320/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017320/iron_man_iron_man_3_-_the_official_game?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017294,\\n        'name': 'Iron Man (LEGO Marvel Super Heroes)',\\n        'description': '',\\n        'modified': '2013-09-18T17:03:08-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/6/90/5239c3cc8a259',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017294',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017294/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017294/iron_man_lego_marvel_super_heroes?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017310,\\n        'name': 'Iron Man (Marvel Heroes)',\\n        'description': '',\\n        'modified': '2013-09-18T10:53:29-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/40/5239be60a67da',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017310',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017310/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017310/iron_man_marvel_heroes?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1017326,\\n        'name': 'Iron Man (Marvel War of Heroes)',\\n        'description': '',\\n        'modified': '2013-09-18T10:59:29-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/f/f0/5239bfbfeea88',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1017326',\\n        'comics': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/comics',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'series': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/series',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'stories': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/stories',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1017326/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/characters/29/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1017326/iron_man_marvel_war_of_heroes?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      },\\n      {\\n        'id': 1010935,\\n        'name': 'Iron Man (Ultimate)',\\n        'description': '',\\n        'modified': '2014-03-05T13:37:05-0500',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/1/90/53176e7785d95',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1010935',\\n        'comics': {\\n          'available': 76,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18479',\\n              'name': 'Ultimate Adventures (2002) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18480',\\n              'name': 'Ultimate Adventures (2002) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18482',\\n              'name': 'Ultimate Adventures (2002) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/18483',\\n              'name': 'Ultimate Adventures (2002) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/160',\\n              'name': 'Ultimate Adventures (2002) #6'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1934',\\n              'name':\\n                  'Ultimate Adventures Vol. 1: One Tin Soldier (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/1204',\\n              'name': 'Ultimate Adventures Vol. I (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27663',\\n              'name': 'Ultimate Armor Wars (2009) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/36129',\\n              'name': 'Ultimate Avengers Vs. New Ultimates (2011) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27660',\\n              'name': 'Ultimate Armor Wars (2009) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27661',\\n              'name': 'Ultimate Armor Wars (2009) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/27662',\\n              'name': 'Ultimate Armor Wars (2009) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38503',\\n              'name':\\n                  'Ultimate Avengers Vs. New Ultimates (2011) #2 (HITCH VARIANT)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/45715',\\n              'name': 'Ultimate Comics Iron Man (2012) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/45421',\\n              'name': 'Ultimate Comics Iron Man (2012) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/46544',\\n              'name': 'Ultimate Comics Iron Man (2012) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30600',\\n              'name': 'Ultimate Comics New Ultimates (2010) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30602',\\n              'name': 'Ultimate Comics New Ultimates (2010) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/37461',\\n              'name': 'Ultimate Comics Spider-Man (2009) #150'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/37520',\\n              'name':\\n                  'Ultimate Comics Spider-Man (2009) #150 (WRAPAROUND VARIANT)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 28,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/469',\\n              'name': 'Ultimate Adventures (2002 - 2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1173',\\n              'name': 'Ultimate Adventures Vol. 1: One Tin Soldier (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/261',\\n              'name': 'Ultimate Adventures Vol. I (2003)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8845',\\n              'name': 'Ultimate Armor Wars (2009)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/12615',\\n              'name': 'Ultimate Avengers Vs. New Ultimates (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16739',\\n              'name': 'Ultimate Comics Iron Man (2012 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9026',\\n              'name': 'Ultimate Comics New Ultimates (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/8509',\\n              'name': 'Ultimate Comics Spider-Man (2009 - 2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/11272',\\n              'name': 'Ultimate Comics Thor (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13936',\\n              'name': 'Ultimate Comics Ultimates (2011 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13108',\\n              'name': 'Ultimate Comics X-Men (2010 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/759',\\n              'name': 'Ultimate Extinction (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/702',\\n              'name': 'Ultimate Fantastic Four (2003 - 2009)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2223',\\n              'name': 'Ultimate Galactus Trilogy (2007)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3421',\\n              'name': 'Ultimate Human (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/761',\\n              'name': 'Ultimate Iron Man (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/3179',\\n              'name': 'Ultimate Iron Man II (2007 - 2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1275',\\n              'name': 'Ultimate Iron Man Vol. 1 (2006)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2311',\\n              'name': 'Ultimate Marvel Team-Up (2001 - 2002)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1823',\\n              'name': 'Ultimate Marvel Team-Up Ultimate Collection (2006)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 92,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1298',\\n              'name': 'Ultimate Adventures (2002) #6',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1334',\\n              'name': 'Ultimate Spider-Man (2000) #70',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1460',\\n              'name': 'Ultimate X-Men (2001) #64',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1461',\\n              'name': '4 of 5 - Magnetic North',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3548',\\n              'name': 'Ultimate Extinction (2006) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3549',\\n              'name': '2 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3550',\\n              'name': 'Ultimate Extinction (2006) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3551',\\n              'name': '3 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3552',\\n              'name': 'Ultimate Extinction (2006) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3553',\\n              'name': '4 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3554',\\n              'name': 'Ultimate Extinction (2006) #5',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3555',\\n              'name': '5 of 5 - 5XLS',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3566',\\n              'name': 'ULTIMATE IRON MAN (2005) #1',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3570',\\n              'name': 'ULTIMATE IRON MAN (2005) #2',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3572',\\n              'name': 'ULTIMATE IRON MAN (2005) #3',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3574',\\n              'name': 'ULTIMATE IRON MAN (2005) #4',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/3576',\\n              'name': 'ULTIMATE IRON MAN (2005) #5',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/4312',\\n              'name': '4 of 4 - 4XLS',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5364',\\n              'name': 'Cover #5364',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/5708',\\n              'name': 'ULTIMATE WOLVERINE VS. HULK (2005) #2',\\n              'type': 'cover'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 0,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1010935/events',\\n          'items': [],\\n          'returned': 0\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1010935/iron_man_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Iron_Man_%28Ultimate%29?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1010935/iron_man_ultimate?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n};\\n\\nfinal _$_character1009368JsonLiteral = {\\n  'code': 200,\\n  'status': 'Ok',\\n  'copyright': '© 2020 MARVEL',\\n  'attributionText': 'Data provided by Marvel. © 2020 MARVEL',\\n  'attributionHTML':\\n      '<a href=\\\"http://marvel.com\\\">Data provided by Marvel. © 2020 MARVEL</a>',\\n  'etag': '9bd2d70d82d9b84e1522e0e6dd5c7fd6333e06eb',\\n  'data': {\\n    'offset': 0,\\n    'limit': 20,\\n    'total': 1,\\n    'count': 1,\\n    'results': [\\n      {\\n        'id': 1009368,\\n        'name': 'Iron Man',\\n        'description':\\n            'Wounded, captured and forced to build a weapon by his enemies, billionaire industrialist Tony Stark instead created an advanced suit of armor to save his life and escape captivity. Now with a new outlook on life, Tony uses his money and intelligence to make the world a safer, better place as Iron Man.',\\n        'modified': '2016-09-28T12:08:19-0400',\\n        'thumbnail': {\\n          'path': 'http://i.annihil.us/u/prod/marvel/i/mg/9/c0/527bb7b37ff55',\\n          'extension': 'jpg'\\n        },\\n        'resourceURI': 'http://gateway.marvel.com/v1/public/characters/1009368',\\n        'comics': {\\n          'available': 2554,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/comics',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/43495',\\n              'name': 'A+X (2012) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/43506',\\n              'name': 'A+X (2012) #7'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/24348',\\n              'name': 'Adam: Legend of the Blue Marvel (Trade Paperback)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/22461',\\n              'name': 'Adam: Legend of the Blue Marvel (2008) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/22856',\\n              'name': 'Adam: Legend of the Blue Marvel (2008) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/23733',\\n              'name': 'Adam: Legend of the Blue Marvel (2008) #5'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30090',\\n              'name': 'Age of Heroes (2010) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/33566',\\n              'name': 'Age of Heroes (2010) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30092',\\n              'name': 'Age of Heroes (2010) #3'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/30093',\\n              'name': 'Age of Heroes (2010) #4'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/67603',\\n              'name': 'Age of Innocence: The Rebirth of Iron Man (1996) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38524',\\n              'name': 'Age of X: Universe (2011) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/38523',\\n              'name': 'Age of X: Universe (2011) #2'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/21280',\\n              'name': 'All-New Iron Manual (2008) #1'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55363',\\n              'name': 'All-New, All-Different Avengers (2015) #10'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55364',\\n              'name': 'All-New, All-Different Avengers (2015) #11'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12653',\\n              'name': 'Alpha Flight (1983) #113'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/12668',\\n              'name': 'Alpha Flight (1983) #127'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55311',\\n              'name': 'The Amazing Spider-Man (2015) #13'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/comics/55312',\\n              'name': 'The Amazing Spider-Man (2015) #14'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'series': {\\n          'available': 623,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/series',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/16450',\\n              'name': 'A+X (2012 - 2014)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/7524',\\n              'name': 'Adam: Legend of the Blue Marvel (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6079',\\n              'name': 'Adam: Legend of the Blue Marvel (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9790',\\n              'name': 'Age of Heroes (2010)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/24380',\\n              'name': 'Age of Innocence: The Rebirth of Iron Man (1996)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/13896',\\n              'name': 'Age of X: Universe (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/4897',\\n              'name': 'All-New Iron Manual (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/20443',\\n              'name': 'All-New, All-Different Avengers (2015 - 2016)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2116',\\n              'name': 'Alpha Flight (1983 - 1994)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/454',\\n              'name': 'Amazing Spider-Man (1999 - 2013)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/2984',\\n              'name': 'Amazing Spider-Man Annual (1964 - 2018)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/15540',\\n              'name': 'Amazing Spider-Man Annual (2012)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/1489',\\n              'name': 'AMAZING SPIDER-MAN VOL. 10: NEW AVENGERS TPB (2005)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/318',\\n              'name': 'Amazing Spider-Man Vol. 6 (2004)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/23446',\\n              'name': 'Amazing Spider-Man: Worldwide Vol. 2 (2017)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6056',\\n              'name': 'ANNIHILATION CLASSIC HC (2008)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/14818',\\n              'name': 'Annihilators: Earthfall (2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/14779',\\n              'name': 'Art of Marvel Studios TPB Slipcase (2011 - Present)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/9792',\\n              'name': 'Astonishing Spider-Man/Wolverine (2010 - 2011)'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/series/6792',\\n              'name': 'Astonishing Tales (2009)'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'stories': {\\n          'available': 3875,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/stories',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/670',\\n              'name': 'X-MEN (2004) #186',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/892',\\n              'name': 'THOR (1998) #81',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/960',\\n              'name': '3 of ?',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/982',\\n              'name': 'Interior #982',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/984',\\n              'name': 'Interior #984',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/986',\\n              'name': 'Interior #986',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/988',\\n              'name': 'Interior #988',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/990',\\n              'name': 'Interior #990',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/992',\\n              'name': 'Interior #992',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/994',\\n              'name': 'Interior #994',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/996',\\n              'name': 'Interior #996',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/998',\\n              'name': 'Interior #998',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1000',\\n              'name': 'Interior #1000',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1002',\\n              'name':\\n                  'AVENGERS DISASSEMBLED TIE-IN! Still reeling from recent traumas, Iron Man must face off against his evil doppelganger. Meanwhile',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1004',\\n              'name':\\n                  '\\\"THE SINGULARITY\\\" CONCLUSION! PART 4 (OF 4) The battle rages on between Iron Man and his doppelganger, but only one of them can ',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1018',\\n              'name': 'Amazing Spider-Man (1999) #500',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1024',\\n              'name': 'Avengers (1998) #80',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1026',\\n              'name': 'Avengers (1998) #81',\\n              'type': 'cover'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1041',\\n              'name': 'Avengers (1998) #502',\\n              'type': 'interiorStory'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/stories/1051',\\n              'name': 'Interior #1051',\\n              'type': 'interiorStory'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'events': {\\n          'available': 31,\\n          'collectionURI':\\n              'http://gateway.marvel.com/v1/public/characters/1009368/events',\\n          'items': [\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/116',\\n              'name': 'Acts of Vengeance!'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/303',\\n              'name': 'Age of X'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/231',\\n              'name': 'Armor Wars'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/233',\\n              'name': 'Atlantis Attacks'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/234',\\n              'name': 'Avengers Disassembled'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/310',\\n              'name': 'Avengers VS X-Men'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/296',\\n              'name': 'Chaos War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/238',\\n              'name': 'Civil War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/239',\\n              'name': 'Crossing'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/318',\\n              'name': 'Dark Reign'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/245',\\n              'name': 'Enemy of the State'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/249',\\n              'name': 'Fatal Attractions'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/302',\\n              'name': 'Fear Itself'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/251',\\n              'name': 'House of M'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/315',\\n              'name': 'Infinity'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/29',\\n              'name': 'Infinity War'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/317',\\n              'name': 'Inhumanity'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/255',\\n              'name': 'Initiative'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/37',\\n              'name': 'Maximum Security'\\n            },\\n            {\\n              'resourceURI': 'http://gateway.marvel.com/v1/public/events/154',\\n              'name': 'Onslaught'\\n            }\\n          ],\\n          'returned': 20\\n        },\\n        'urls': [\\n          {\\n            'type': 'detail',\\n            'url':\\n                'http://marvel.com/comics/characters/1009368/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'wiki',\\n            'url':\\n                'http://marvel.com/universe/Iron_Man_(Anthony_Stark)?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          },\\n          {\\n            'type': 'comiclink',\\n            'url':\\n                'http://marvel.com/comics/characters/1009368/iron_man?utm_campaign=apiRef&utm_source=5f84cceaaa141a3ad5425c416353eab4'\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n};\\n\",\"path\":\"marvel/lib/src/fake_marvel.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'result.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\n/// @nodoc\\nmixin _$Result<T> {\\n  @optionalTypeArgs\\n  TResult when<TResult extends Object?>({\\n    required TResult Function(T value) data,\\n    required TResult Function(Object error, StackTrace? stackTrace) error,\\n  }) =>\\n      throw _privateConstructorUsedError;\\n  @optionalTypeArgs\\n  TResult? whenOrNull<TResult extends Object?>({\\n    TResult? Function(T value)? data,\\n    TResult? Function(Object error, StackTrace? stackTrace)? error,\\n  }) =>\\n      throw _privateConstructorUsedError;\\n  @optionalTypeArgs\\n  TResult maybeWhen<TResult extends Object?>({\\n    TResult Function(T value)? data,\\n    TResult Function(Object error, StackTrace? stackTrace)? error,\\n    required TResult orElse(),\\n  }) =>\\n      throw _privateConstructorUsedError;\\n  @optionalTypeArgs\\n  TResult map<TResult extends Object?>({\\n    required TResult Function(_ResultData<T> value) data,\\n    required TResult Function(_ResultError<T> value) error,\\n  }) =>\\n      throw _privateConstructorUsedError;\\n  @optionalTypeArgs\\n  TResult? mapOrNull<TResult extends Object?>({\\n    TResult? Function(_ResultData<T> value)? data,\\n    TResult? Function(_ResultError<T> value)? error,\\n  }) =>\\n      throw _privateConstructorUsedError;\\n  @optionalTypeArgs\\n  TResult maybeMap<TResult extends Object?>({\\n    TResult Function(_ResultData<T> value)? data,\\n    TResult Function(_ResultError<T> value)? error,\\n    required TResult orElse(),\\n  }) =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $ResultCopyWith<T, $Res> {\\n  factory $ResultCopyWith(Result<T> value, $Res Function(Result<T>) then) =\\n      _$ResultCopyWithImpl<T, $Res, Result<T>>;\\n}\\n\\n/// @nodoc\\nclass _$ResultCopyWithImpl<T, $Res, $Val extends Result<T>>\\n    implements $ResultCopyWith<T, $Res> {\\n  _$ResultCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n}\\n\\n/// @nodoc\\nabstract class _$$ResultDataImplCopyWith<T, $Res> {\\n  factory _$$ResultDataImplCopyWith(\\n          _$ResultDataImpl<T> value, $Res Function(_$ResultDataImpl<T>) then) =\\n      __$$ResultDataImplCopyWithImpl<T, $Res>;\\n  @useResult\\n  $Res call({T value});\\n}\\n\\n/// @nodoc\\nclass __$$ResultDataImplCopyWithImpl<T, $Res>\\n    extends _$ResultCopyWithImpl<T, $Res, _$ResultDataImpl<T>>\\n    implements _$$ResultDataImplCopyWith<T, $Res> {\\n  __$$ResultDataImplCopyWithImpl(\\n      _$ResultDataImpl<T> _value, $Res Function(_$ResultDataImpl<T>) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? value = freezed,\\n  }) {\\n    return _then(_$ResultDataImpl<T>(\\n      freezed == value\\n          ? _value.value\\n          : value // ignore: cast_nullable_to_non_nullable\\n              as T,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\nclass _$ResultDataImpl<T> extends _ResultData<T> {\\n  _$ResultDataImpl(this.value) : super._();\\n\\n  @override\\n  final T value;\\n\\n  @override\\n  String toString() {\\n    return 'Result<$T>.data(value: $value)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$ResultDataImpl<T> &&\\n            const DeepCollectionEquality().equals(other.value, value));\\n  }\\n\\n  @override\\n  int get hashCode =>\\n      Object.hash(runtimeType, const DeepCollectionEquality().hash(value));\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$ResultDataImplCopyWith<T, _$ResultDataImpl<T>> get copyWith =>\\n      __$$ResultDataImplCopyWithImpl<T, _$ResultDataImpl<T>>(this, _$identity);\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult when<TResult extends Object?>({\\n    required TResult Function(T value) data,\\n    required TResult Function(Object error, StackTrace? stackTrace) error,\\n  }) {\\n    return data(value);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult? whenOrNull<TResult extends Object?>({\\n    TResult? Function(T value)? data,\\n    TResult? Function(Object error, StackTrace? stackTrace)? error,\\n  }) {\\n    return data?.call(value);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult maybeWhen<TResult extends Object?>({\\n    TResult Function(T value)? data,\\n    TResult Function(Object error, StackTrace? stackTrace)? error,\\n    required TResult orElse(),\\n  }) {\\n    if (data != null) {\\n      return data(value);\\n    }\\n    return orElse();\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult map<TResult extends Object?>({\\n    required TResult Function(_ResultData<T> value) data,\\n    required TResult Function(_ResultError<T> value) error,\\n  }) {\\n    return data(this);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult? mapOrNull<TResult extends Object?>({\\n    TResult? Function(_ResultData<T> value)? data,\\n    TResult? Function(_ResultError<T> value)? error,\\n  }) {\\n    return data?.call(this);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult maybeMap<TResult extends Object?>({\\n    TResult Function(_ResultData<T> value)? data,\\n    TResult Function(_ResultError<T> value)? error,\\n    required TResult orElse(),\\n  }) {\\n    if (data != null) {\\n      return data(this);\\n    }\\n    return orElse();\\n  }\\n}\\n\\nabstract class _ResultData<T> extends Result<T> {\\n  factory _ResultData(final T value) = _$ResultDataImpl<T>;\\n  _ResultData._() : super._();\\n\\n  T get value;\\n  @JsonKey(ignore: true)\\n  _$$ResultDataImplCopyWith<T, _$ResultDataImpl<T>> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class _$$ResultErrorImplCopyWith<T, $Res> {\\n  factory _$$ResultErrorImplCopyWith(_$ResultErrorImpl<T> value,\\n          $Res Function(_$ResultErrorImpl<T>) then) =\\n      __$$ResultErrorImplCopyWithImpl<T, $Res>;\\n  @useResult\\n  $Res call({Object error, StackTrace? stackTrace});\\n}\\n\\n/// @nodoc\\nclass __$$ResultErrorImplCopyWithImpl<T, $Res>\\n    extends _$ResultCopyWithImpl<T, $Res, _$ResultErrorImpl<T>>\\n    implements _$$ResultErrorImplCopyWith<T, $Res> {\\n  __$$ResultErrorImplCopyWithImpl(\\n      _$ResultErrorImpl<T> _value, $Res Function(_$ResultErrorImpl<T>) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? error = null,\\n    Object? stackTrace = freezed,\\n  }) {\\n    return _then(_$ResultErrorImpl<T>(\\n      null == error ? _value.error : error,\\n      freezed == stackTrace\\n          ? _value.stackTrace\\n          : stackTrace // ignore: cast_nullable_to_non_nullable\\n              as StackTrace?,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\nclass _$ResultErrorImpl<T> extends _ResultError<T> {\\n  _$ResultErrorImpl(this.error, [this.stackTrace]) : super._();\\n\\n  @override\\n  final Object error;\\n  @override\\n  final StackTrace? stackTrace;\\n\\n  @override\\n  String toString() {\\n    return 'Result<$T>.error(error: $error, stackTrace: $stackTrace)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$ResultErrorImpl<T> &&\\n            const DeepCollectionEquality().equals(other.error, error) &&\\n            (identical(other.stackTrace, stackTrace) ||\\n                other.stackTrace == stackTrace));\\n  }\\n\\n  @override\\n  int get hashCode => Object.hash(\\n      runtimeType, const DeepCollectionEquality().hash(error), stackTrace);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$ResultErrorImplCopyWith<T, _$ResultErrorImpl<T>> get copyWith =>\\n      __$$ResultErrorImplCopyWithImpl<T, _$ResultErrorImpl<T>>(\\n          this, _$identity);\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult when<TResult extends Object?>({\\n    required TResult Function(T value) data,\\n    required TResult Function(Object error, StackTrace? stackTrace) error,\\n  }) {\\n    return error(this.error, stackTrace);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult? whenOrNull<TResult extends Object?>({\\n    TResult? Function(T value)? data,\\n    TResult? Function(Object error, StackTrace? stackTrace)? error,\\n  }) {\\n    return error?.call(this.error, stackTrace);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult maybeWhen<TResult extends Object?>({\\n    TResult Function(T value)? data,\\n    TResult Function(Object error, StackTrace? stackTrace)? error,\\n    required TResult orElse(),\\n  }) {\\n    if (error != null) {\\n      return error(this.error, stackTrace);\\n    }\\n    return orElse();\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult map<TResult extends Object?>({\\n    required TResult Function(_ResultData<T> value) data,\\n    required TResult Function(_ResultError<T> value) error,\\n  }) {\\n    return error(this);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult? mapOrNull<TResult extends Object?>({\\n    TResult? Function(_ResultData<T> value)? data,\\n    TResult? Function(_ResultError<T> value)? error,\\n  }) {\\n    return error?.call(this);\\n  }\\n\\n  @override\\n  @optionalTypeArgs\\n  TResult maybeMap<TResult extends Object?>({\\n    TResult Function(_ResultData<T> value)? data,\\n    TResult Function(_ResultError<T> value)? error,\\n    required TResult orElse(),\\n  }) {\\n    if (error != null) {\\n      return error(this);\\n    }\\n    return orElse();\\n  }\\n}\\n\\nabstract class _ResultError<T> extends Result<T> {\\n  factory _ResultError(final Object error, [final StackTrace? stackTrace]) =\\n      _$ResultErrorImpl<T>;\\n  _ResultError._() : super._();\\n\\n  Object get error;\\n  StackTrace? get stackTrace;\\n  @JsonKey(ignore: true)\\n  _$$ResultErrorImplCopyWith<T, _$ResultErrorImpl<T>> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"marvel/lib/src/result.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// ignore_for_file: invalid_annotation_target\\n\\nimport 'dart:convert';\\n\\nimport 'package:flutter/services.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\npart 'configuration.freezed.dart';\\npart 'configuration.g.dart';\\n\\n@freezed\\nclass Configuration with _$Configuration {\\n  @JsonSerializable(fieldRename: FieldRename.snake)\\n  factory Configuration({\\n    required String publicKey,\\n    required String privateKey,\\n  }) = _Configuration;\\n\\n  factory Configuration.fromJson(Map<String, Object?> json) =>\\n      _$ConfigurationFromJson(json);\\n}\\n\\nfinal configurationsProvider = FutureProvider<Configuration>((_) async {\\n  final content = json.decode(\\n    await rootBundle.loadString('assets/configurations.json'),\\n  ) as Map<String, Object?>;\\n\\n  return Configuration.fromJson(content);\\n});\\n\",\"path\":\"marvel/lib/src/configuration.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"/// This file contains the necessary objects to connect with the Marvel API.\\n///\\n/// This includes [MarvelRepository], which exposes methods to do the request\\n/// in a type-safe way.\\n/// It also includes all the intermediate objects used to deserialize the\\n/// response from the API.\\nlibrary marvel;\\n\\nimport 'dart:convert';\\n\\nimport 'package:crypto/crypto.dart';\\nimport 'package:dio/dio.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport 'configuration.dart';\\n\\npart 'marvel.freezed.dart';\\npart 'marvel.g.dart';\\n\\nfinal dioProvider = Provider((ref) => Dio());\\n\\nfinal repositoryProvider = Provider(MarvelRepository.new);\\n\\nclass MarvelRepository {\\n  MarvelRepository(\\n    this.ref, {\\n    int Function()? getCurrentTimestamp,\\n  }) : _getCurrentTimestamp = getCurrentTimestamp ??\\n            (() => DateTime.now().millisecondsSinceEpoch);\\n\\n  final Ref ref;\\n  final int Function() _getCurrentTimestamp;\\n  final _characterCache = <String, Character>{};\\n\\n  Future<MarvelListCharactersResponse> fetchCharacters({\\n    required int offset,\\n    int? limit,\\n    String? nameStartsWith,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final cleanNameFilter = nameStartsWith?.trim();\\n\\n    final response = await _get(\\n      'characters',\\n      queryParameters: <String, Object?>{\\n        'offset': offset,\\n        if (limit != null) 'limit': limit,\\n        if (cleanNameFilter != null && cleanNameFilter.isNotEmpty)\\n          'nameStartsWith': cleanNameFilter,\\n      },\\n      cancelToken: cancelToken,\\n    );\\n\\n    final result = MarvelListCharactersResponse(\\n      characters: response.data.results.map((e) {\\n        return Character.fromJson(e);\\n      }).toList(growable: false),\\n      totalCount: response.data.total,\\n    );\\n\\n    for (final character in result.characters) {\\n      _characterCache[character.id.toString()] = character;\\n    }\\n\\n    return result;\\n  }\\n\\n  Future<Character> fetchCharacter(\\n    String id, {\\n    CancelToken? cancelToken,\\n  }) async {\\n    // Don't fetch the Character if it was already obtained previously, either\\n    // in the home page or in the detail page.\\n    if (_characterCache.containsKey(id)) {\\n      return _characterCache[id]!;\\n    }\\n\\n    final response = await _get('characters/$id', cancelToken: cancelToken);\\n    return Character.fromJson(response.data.results.single);\\n  }\\n\\n  Future<MarvelResponse> _get(\\n    String path, {\\n    Map<String, Object?>? queryParameters,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final configs = await ref.read(configurationsProvider.future);\\n\\n    final timestamp = _getCurrentTimestamp();\\n    final hash = md5\\n        .convert(\\n          utf8.encode('$timestamp${configs.privateKey}${configs.publicKey}'),\\n        )\\n        .toString();\\n\\n    final result = await ref.read(dioProvider).get<Map<String, Object?>>(\\n      'https://gateway.marvel.com/v1/public/$path',\\n      cancelToken: cancelToken,\\n      queryParameters: <String, Object?>{\\n        'apikey': configs.publicKey,\\n        'ts': timestamp,\\n        'hash': hash,\\n        ...?queryParameters,\\n      },\\n      // TO-DO deserialize error message\\n    );\\n    return MarvelResponse.fromJson(Map<String, Object>.from(result.data!));\\n  }\\n}\\n\\n@freezed\\nclass MarvelListCharactersResponse with _$MarvelListCharactersResponse {\\n  factory MarvelListCharactersResponse({\\n    required int totalCount,\\n    required List<Character> characters,\\n  }) = _MarvelListCharactersResponse;\\n}\\n\\n@freezed\\nclass Character with _$Character {\\n  factory Character({\\n    required int id,\\n    required String name,\\n    required Thumbnail thumbnail,\\n  }) = _Character;\\n\\n  factory Character.fromJson(Map<String, Object?> json) =>\\n      _$CharacterFromJson(json);\\n}\\n\\n@freezed\\nclass Thumbnail with _$Thumbnail {\\n  factory Thumbnail({\\n    required String path,\\n    required String extension,\\n  }) = _Thumbnail;\\n  Thumbnail._();\\n\\n  factory Thumbnail.fromJson(Map<String, Object?> json) =>\\n      _$ThumbnailFromJson(json);\\n\\n  late final String url =\\n      '${path.replaceFirst('http://', 'https://')}.$extension';\\n}\\n\\n@freezed\\nclass MarvelResponse with _$MarvelResponse {\\n  factory MarvelResponse(MarvelData data) = _MarvelResponse;\\n\\n  factory MarvelResponse.fromJson(Map<String, Object?> json) =>\\n      _$MarvelResponseFromJson(json);\\n}\\n\\n@freezed\\nclass MarvelData with _$MarvelData {\\n  factory MarvelData(\\n    List<Map<String, Object?>> results,\\n    int total,\\n  ) = _MarvelData;\\n\\n  factory MarvelData.fromJson(Map<String, Object?> json) =>\\n      _$MarvelDataFromJson(json);\\n}\\n\",\"path\":\"marvel/lib/src/marvel.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:dio/dio.dart';\\n// ignore: undefined_hidden_name\\nimport 'package:flutter/material.dart' hide SearchBar;\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport '../marvel.dart';\\nimport '../widgets/loading_image.dart';\\nimport '../widgets/marvel_logo.dart';\\nimport '../widgets/search_bar.dart';\\n\\npart 'home.freezed.dart';\\n\\nconst kCharactersPageLimit = 50;\\n\\n@freezed\\nclass CharacterPagination with _$CharacterPagination {\\n  factory CharacterPagination({\\n    required int page,\\n    String? name,\\n  }) = _CharacterPagination;\\n}\\n\\nclass AbortedException implements Exception {}\\n\\nfinal characterPages = FutureProvider.autoDispose\\n    .family<MarvelListCharactersResponse, CharacterPagination>(\\n  (ref, meta) async {\\n    // Cancel the page request if the UI no longer needs it before the request\\n    // is finished.\\n    // This typically happen if the user scrolls very fast\\n    final cancelToken = CancelToken();\\n    ref.onDispose(cancelToken.cancel);\\n\\n    // Debouncing the request. By having this delay, it leaves the opportunity\\n    // for consumers to subscribe to a different `meta` parameters. In which\\n    // case, this request will be aborted.\\n    await Future<void>.delayed(const Duration(milliseconds: 250));\\n    if (cancelToken.isCancelled) throw AbortedException();\\n\\n    final repository = ref.watch(repositoryProvider);\\n    final charactersResponse = await repository.fetchCharacters(\\n      offset: meta.page * kCharactersPageLimit,\\n      limit: kCharactersPageLimit,\\n      nameStartsWith: meta.name,\\n      cancelToken: cancelToken,\\n    );\\n    return charactersResponse;\\n  },\\n);\\n\\nfinal charactersCount =\\n    Provider.autoDispose.family<AsyncValue<int>, String>((ref, name) {\\n  final meta = CharacterPagination(page: 0, name: name);\\n\\n  return ref.watch(characterPages(meta)).whenData((value) => value.totalCount);\\n});\\n\\n@freezed\\nclass CharacterOffset with _$CharacterOffset {\\n  factory CharacterOffset({\\n    required int offset,\\n    @Default('') String name,\\n  }) = _CharacterOffset;\\n}\\n\\nfinal characterAtIndex = Provider.autoDispose\\n    .family<AsyncValue<Character>, CharacterOffset>((ref, query) {\\n  final offsetInPage = query.offset % kCharactersPageLimit;\\n\\n  final meta = CharacterPagination(\\n    page: query.offset ~/ kCharactersPageLimit,\\n    name: query.name,\\n  );\\n\\n  return ref.watch(characterPages(meta)).whenData(\\n        (value) => value.characters[offsetInPage],\\n      );\\n});\\n\\nclass Home extends HookConsumerWidget {\\n  const Home({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    return ref.watch(charactersCount('')).when(\\n          loading: () => Container(\\n            color: Colors.white,\\n            child: const Center(child: CircularProgressIndicator()),\\n          ),\\n          error: (err, stack) {\\n            return Scaffold(\\n              appBar: AppBar(title: const Text('Error')),\\n              body: Center(\\n                child: Text(\\n                  switch (err) {\\n                    DioException() => err.message ?? '$err',\\n                    _ => '$err',\\n                  },\\n                ),\\n              ),\\n            );\\n          },\\n          data: (charactersCount) {\\n            return Scaffold(\\n              body: CustomScrollView(\\n                slivers: [\\n                  SliverAppBar(\\n                    expandedHeight: 200,\\n                    flexibleSpace: FlexibleSpaceBar(\\n                      title: SizedBox(\\n                        height: 40,\\n                        child: marvelLogo,\\n                      ),\\n                      centerTitle: true,\\n                      background: Image.asset(\\n                        'assets/marvel_background.jpeg',\\n                        fit: BoxFit.cover,\\n                        colorBlendMode: BlendMode.multiply,\\n                        color: Colors.grey.shade500,\\n                      ),\\n                      titlePadding: const EdgeInsetsDirectional.only(bottom: 8),\\n                    ),\\n                    pinned: true,\\n                    actions: const [\\n                      SearchBar(),\\n                    ],\\n                  ),\\n                  SliverPadding(\\n                    padding: const EdgeInsets.only(top: 10, left: 3, right: 3),\\n                    sliver: SliverGrid(\\n                      gridDelegate:\\n                          const SliverGridDelegateWithFixedCrossAxisCount(\\n                        crossAxisCount: 2,\\n                        childAspectRatio: 0.8,\\n                      ),\\n                      delegate: SliverChildBuilderDelegate(\\n                        childCount: charactersCount,\\n                        (c, index) {\\n                          return ProviderScope(\\n                            overrides: [\\n                              _characterIndex.overrideWithValue(index),\\n                            ],\\n                            child: const CharacterItem(),\\n                          );\\n                        },\\n                      ),\\n                    ),\\n                  ),\\n                ],\\n              ),\\n              floatingActionButton: FloatingActionButton.extended(\\n                onPressed: () =>\\n                    Navigator.pushNamed(context, '/characters/1009368'),\\n                label: const Text('Deep link to Iron-man'),\\n                icon: const Icon(Icons.link),\\n              ),\\n            );\\n          },\\n        );\\n  }\\n}\\n\\nfinal _characterIndex = Provider<int>((ref) => throw UnimplementedError());\\n\\nclass CharacterItem extends HookConsumerWidget {\\n  const CharacterItem({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final index = ref.watch(_characterIndex);\\n\\n    final character = ref.watch(\\n      characterAtIndex(CharacterOffset(offset: index)),\\n    );\\n\\n    return character.when(\\n      loading: () => const Center(child: CircularProgressIndicator()),\\n      error: (err, stack) => Text('Error $err'),\\n      data: (character) {\\n        return GestureDetector(\\n          onTap: () {\\n            Navigator.pushNamed(context, '/characters/${character.id}');\\n          },\\n          child: Card(\\n            child: Column(\\n              crossAxisAlignment: CrossAxisAlignment.stretch,\\n              children: <Widget>[\\n                Expanded(\\n                  child: Hero(\\n                    tag: 'character-${character.id}',\\n                    child: LoadingImage(url: character.thumbnail.url),\\n                  ),\\n                ),\\n                Padding(\\n                  padding: const EdgeInsets.all(12),\\n                  child: Text(character.name),\\n                ),\\n              ],\\n            ),\\n          ),\\n        );\\n      },\\n    );\\n  }\\n}\\n\",\"path\":\"marvel/lib/src/screens/home.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'home.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\n/// @nodoc\\nmixin _$CharacterPagination {\\n  int get page => throw _privateConstructorUsedError;\\n  String? get name => throw _privateConstructorUsedError;\\n\\n  @JsonKey(ignore: true)\\n  $CharacterPaginationCopyWith<CharacterPagination> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $CharacterPaginationCopyWith<$Res> {\\n  factory $CharacterPaginationCopyWith(\\n          CharacterPagination value, $Res Function(CharacterPagination) then) =\\n      _$CharacterPaginationCopyWithImpl<$Res, CharacterPagination>;\\n  @useResult\\n  $Res call({int page, String? name});\\n}\\n\\n/// @nodoc\\nclass _$CharacterPaginationCopyWithImpl<$Res, $Val extends CharacterPagination>\\n    implements $CharacterPaginationCopyWith<$Res> {\\n  _$CharacterPaginationCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? page = null,\\n    Object? name = freezed,\\n  }) {\\n    return _then(_value.copyWith(\\n      page: null == page\\n          ? _value.page\\n          : page // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      name: freezed == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String?,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$CharacterPaginationImplCopyWith<$Res>\\n    implements $CharacterPaginationCopyWith<$Res> {\\n  factory _$$CharacterPaginationImplCopyWith(_$CharacterPaginationImpl value,\\n          $Res Function(_$CharacterPaginationImpl) then) =\\n      __$$CharacterPaginationImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({int page, String? name});\\n}\\n\\n/// @nodoc\\nclass __$$CharacterPaginationImplCopyWithImpl<$Res>\\n    extends _$CharacterPaginationCopyWithImpl<$Res, _$CharacterPaginationImpl>\\n    implements _$$CharacterPaginationImplCopyWith<$Res> {\\n  __$$CharacterPaginationImplCopyWithImpl(_$CharacterPaginationImpl _value,\\n      $Res Function(_$CharacterPaginationImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? page = null,\\n    Object? name = freezed,\\n  }) {\\n    return _then(_$CharacterPaginationImpl(\\n      page: null == page\\n          ? _value.page\\n          : page // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      name: freezed == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String?,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\nclass _$CharacterPaginationImpl implements _CharacterPagination {\\n  _$CharacterPaginationImpl({required this.page, this.name});\\n\\n  @override\\n  final int page;\\n  @override\\n  final String? name;\\n\\n  @override\\n  String toString() {\\n    return 'CharacterPagination(page: $page, name: $name)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$CharacterPaginationImpl &&\\n            (identical(other.page, page) || other.page == page) &&\\n            (identical(other.name, name) || other.name == name));\\n  }\\n\\n  @override\\n  int get hashCode => Object.hash(runtimeType, page, name);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$CharacterPaginationImplCopyWith<_$CharacterPaginationImpl> get copyWith =>\\n      __$$CharacterPaginationImplCopyWithImpl<_$CharacterPaginationImpl>(\\n          this, _$identity);\\n}\\n\\nabstract class _CharacterPagination implements CharacterPagination {\\n  factory _CharacterPagination({required final int page, final String? name}) =\\n      _$CharacterPaginationImpl;\\n\\n  @override\\n  int get page;\\n  @override\\n  String? get name;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$CharacterPaginationImplCopyWith<_$CharacterPaginationImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nmixin _$CharacterOffset {\\n  int get offset => throw _privateConstructorUsedError;\\n  String get name => throw _privateConstructorUsedError;\\n\\n  @JsonKey(ignore: true)\\n  $CharacterOffsetCopyWith<CharacterOffset> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $CharacterOffsetCopyWith<$Res> {\\n  factory $CharacterOffsetCopyWith(\\n          CharacterOffset value, $Res Function(CharacterOffset) then) =\\n      _$CharacterOffsetCopyWithImpl<$Res, CharacterOffset>;\\n  @useResult\\n  $Res call({int offset, String name});\\n}\\n\\n/// @nodoc\\nclass _$CharacterOffsetCopyWithImpl<$Res, $Val extends CharacterOffset>\\n    implements $CharacterOffsetCopyWith<$Res> {\\n  _$CharacterOffsetCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? offset = null,\\n    Object? name = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      offset: null == offset\\n          ? _value.offset\\n          : offset // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      name: null == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$CharacterOffsetImplCopyWith<$Res>\\n    implements $CharacterOffsetCopyWith<$Res> {\\n  factory _$$CharacterOffsetImplCopyWith(_$CharacterOffsetImpl value,\\n          $Res Function(_$CharacterOffsetImpl) then) =\\n      __$$CharacterOffsetImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({int offset, String name});\\n}\\n\\n/// @nodoc\\nclass __$$CharacterOffsetImplCopyWithImpl<$Res>\\n    extends _$CharacterOffsetCopyWithImpl<$Res, _$CharacterOffsetImpl>\\n    implements _$$CharacterOffsetImplCopyWith<$Res> {\\n  __$$CharacterOffsetImplCopyWithImpl(\\n      _$CharacterOffsetImpl _value, $Res Function(_$CharacterOffsetImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? offset = null,\\n    Object? name = null,\\n  }) {\\n    return _then(_$CharacterOffsetImpl(\\n      offset: null == offset\\n          ? _value.offset\\n          : offset // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      name: null == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n\\nclass _$CharacterOffsetImpl implements _CharacterOffset {\\n  _$CharacterOffsetImpl({required this.offset, this.name = ''});\\n\\n  @override\\n  final int offset;\\n  @override\\n  @JsonKey()\\n  final String name;\\n\\n  @override\\n  String toString() {\\n    return 'CharacterOffset(offset: $offset, name: $name)';\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$CharacterOffsetImpl &&\\n            (identical(other.offset, offset) || other.offset == offset) &&\\n            (identical(other.name, name) || other.name == name));\\n  }\\n\\n  @override\\n  int get hashCode => Object.hash(runtimeType, offset, name);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$CharacterOffsetImplCopyWith<_$CharacterOffsetImpl> get copyWith =>\\n      __$$CharacterOffsetImplCopyWithImpl<_$CharacterOffsetImpl>(\\n          this, _$identity);\\n}\\n\\nabstract class _CharacterOffset implements CharacterOffset {\\n  factory _CharacterOffset({required final int offset, final String name}) =\\n      _$CharacterOffsetImpl;\\n\\n  @override\\n  int get offset;\\n  @override\\n  String get name;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$CharacterOffsetImplCopyWith<_$CharacterOffsetImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"marvel/lib/src/screens/home.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// ignore: import_of_legacy_library_into_null_safe\\nimport 'package:dio/dio.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport '../marvel.dart';\\nimport '../widgets/loading_image.dart';\\n\\n/// The selected Character's ID\\n///\\n/// It is an error to use [CharacterView] without overriding this\\n/// provider to a non-null value.\\n///\\n/// See also:\\n///\\n/// - [MaterialApp.onGenerateRoute], in `main.dart`, which overrides\\n///   [selectedCharacterId] to set the ID based by parsing the route path.\\n///\\n/// - [CharacterView], which consumes this provider and [character] to\\n///   show the information of one specific [Character].\\nfinal selectedCharacterId = Provider<String>((ref) {\\n  throw UnimplementedError();\\n});\\n\\n/// A provider that individually fetches a [Character] based on its ID.\\n///\\n/// This rarely perform an HTTP request as most of the time the [Character]\\n/// is already pre-fetched by the home page.\\n///\\n/// The catch is: When using deep-links, a user may want to see a [Character]\\n/// without clicking on its item in the home page – in which case the [Character]\\n/// wasn't obtained yet.\\n/// In that situation, the provider will trigger an HTTP request to read that\\n/// [Character] specifically.\\n///\\n/// If the user leaves the detail page before the HTTP request completes,\\n/// the request is cancelled.\\nfinal character =\\n    FutureProvider.autoDispose.family<Character, String>((ref, id) async {\\n  // The user used a deep-link to land in the Character page, so we fetch\\n  // the Character individually.\\n\\n  // Cancel the HTTP request if the user leaves the detail page before\\n  // the request completes.\\n  final cancelToken = CancelToken();\\n  ref.onDispose(cancelToken.cancel);\\n\\n  final repository = ref.watch(repositoryProvider);\\n  final character = await repository.fetchCharacter(\\n    id,\\n    cancelToken: cancelToken,\\n  );\\n\\n  /// Cache the Character once it was successfully obtained.\\n  ref.keepAlive();\\n  return character;\\n});\\n\\nclass CharacterView extends HookConsumerWidget {\\n  const CharacterView({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final id = ref.watch(selectedCharacterId);\\n\\n    return ref.watch(character(id)).when(\\n      loading: () {\\n        return const Scaffold(\\n          body: Center(child: CircularProgressIndicator()),\\n        );\\n      },\\n      error: (err, stack) {\\n        return Scaffold(\\n          appBar: AppBar(\\n            title: const Text('Error'),\\n          ),\\n        );\\n      },\\n      data: (character) {\\n        return Scaffold(\\n          appBar: AppBar(\\n            title: Text(character.name),\\n          ),\\n          body: LoadingImage(url: character.thumbnail.url),\\n        );\\n      },\\n    );\\n  }\\n}\\n\",\"path\":\"marvel/lib/src/screens/character_detail.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:flutter_hooks/flutter_hooks.dart';\\n// ignore: import_of_legacy_library_into_null_safe\\nimport 'package:flutter_portal/flutter_portal.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport '../screens/home.dart';\\n\\nclass _SearchTheme {\\n  const _SearchTheme({\\n    required this.width,\\n    // ignore: unused_element, blocked by https://github.com/dart-lang/linter/issues/3232\\n    this.height = 300,\\n    required this.searchDecoration,\\n    required this.iconPadding,\\n    required this.searchMargin,\\n  });\\n\\n  final double width;\\n  final double height;\\n  final BoxDecoration searchDecoration;\\n  final EdgeInsets iconPadding;\\n  final EdgeInsets searchMargin;\\n}\\n\\nconst _kFocusedTheme = _SearchTheme(\\n  width: 210,\\n  searchDecoration: BoxDecoration(\\n    color: Colors.white,\\n    borderRadius: BorderRadius.all(Radius.circular(10)),\\n  ),\\n  iconPadding: EdgeInsets.only(right: 8),\\n  searchMargin: EdgeInsets.only(right: 10),\\n);\\n\\nconst _kUnfocusedTheme = _SearchTheme(\\n  width: 40,\\n  searchDecoration: BoxDecoration(\\n    color: Colors.transparent,\\n    borderRadius: BorderRadius.all(Radius.circular(10)),\\n  ),\\n  iconPadding: EdgeInsets.zero,\\n  searchMargin: EdgeInsets.only(right: 10),\\n);\\n\\nclass SearchBar extends HookConsumerWidget {\\n  const SearchBar({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    /// Whether the widget is focused or not determines if the widget\\n    /// is currently \\\"searching\\\" or in idle state.\\n    final searchFocusNode = useFocusNode();\\n    useListenable(searchFocusNode);\\n    final theme = searchFocusNode.hasFocus ? _kFocusedTheme : _kUnfocusedTheme;\\n\\n    final textFocusNode = useFocusNode();\\n    final textEditingController = useTextEditingController();\\n\\n    final hints = TweenAnimationBuilder<double>(\\n      duration: const Duration(milliseconds: 150),\\n      tween: Tween(\\n        begin: 0,\\n        end: searchFocusNode.hasFocus ? 1 : 0,\\n      ),\\n      builder: (context, opacity, child) {\\n        return Opacity(\\n          opacity: opacity,\\n          child: child,\\n        );\\n      },\\n      child: _SearchHintContainer(\\n        theme: theme,\\n        child: _SearchHints(textEditingController: textEditingController),\\n      ),\\n    );\\n\\n    final searchField = _SearchbarView(\\n      theme: theme,\\n      isFocused: searchFocusNode.hasFocus,\\n      textEditingController: textEditingController,\\n      textFocusNode: textFocusNode,\\n    );\\n\\n    return Focus(\\n      focusNode: searchFocusNode,\\n      child: TweenAnimationBuilder<double>(\\n        duration: const Duration(milliseconds: 150),\\n        tween: Tween(end: theme.width),\\n        builder: (context, width, _) {\\n          return Center(\\n            child: SizedBox(\\n              width: width,\\n              child: PortalEntry(\\n                visible: width > 40 || searchFocusNode.hasFocus,\\n                childAnchor: Alignment.bottomCenter,\\n                portalAnchor: Alignment.topCenter,\\n                portal: SizedBox(width: width, child: hints),\\n                child: searchField,\\n              ),\\n            ),\\n          );\\n        },\\n      ),\\n    );\\n  }\\n}\\n\\nclass _SearchHints extends HookConsumerWidget {\\n  const _SearchHints({\\n    Key? key,\\n    required this.textEditingController,\\n  }) : super(key: key);\\n\\n  final TextEditingController textEditingController;\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final search = useValueListenable(textEditingController).text;\\n\\n    return ref.watch(charactersCount(search)).when(\\n          loading: () => const Center(\\n            heightFactor: 1,\\n            child: Padding(\\n              padding: EdgeInsets.all(8),\\n              child: CircularProgressIndicator(),\\n            ),\\n          ),\\n          error: (err, stack) => const Center(\\n            heightFactor: 1,\\n            child: Padding(\\n              padding: EdgeInsets.symmetric(vertical: 8),\\n              child: Text('Error'),\\n            ),\\n          ),\\n          data: (count) {\\n            return ListView.separated(\\n              shrinkWrap: true,\\n              itemCount: count,\\n              separatorBuilder: (context, _) => const Divider(height: 0),\\n              itemBuilder: (context, index) {\\n                return HookConsumer(\\n                  builder: (context, ref, child) {\\n                    final character = ref.watch(characterAtIndex(\\n                      CharacterOffset(offset: index, name: search),\\n                    ));\\n\\n                    return character.when(\\n                      loading: () {\\n                        return const Center(child: CircularProgressIndicator());\\n                      },\\n                      error: (err, stack) => const Center(child: Text('Error')),\\n                      data: (character) {\\n                        return ListTile(\\n                          visualDensity: VisualDensity.compact,\\n                          onTap: () {\\n                            Navigator.pushNamed(\\n                                context, '/characters/${character.id}');\\n                          },\\n                          title: Text(\\n                            character.name,\\n                            style: Theme.of(context).textTheme.bodyMedium,\\n                          ),\\n                        );\\n                      },\\n                    );\\n                  },\\n                );\\n              },\\n            );\\n          },\\n        );\\n  }\\n}\\n\\nclass _SearchHintContainer extends StatelessWidget {\\n  const _SearchHintContainer({\\n    Key? key,\\n    required this.theme,\\n    required this.child,\\n  }) : super(key: key);\\n\\n  final _SearchTheme theme;\\n  final Widget child;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Container(\\n      constraints: BoxConstraints(\\n        maxHeight: theme.height,\\n      ),\\n      margin: theme.searchMargin,\\n      child: Material(\\n        elevation: 16,\\n        borderRadius: theme.searchDecoration.borderRadius,\\n        clipBehavior: Clip.hardEdge,\\n        child: OverflowBox(\\n          alignment: Alignment.topLeft,\\n          maxHeight: theme.height,\\n          maxWidth: 300,\\n          child: child,\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\nclass _SearchbarView extends StatelessWidget {\\n  const _SearchbarView({\\n    Key? key,\\n    required this.theme,\\n    required this.isFocused,\\n    required this.textEditingController,\\n    required this.textFocusNode,\\n  }) : super(key: key);\\n\\n  final _SearchTheme theme;\\n  final bool isFocused;\\n  final TextEditingController textEditingController;\\n  final FocusNode textFocusNode;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Stack(\\n      alignment: Alignment.centerRight,\\n      children: [\\n        GestureDetector(\\n          // Don't unfocus when tapping the searchbar\\n          behavior: HitTestBehavior.opaque,\\n          onTap: () {},\\n          child: AnimatedContainer(\\n            duration: const Duration(milliseconds: 150),\\n            width: theme.width,\\n            height: 35,\\n            margin: theme.searchMargin,\\n            decoration: theme.searchDecoration,\\n          ),\\n        ),\\n        Positioned.fill(\\n          left: 12,\\n          right: 50,\\n          child: ExcludeSemantics(\\n            excluding: !isFocused,\\n            child: Align(\\n              alignment: Alignment.centerLeft,\\n              child: TextField(\\n                controller: textEditingController,\\n                focusNode: textFocusNode,\\n                scrollController: ScrollController(),\\n                decoration: const InputDecoration(\\n                  border: InputBorder.none,\\n                  hintText: 'Iron man',\\n                ),\\n              ),\\n            ),\\n          ),\\n        ),\\n        AnimatedTheme(\\n          data: isFocused //\\n              ? ThemeData.light()\\n              : ThemeData.dark(),\\n          child: AnimatedPadding(\\n            duration: const Duration(milliseconds: 150),\\n            padding: theme.iconPadding,\\n            child: IconButton(\\n              icon: const Icon(Icons.search),\\n              tooltip: 'Search by name',\\n              onPressed: textFocusNode.requestFocus,\\n            ),\\n          ),\\n        ),\\n      ],\\n    );\\n  }\\n}\\n\",\"path\":\"marvel/lib/src/widgets/search_bar.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\n\\nclass LoadingImage extends StatelessWidget {\\n  const LoadingImage({\\n    Key? key,\\n    required this.url,\\n  }) : super(key: key);\\n\\n  final String url;\\n  @override\\n  Widget build(BuildContext context) {\\n    return Image.network(\\n      url,\\n      fit: BoxFit.cover,\\n      width: double.infinity,\\n      height: double.infinity,\\n      errorBuilder: (c, err, stack) {\\n        return const Center(child: Text('error'));\\n      },\\n      frameBuilder: (c, image, frame, sync) {\\n        if (!sync && frame == null) {\\n          return const Center(child: CircularProgressIndicator());\\n        }\\n        return image;\\n      },\\n    );\\n  }\\n}\\n\",\"path\":\"marvel/lib/src/widgets/loading_image.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter_svg/flutter_svg.dart';\\n\\nfinal marvelLogo = SvgPicture.asset(\\n  'assets/marvel.svg',\\n  semanticsLabel: 'Marvel Logo',\\n);\\n\",\"path\":\"marvel/lib/src/widgets/marvel_logo.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:freezed_annotation/freezed_annotation.dart';\\n\\npart 'result.freezed.dart';\\n\\n@freezed\\nclass Result<T> with _$Result<T> {\\n  Result._();\\n  factory Result.data(T value) = _ResultData<T>;\\n  factory Result.error(Object error, [StackTrace? stackTrace]) =\\n      _ResultError<T>;\\n\\n  factory Result.guard(T Function() cb) {\\n    try {\\n      return Result.data(cb());\\n    } catch (err, stack) {\\n      return Result.error(err, stack);\\n    }\\n  }\\n\\n  static Future<Result<T>> guardFuture<T>(Future<T> Function() cb) async {\\n    try {\\n      return Result.data(await cb());\\n    } catch (err, stack) {\\n      return Result.error(err, stack);\\n    }\\n  }\\n\\n  Result<Res> chain<Res>(Res Function(T value) cb) {\\n    return when(\\n      data: (value) {\\n        try {\\n          return Result.data(cb(value));\\n        } catch (err, stack) {\\n          return Result.error(err, stack);\\n        }\\n      },\\n      error: Result.error,\\n    );\\n  }\\n\\n  T get dataOrThrow {\\n    return when(\\n      data: (value) => value,\\n      error: (err, stack) {\\n        // ignore: only_throw_errors\\n        throw err;\\n      },\\n    );\\n  }\\n}\\n\",\"path\":\"marvel/lib/src/result.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\n// ignore_for_file: non_constant_identifier_names, require_trailing_commas\\n\\npart of 'search.dart';\\n\\n// **************************************************************************\\n// RiverpodGenerator\\n// **************************************************************************\\n\\nString _$fetchPackagesHash() => r'46519fce4d1661e1358deac4d806374fa68f12c8';\\n\\n/// Copied from Dart SDK\\nclass _SystemHash {\\n  _SystemHash._();\\n\\n  static int combine(int hash, int value) {\\n    // ignore: parameter_assignments\\n    hash = 0x1fffffff & (hash + value);\\n    // ignore: parameter_assignments\\n    hash = 0x1fffffff & (hash + ((0x0007ffff & hash) << 10));\\n    return hash ^ (hash >> 6);\\n  }\\n\\n  static int finish(int hash) {\\n    // ignore: parameter_assignments\\n    hash = 0x1fffffff & (hash + ((0x03ffffff & hash) << 3));\\n    // ignore: parameter_assignments\\n    hash = hash ^ (hash >> 11);\\n    return 0x1fffffff & (hash + ((0x00003fff & hash) << 15));\\n  }\\n}\\n\\n/// See also [fetchPackages].\\n@ProviderFor(fetchPackages)\\nconst fetchPackagesProvider = FetchPackagesFamily();\\n\\n/// See also [fetchPackages].\\nclass FetchPackagesFamily extends Family<AsyncValue<List<Package>>> {\\n  /// See also [fetchPackages].\\n  const FetchPackagesFamily();\\n\\n  /// See also [fetchPackages].\\n  FetchPackagesProvider call({\\n    required int page,\\n    String search = '',\\n  }) {\\n    return FetchPackagesProvider(\\n      page: page,\\n      search: search,\\n    );\\n  }\\n\\n  @override\\n  FetchPackagesProvider getProviderOverride(\\n    covariant FetchPackagesProvider provider,\\n  ) {\\n    return call(\\n      page: provider.page,\\n      search: provider.search,\\n    );\\n  }\\n\\n  static const Iterable<ProviderOrFamily>? _dependencies = null;\\n\\n  @override\\n  Iterable<ProviderOrFamily>? get dependencies => _dependencies;\\n\\n  static const Iterable<ProviderOrFamily>? _allTransitiveDependencies = null;\\n\\n  @override\\n  Iterable<ProviderOrFamily>? get allTransitiveDependencies =>\\n      _allTransitiveDependencies;\\n\\n  @override\\n  String? get name => r'fetchPackagesProvider';\\n}\\n\\n/// See also [fetchPackages].\\nclass FetchPackagesProvider extends AutoDisposeFutureProvider<List<Package>> {\\n  /// See also [fetchPackages].\\n  FetchPackagesProvider({\\n    required int page,\\n    String search = '',\\n  }) : this._internal(\\n          (ref) => fetchPackages(\\n            ref as FetchPackagesRef,\\n            page: page,\\n            search: search,\\n          ),\\n          from: fetchPackagesProvider,\\n          name: r'fetchPackagesProvider',\\n          debugGetCreateSourceHash:\\n              const bool.fromEnvironment('dart.vm.product')\\n                  ? null\\n                  : _$fetchPackagesHash,\\n          dependencies: FetchPackagesFamily._dependencies,\\n          allTransitiveDependencies:\\n              FetchPackagesFamily._allTransitiveDependencies,\\n          page: page,\\n          search: search,\\n        );\\n\\n  FetchPackagesProvider._internal(\\n    super._createNotifier, {\\n    required super.name,\\n    required super.dependencies,\\n    required super.allTransitiveDependencies,\\n    required super.debugGetCreateSourceHash,\\n    required super.from,\\n    required this.page,\\n    required this.search,\\n  }) : super.internal();\\n\\n  final int page;\\n  final String search;\\n\\n  @override\\n  Override overrideWith(\\n    FutureOr<List<Package>> Function(FetchPackagesRef provider) create,\\n  ) {\\n    return ProviderOverride(\\n      origin: this,\\n      override: FetchPackagesProvider._internal(\\n        (ref) => create(ref as FetchPackagesRef),\\n        from: from,\\n        name: null,\\n        dependencies: null,\\n        allTransitiveDependencies: null,\\n        debugGetCreateSourceHash: null,\\n        page: page,\\n        search: search,\\n      ),\\n    );\\n  }\\n\\n  @override\\n  AutoDisposeFutureProviderElement<List<Package>> createElement() {\\n    return _FetchPackagesProviderElement(this);\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return other is FetchPackagesProvider &&\\n        other.page == page &&\\n        other.search == search;\\n  }\\n\\n  @override\\n  int get hashCode {\\n    var hash = _SystemHash.combine(0, runtimeType.hashCode);\\n    hash = _SystemHash.combine(hash, page.hashCode);\\n    hash = _SystemHash.combine(hash, search.hashCode);\\n\\n    return _SystemHash.finish(hash);\\n  }\\n}\\n\\nmixin FetchPackagesRef on AutoDisposeFutureProviderRef<List<Package>> {\\n  /// The parameter `page` of this provider.\\n  int get page;\\n\\n  /// The parameter `search` of this provider.\\n  String get search;\\n}\\n\\nclass _FetchPackagesProviderElement\\n    extends AutoDisposeFutureProviderElement<List<Package>>\\n    with FetchPackagesRef {\\n  _FetchPackagesProviderElement(super.provider);\\n\\n  @override\\n  int get page => (origin as FetchPackagesProvider).page;\\n  @override\\n  String get search => (origin as FetchPackagesProvider).search;\\n}\\n// ignore_for_file: type=lint\\n// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member\\n\",\"path\":\"pub/lib/search.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// coverage:ignore-file\\n// GENERATED CODE - DO NOT MODIFY BY HAND\\n// ignore_for_file: type=lint\\n// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark\\n\\npart of 'pub_repository.dart';\\n\\n// **************************************************************************\\n// FreezedGenerator\\n// **************************************************************************\\n\\nT _$identity<T>(T value) => value;\\n\\nfinal _privateConstructorUsedError = UnsupportedError(\\n    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\\\\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');\\n\\nPackageMetricsScore _$PackageMetricsScoreFromJson(Map<String, dynamic> json) {\\n  return _PackageMetricsScore.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$PackageMetricsScore {\\n  int get grantedPoints => throw _privateConstructorUsedError;\\n  int get maxPoints => throw _privateConstructorUsedError;\\n  int get likeCount => throw _privateConstructorUsedError;\\n  double get popularityScore => throw _privateConstructorUsedError;\\n  List<String> get tags => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $PackageMetricsScoreCopyWith<PackageMetricsScore> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $PackageMetricsScoreCopyWith<$Res> {\\n  factory $PackageMetricsScoreCopyWith(\\n          PackageMetricsScore value, $Res Function(PackageMetricsScore) then) =\\n      _$PackageMetricsScoreCopyWithImpl<$Res, PackageMetricsScore>;\\n  @useResult\\n  $Res call(\\n      {int grantedPoints,\\n      int maxPoints,\\n      int likeCount,\\n      double popularityScore,\\n      List<String> tags});\\n}\\n\\n/// @nodoc\\nclass _$PackageMetricsScoreCopyWithImpl<$Res, $Val extends PackageMetricsScore>\\n    implements $PackageMetricsScoreCopyWith<$Res> {\\n  _$PackageMetricsScoreCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? grantedPoints = null,\\n    Object? maxPoints = null,\\n    Object? likeCount = null,\\n    Object? popularityScore = null,\\n    Object? tags = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      grantedPoints: null == grantedPoints\\n          ? _value.grantedPoints\\n          : grantedPoints // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      maxPoints: null == maxPoints\\n          ? _value.maxPoints\\n          : maxPoints // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      likeCount: null == likeCount\\n          ? _value.likeCount\\n          : likeCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      popularityScore: null == popularityScore\\n          ? _value.popularityScore\\n          : popularityScore // ignore: cast_nullable_to_non_nullable\\n              as double,\\n      tags: null == tags\\n          ? _value.tags\\n          : tags // ignore: cast_nullable_to_non_nullable\\n              as List<String>,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$PackageMetricsScoreImplCopyWith<$Res>\\n    implements $PackageMetricsScoreCopyWith<$Res> {\\n  factory _$$PackageMetricsScoreImplCopyWith(_$PackageMetricsScoreImpl value,\\n          $Res Function(_$PackageMetricsScoreImpl) then) =\\n      __$$PackageMetricsScoreImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call(\\n      {int grantedPoints,\\n      int maxPoints,\\n      int likeCount,\\n      double popularityScore,\\n      List<String> tags});\\n}\\n\\n/// @nodoc\\nclass __$$PackageMetricsScoreImplCopyWithImpl<$Res>\\n    extends _$PackageMetricsScoreCopyWithImpl<$Res, _$PackageMetricsScoreImpl>\\n    implements _$$PackageMetricsScoreImplCopyWith<$Res> {\\n  __$$PackageMetricsScoreImplCopyWithImpl(_$PackageMetricsScoreImpl _value,\\n      $Res Function(_$PackageMetricsScoreImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? grantedPoints = null,\\n    Object? maxPoints = null,\\n    Object? likeCount = null,\\n    Object? popularityScore = null,\\n    Object? tags = null,\\n  }) {\\n    return _then(_$PackageMetricsScoreImpl(\\n      grantedPoints: null == grantedPoints\\n          ? _value.grantedPoints\\n          : grantedPoints // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      maxPoints: null == maxPoints\\n          ? _value.maxPoints\\n          : maxPoints // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      likeCount: null == likeCount\\n          ? _value.likeCount\\n          : likeCount // ignore: cast_nullable_to_non_nullable\\n              as int,\\n      popularityScore: null == popularityScore\\n          ? _value.popularityScore\\n          : popularityScore // ignore: cast_nullable_to_non_nullable\\n              as double,\\n      tags: null == tags\\n          ? _value._tags\\n          : tags // ignore: cast_nullable_to_non_nullable\\n              as List<String>,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$PackageMetricsScoreImpl\\n    with DiagnosticableTreeMixin\\n    implements _PackageMetricsScore {\\n  _$PackageMetricsScoreImpl(\\n      {required this.grantedPoints,\\n      required this.maxPoints,\\n      required this.likeCount,\\n      required this.popularityScore,\\n      required final List<String> tags})\\n      : _tags = tags;\\n\\n  factory _$PackageMetricsScoreImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$PackageMetricsScoreImplFromJson(json);\\n\\n  @override\\n  final int grantedPoints;\\n  @override\\n  final int maxPoints;\\n  @override\\n  final int likeCount;\\n  @override\\n  final double popularityScore;\\n  final List<String> _tags;\\n  @override\\n  List<String> get tags {\\n    if (_tags is EqualUnmodifiableListView) return _tags;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_tags);\\n  }\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'PackageMetricsScore(grantedPoints: $grantedPoints, maxPoints: $maxPoints, likeCount: $likeCount, popularityScore: $popularityScore, tags: $tags)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'PackageMetricsScore'))\\n      ..add(DiagnosticsProperty('grantedPoints', grantedPoints))\\n      ..add(DiagnosticsProperty('maxPoints', maxPoints))\\n      ..add(DiagnosticsProperty('likeCount', likeCount))\\n      ..add(DiagnosticsProperty('popularityScore', popularityScore))\\n      ..add(DiagnosticsProperty('tags', tags));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$PackageMetricsScoreImpl &&\\n            (identical(other.grantedPoints, grantedPoints) ||\\n                other.grantedPoints == grantedPoints) &&\\n            (identical(other.maxPoints, maxPoints) ||\\n                other.maxPoints == maxPoints) &&\\n            (identical(other.likeCount, likeCount) ||\\n                other.likeCount == likeCount) &&\\n            (identical(other.popularityScore, popularityScore) ||\\n                other.popularityScore == popularityScore) &&\\n            const DeepCollectionEquality().equals(other._tags, _tags));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, grantedPoints, maxPoints,\\n      likeCount, popularityScore, const DeepCollectionEquality().hash(_tags));\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$PackageMetricsScoreImplCopyWith<_$PackageMetricsScoreImpl> get copyWith =>\\n      __$$PackageMetricsScoreImplCopyWithImpl<_$PackageMetricsScoreImpl>(\\n          this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$PackageMetricsScoreImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _PackageMetricsScore implements PackageMetricsScore {\\n  factory _PackageMetricsScore(\\n      {required final int grantedPoints,\\n      required final int maxPoints,\\n      required final int likeCount,\\n      required final double popularityScore,\\n      required final List<String> tags}) = _$PackageMetricsScoreImpl;\\n\\n  factory _PackageMetricsScore.fromJson(Map<String, dynamic> json) =\\n      _$PackageMetricsScoreImpl.fromJson;\\n\\n  @override\\n  int get grantedPoints;\\n  @override\\n  int get maxPoints;\\n  @override\\n  int get likeCount;\\n  @override\\n  double get popularityScore;\\n  @override\\n  List<String> get tags;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$PackageMetricsScoreImplCopyWith<_$PackageMetricsScoreImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nPackageMetricsResponse _$PackageMetricsResponseFromJson(\\n    Map<String, dynamic> json) {\\n  return _PackageMetricsResponse.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$PackageMetricsResponse {\\n  PackageMetricsScore get score => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $PackageMetricsResponseCopyWith<PackageMetricsResponse> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $PackageMetricsResponseCopyWith<$Res> {\\n  factory $PackageMetricsResponseCopyWith(PackageMetricsResponse value,\\n          $Res Function(PackageMetricsResponse) then) =\\n      _$PackageMetricsResponseCopyWithImpl<$Res, PackageMetricsResponse>;\\n  @useResult\\n  $Res call({PackageMetricsScore score});\\n\\n  $PackageMetricsScoreCopyWith<$Res> get score;\\n}\\n\\n/// @nodoc\\nclass _$PackageMetricsResponseCopyWithImpl<$Res,\\n        $Val extends PackageMetricsResponse>\\n    implements $PackageMetricsResponseCopyWith<$Res> {\\n  _$PackageMetricsResponseCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? score = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      score: null == score\\n          ? _value.score\\n          : score // ignore: cast_nullable_to_non_nullable\\n              as PackageMetricsScore,\\n    ) as $Val);\\n  }\\n\\n  @override\\n  @pragma('vm:prefer-inline')\\n  $PackageMetricsScoreCopyWith<$Res> get score {\\n    return $PackageMetricsScoreCopyWith<$Res>(_value.score, (value) {\\n      return _then(_value.copyWith(score: value) as $Val);\\n    });\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$PackageMetricsResponseImplCopyWith<$Res>\\n    implements $PackageMetricsResponseCopyWith<$Res> {\\n  factory _$$PackageMetricsResponseImplCopyWith(\\n          _$PackageMetricsResponseImpl value,\\n          $Res Function(_$PackageMetricsResponseImpl) then) =\\n      __$$PackageMetricsResponseImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({PackageMetricsScore score});\\n\\n  @override\\n  $PackageMetricsScoreCopyWith<$Res> get score;\\n}\\n\\n/// @nodoc\\nclass __$$PackageMetricsResponseImplCopyWithImpl<$Res>\\n    extends _$PackageMetricsResponseCopyWithImpl<$Res,\\n        _$PackageMetricsResponseImpl>\\n    implements _$$PackageMetricsResponseImplCopyWith<$Res> {\\n  __$$PackageMetricsResponseImplCopyWithImpl(\\n      _$PackageMetricsResponseImpl _value,\\n      $Res Function(_$PackageMetricsResponseImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? score = null,\\n  }) {\\n    return _then(_$PackageMetricsResponseImpl(\\n      score: null == score\\n          ? _value.score\\n          : score // ignore: cast_nullable_to_non_nullable\\n              as PackageMetricsScore,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$PackageMetricsResponseImpl\\n    with DiagnosticableTreeMixin\\n    implements _PackageMetricsResponse {\\n  _$PackageMetricsResponseImpl({required this.score});\\n\\n  factory _$PackageMetricsResponseImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$PackageMetricsResponseImplFromJson(json);\\n\\n  @override\\n  final PackageMetricsScore score;\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'PackageMetricsResponse(score: $score)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'PackageMetricsResponse'))\\n      ..add(DiagnosticsProperty('score', score));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$PackageMetricsResponseImpl &&\\n            (identical(other.score, score) || other.score == score));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, score);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$PackageMetricsResponseImplCopyWith<_$PackageMetricsResponseImpl>\\n      get copyWith => __$$PackageMetricsResponseImplCopyWithImpl<\\n          _$PackageMetricsResponseImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$PackageMetricsResponseImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _PackageMetricsResponse implements PackageMetricsResponse {\\n  factory _PackageMetricsResponse({required final PackageMetricsScore score}) =\\n      _$PackageMetricsResponseImpl;\\n\\n  factory _PackageMetricsResponse.fromJson(Map<String, dynamic> json) =\\n      _$PackageMetricsResponseImpl.fromJson;\\n\\n  @override\\n  PackageMetricsScore get score;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$PackageMetricsResponseImplCopyWith<_$PackageMetricsResponseImpl>\\n      get copyWith => throw _privateConstructorUsedError;\\n}\\n\\nPackageDetails _$PackageDetailsFromJson(Map<String, dynamic> json) {\\n  return _PackageDetails.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$PackageDetails {\\n  String get version => throw _privateConstructorUsedError;\\n  Pubspec get pubspec => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $PackageDetailsCopyWith<PackageDetails> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $PackageDetailsCopyWith<$Res> {\\n  factory $PackageDetailsCopyWith(\\n          PackageDetails value, $Res Function(PackageDetails) then) =\\n      _$PackageDetailsCopyWithImpl<$Res, PackageDetails>;\\n  @useResult\\n  $Res call({String version, Pubspec pubspec});\\n}\\n\\n/// @nodoc\\nclass _$PackageDetailsCopyWithImpl<$Res, $Val extends PackageDetails>\\n    implements $PackageDetailsCopyWith<$Res> {\\n  _$PackageDetailsCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? version = null,\\n    Object? pubspec = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      version: null == version\\n          ? _value.version\\n          : version // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      pubspec: null == pubspec\\n          ? _value.pubspec\\n          : pubspec // ignore: cast_nullable_to_non_nullable\\n              as Pubspec,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$PackageDetailsImplCopyWith<$Res>\\n    implements $PackageDetailsCopyWith<$Res> {\\n  factory _$$PackageDetailsImplCopyWith(_$PackageDetailsImpl value,\\n          $Res Function(_$PackageDetailsImpl) then) =\\n      __$$PackageDetailsImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({String version, Pubspec pubspec});\\n}\\n\\n/// @nodoc\\nclass __$$PackageDetailsImplCopyWithImpl<$Res>\\n    extends _$PackageDetailsCopyWithImpl<$Res, _$PackageDetailsImpl>\\n    implements _$$PackageDetailsImplCopyWith<$Res> {\\n  __$$PackageDetailsImplCopyWithImpl(\\n      _$PackageDetailsImpl _value, $Res Function(_$PackageDetailsImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? version = null,\\n    Object? pubspec = null,\\n  }) {\\n    return _then(_$PackageDetailsImpl(\\n      version: null == version\\n          ? _value.version\\n          : version // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      pubspec: null == pubspec\\n          ? _value.pubspec\\n          : pubspec // ignore: cast_nullable_to_non_nullable\\n              as Pubspec,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$PackageDetailsImpl\\n    with DiagnosticableTreeMixin\\n    implements _PackageDetails {\\n  _$PackageDetailsImpl({required this.version, required this.pubspec});\\n\\n  factory _$PackageDetailsImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$PackageDetailsImplFromJson(json);\\n\\n  @override\\n  final String version;\\n  @override\\n  final Pubspec pubspec;\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'PackageDetails(version: $version, pubspec: $pubspec)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'PackageDetails'))\\n      ..add(DiagnosticsProperty('version', version))\\n      ..add(DiagnosticsProperty('pubspec', pubspec));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$PackageDetailsImpl &&\\n            (identical(other.version, version) || other.version == version) &&\\n            (identical(other.pubspec, pubspec) || other.pubspec == pubspec));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, version, pubspec);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$PackageDetailsImplCopyWith<_$PackageDetailsImpl> get copyWith =>\\n      __$$PackageDetailsImplCopyWithImpl<_$PackageDetailsImpl>(\\n          this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$PackageDetailsImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _PackageDetails implements PackageDetails {\\n  factory _PackageDetails(\\n      {required final String version,\\n      required final Pubspec pubspec}) = _$PackageDetailsImpl;\\n\\n  factory _PackageDetails.fromJson(Map<String, dynamic> json) =\\n      _$PackageDetailsImpl.fromJson;\\n\\n  @override\\n  String get version;\\n  @override\\n  Pubspec get pubspec;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$PackageDetailsImplCopyWith<_$PackageDetailsImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nPackage _$PackageFromJson(Map<String, dynamic> json) {\\n  return _Package.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$Package {\\n  String get name => throw _privateConstructorUsedError;\\n  PackageDetails get latest => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $PackageCopyWith<Package> get copyWith => throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $PackageCopyWith<$Res> {\\n  factory $PackageCopyWith(Package value, $Res Function(Package) then) =\\n      _$PackageCopyWithImpl<$Res, Package>;\\n  @useResult\\n  $Res call({String name, PackageDetails latest});\\n\\n  $PackageDetailsCopyWith<$Res> get latest;\\n}\\n\\n/// @nodoc\\nclass _$PackageCopyWithImpl<$Res, $Val extends Package>\\n    implements $PackageCopyWith<$Res> {\\n  _$PackageCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? name = null,\\n    Object? latest = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      name: null == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      latest: null == latest\\n          ? _value.latest\\n          : latest // ignore: cast_nullable_to_non_nullable\\n              as PackageDetails,\\n    ) as $Val);\\n  }\\n\\n  @override\\n  @pragma('vm:prefer-inline')\\n  $PackageDetailsCopyWith<$Res> get latest {\\n    return $PackageDetailsCopyWith<$Res>(_value.latest, (value) {\\n      return _then(_value.copyWith(latest: value) as $Val);\\n    });\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$PackageImplCopyWith<$Res> implements $PackageCopyWith<$Res> {\\n  factory _$$PackageImplCopyWith(\\n          _$PackageImpl value, $Res Function(_$PackageImpl) then) =\\n      __$$PackageImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({String name, PackageDetails latest});\\n\\n  @override\\n  $PackageDetailsCopyWith<$Res> get latest;\\n}\\n\\n/// @nodoc\\nclass __$$PackageImplCopyWithImpl<$Res>\\n    extends _$PackageCopyWithImpl<$Res, _$PackageImpl>\\n    implements _$$PackageImplCopyWith<$Res> {\\n  __$$PackageImplCopyWithImpl(\\n      _$PackageImpl _value, $Res Function(_$PackageImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? name = null,\\n    Object? latest = null,\\n  }) {\\n    return _then(_$PackageImpl(\\n      name: null == name\\n          ? _value.name\\n          : name // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      latest: null == latest\\n          ? _value.latest\\n          : latest // ignore: cast_nullable_to_non_nullable\\n              as PackageDetails,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$PackageImpl with DiagnosticableTreeMixin implements _Package {\\n  _$PackageImpl({required this.name, required this.latest});\\n\\n  factory _$PackageImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$PackageImplFromJson(json);\\n\\n  @override\\n  final String name;\\n  @override\\n  final PackageDetails latest;\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'Package(name: $name, latest: $latest)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'Package'))\\n      ..add(DiagnosticsProperty('name', name))\\n      ..add(DiagnosticsProperty('latest', latest));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$PackageImpl &&\\n            (identical(other.name, name) || other.name == name) &&\\n            (identical(other.latest, latest) || other.latest == latest));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, name, latest);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$PackageImplCopyWith<_$PackageImpl> get copyWith =>\\n      __$$PackageImplCopyWithImpl<_$PackageImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$PackageImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _Package implements Package {\\n  factory _Package(\\n      {required final String name,\\n      required final PackageDetails latest}) = _$PackageImpl;\\n\\n  factory _Package.fromJson(Map<String, dynamic> json) = _$PackageImpl.fromJson;\\n\\n  @override\\n  String get name;\\n  @override\\n  PackageDetails get latest;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$PackageImplCopyWith<_$PackageImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nLikedPackage _$LikedPackageFromJson(Map<String, dynamic> json) {\\n  return _LikedPackage.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$LikedPackage {\\n  String get package => throw _privateConstructorUsedError;\\n  bool get liked => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $LikedPackageCopyWith<LikedPackage> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $LikedPackageCopyWith<$Res> {\\n  factory $LikedPackageCopyWith(\\n          LikedPackage value, $Res Function(LikedPackage) then) =\\n      _$LikedPackageCopyWithImpl<$Res, LikedPackage>;\\n  @useResult\\n  $Res call({String package, bool liked});\\n}\\n\\n/// @nodoc\\nclass _$LikedPackageCopyWithImpl<$Res, $Val extends LikedPackage>\\n    implements $LikedPackageCopyWith<$Res> {\\n  _$LikedPackageCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? package = null,\\n    Object? liked = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      package: null == package\\n          ? _value.package\\n          : package // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      liked: null == liked\\n          ? _value.liked\\n          : liked // ignore: cast_nullable_to_non_nullable\\n              as bool,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$LikedPackageImplCopyWith<$Res>\\n    implements $LikedPackageCopyWith<$Res> {\\n  factory _$$LikedPackageImplCopyWith(\\n          _$LikedPackageImpl value, $Res Function(_$LikedPackageImpl) then) =\\n      __$$LikedPackageImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({String package, bool liked});\\n}\\n\\n/// @nodoc\\nclass __$$LikedPackageImplCopyWithImpl<$Res>\\n    extends _$LikedPackageCopyWithImpl<$Res, _$LikedPackageImpl>\\n    implements _$$LikedPackageImplCopyWith<$Res> {\\n  __$$LikedPackageImplCopyWithImpl(\\n      _$LikedPackageImpl _value, $Res Function(_$LikedPackageImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? package = null,\\n    Object? liked = null,\\n  }) {\\n    return _then(_$LikedPackageImpl(\\n      package: null == package\\n          ? _value.package\\n          : package // ignore: cast_nullable_to_non_nullable\\n              as String,\\n      liked: null == liked\\n          ? _value.liked\\n          : liked // ignore: cast_nullable_to_non_nullable\\n              as bool,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$LikedPackageImpl with DiagnosticableTreeMixin implements _LikedPackage {\\n  _$LikedPackageImpl({required this.package, required this.liked});\\n\\n  factory _$LikedPackageImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$LikedPackageImplFromJson(json);\\n\\n  @override\\n  final String package;\\n  @override\\n  final bool liked;\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'LikedPackage(package: $package, liked: $liked)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'LikedPackage'))\\n      ..add(DiagnosticsProperty('package', package))\\n      ..add(DiagnosticsProperty('liked', liked));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$LikedPackageImpl &&\\n            (identical(other.package, package) || other.package == package) &&\\n            (identical(other.liked, liked) || other.liked == liked));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, package, liked);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$LikedPackageImplCopyWith<_$LikedPackageImpl> get copyWith =>\\n      __$$LikedPackageImplCopyWithImpl<_$LikedPackageImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$LikedPackageImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _LikedPackage implements LikedPackage {\\n  factory _LikedPackage(\\n      {required final String package,\\n      required final bool liked}) = _$LikedPackageImpl;\\n\\n  factory _LikedPackage.fromJson(Map<String, dynamic> json) =\\n      _$LikedPackageImpl.fromJson;\\n\\n  @override\\n  String get package;\\n  @override\\n  bool get liked;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$LikedPackageImplCopyWith<_$LikedPackageImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nLikedPackagesResponse _$LikedPackagesResponseFromJson(\\n    Map<String, dynamic> json) {\\n  return _LikesPackagesResponse.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$LikedPackagesResponse {\\n  List<LikedPackage> get likedPackages => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $LikedPackagesResponseCopyWith<LikedPackagesResponse> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $LikedPackagesResponseCopyWith<$Res> {\\n  factory $LikedPackagesResponseCopyWith(LikedPackagesResponse value,\\n          $Res Function(LikedPackagesResponse) then) =\\n      _$LikedPackagesResponseCopyWithImpl<$Res, LikedPackagesResponse>;\\n  @useResult\\n  $Res call({List<LikedPackage> likedPackages});\\n}\\n\\n/// @nodoc\\nclass _$LikedPackagesResponseCopyWithImpl<$Res,\\n        $Val extends LikedPackagesResponse>\\n    implements $LikedPackagesResponseCopyWith<$Res> {\\n  _$LikedPackagesResponseCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? likedPackages = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      likedPackages: null == likedPackages\\n          ? _value.likedPackages\\n          : likedPackages // ignore: cast_nullable_to_non_nullable\\n              as List<LikedPackage>,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$LikesPackagesResponseImplCopyWith<$Res>\\n    implements $LikedPackagesResponseCopyWith<$Res> {\\n  factory _$$LikesPackagesResponseImplCopyWith(\\n          _$LikesPackagesResponseImpl value,\\n          $Res Function(_$LikesPackagesResponseImpl) then) =\\n      __$$LikesPackagesResponseImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({List<LikedPackage> likedPackages});\\n}\\n\\n/// @nodoc\\nclass __$$LikesPackagesResponseImplCopyWithImpl<$Res>\\n    extends _$LikedPackagesResponseCopyWithImpl<$Res,\\n        _$LikesPackagesResponseImpl>\\n    implements _$$LikesPackagesResponseImplCopyWith<$Res> {\\n  __$$LikesPackagesResponseImplCopyWithImpl(_$LikesPackagesResponseImpl _value,\\n      $Res Function(_$LikesPackagesResponseImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? likedPackages = null,\\n  }) {\\n    return _then(_$LikesPackagesResponseImpl(\\n      likedPackages: null == likedPackages\\n          ? _value._likedPackages\\n          : likedPackages // ignore: cast_nullable_to_non_nullable\\n              as List<LikedPackage>,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$LikesPackagesResponseImpl\\n    with DiagnosticableTreeMixin\\n    implements _LikesPackagesResponse {\\n  _$LikesPackagesResponseImpl({required final List<LikedPackage> likedPackages})\\n      : _likedPackages = likedPackages;\\n\\n  factory _$LikesPackagesResponseImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$LikesPackagesResponseImplFromJson(json);\\n\\n  final List<LikedPackage> _likedPackages;\\n  @override\\n  List<LikedPackage> get likedPackages {\\n    if (_likedPackages is EqualUnmodifiableListView) return _likedPackages;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_likedPackages);\\n  }\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'LikedPackagesResponse(likedPackages: $likedPackages)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'LikedPackagesResponse'))\\n      ..add(DiagnosticsProperty('likedPackages', likedPackages));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$LikesPackagesResponseImpl &&\\n            const DeepCollectionEquality()\\n                .equals(other._likedPackages, _likedPackages));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(\\n      runtimeType, const DeepCollectionEquality().hash(_likedPackages));\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$LikesPackagesResponseImplCopyWith<_$LikesPackagesResponseImpl>\\n      get copyWith => __$$LikesPackagesResponseImplCopyWithImpl<\\n          _$LikesPackagesResponseImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$LikesPackagesResponseImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _LikesPackagesResponse implements LikedPackagesResponse {\\n  factory _LikesPackagesResponse(\\n          {required final List<LikedPackage> likedPackages}) =\\n      _$LikesPackagesResponseImpl;\\n\\n  factory _LikesPackagesResponse.fromJson(Map<String, dynamic> json) =\\n      _$LikesPackagesResponseImpl.fromJson;\\n\\n  @override\\n  List<LikedPackage> get likedPackages;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$LikesPackagesResponseImplCopyWith<_$LikesPackagesResponseImpl>\\n      get copyWith => throw _privateConstructorUsedError;\\n}\\n\\nPubPackagesResponse _$PubPackagesResponseFromJson(Map<String, dynamic> json) {\\n  return _PubPackagesResponse.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$PubPackagesResponse {\\n  List<Package> get packages => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $PubPackagesResponseCopyWith<PubPackagesResponse> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $PubPackagesResponseCopyWith<$Res> {\\n  factory $PubPackagesResponseCopyWith(\\n          PubPackagesResponse value, $Res Function(PubPackagesResponse) then) =\\n      _$PubPackagesResponseCopyWithImpl<$Res, PubPackagesResponse>;\\n  @useResult\\n  $Res call({List<Package> packages});\\n}\\n\\n/// @nodoc\\nclass _$PubPackagesResponseCopyWithImpl<$Res, $Val extends PubPackagesResponse>\\n    implements $PubPackagesResponseCopyWith<$Res> {\\n  _$PubPackagesResponseCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? packages = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      packages: null == packages\\n          ? _value.packages\\n          : packages // ignore: cast_nullable_to_non_nullable\\n              as List<Package>,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$PubPackagesResponseImplCopyWith<$Res>\\n    implements $PubPackagesResponseCopyWith<$Res> {\\n  factory _$$PubPackagesResponseImplCopyWith(_$PubPackagesResponseImpl value,\\n          $Res Function(_$PubPackagesResponseImpl) then) =\\n      __$$PubPackagesResponseImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({List<Package> packages});\\n}\\n\\n/// @nodoc\\nclass __$$PubPackagesResponseImplCopyWithImpl<$Res>\\n    extends _$PubPackagesResponseCopyWithImpl<$Res, _$PubPackagesResponseImpl>\\n    implements _$$PubPackagesResponseImplCopyWith<$Res> {\\n  __$$PubPackagesResponseImplCopyWithImpl(_$PubPackagesResponseImpl _value,\\n      $Res Function(_$PubPackagesResponseImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? packages = null,\\n  }) {\\n    return _then(_$PubPackagesResponseImpl(\\n      packages: null == packages\\n          ? _value._packages\\n          : packages // ignore: cast_nullable_to_non_nullable\\n              as List<Package>,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$PubPackagesResponseImpl\\n    with DiagnosticableTreeMixin\\n    implements _PubPackagesResponse {\\n  _$PubPackagesResponseImpl({required final List<Package> packages})\\n      : _packages = packages;\\n\\n  factory _$PubPackagesResponseImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$PubPackagesResponseImplFromJson(json);\\n\\n  final List<Package> _packages;\\n  @override\\n  List<Package> get packages {\\n    if (_packages is EqualUnmodifiableListView) return _packages;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_packages);\\n  }\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'PubPackagesResponse(packages: $packages)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'PubPackagesResponse'))\\n      ..add(DiagnosticsProperty('packages', packages));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$PubPackagesResponseImpl &&\\n            const DeepCollectionEquality().equals(other._packages, _packages));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode =>\\n      Object.hash(runtimeType, const DeepCollectionEquality().hash(_packages));\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$PubPackagesResponseImplCopyWith<_$PubPackagesResponseImpl> get copyWith =>\\n      __$$PubPackagesResponseImplCopyWithImpl<_$PubPackagesResponseImpl>(\\n          this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$PubPackagesResponseImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _PubPackagesResponse implements PubPackagesResponse {\\n  factory _PubPackagesResponse({required final List<Package> packages}) =\\n      _$PubPackagesResponseImpl;\\n\\n  factory _PubPackagesResponse.fromJson(Map<String, dynamic> json) =\\n      _$PubPackagesResponseImpl.fromJson;\\n\\n  @override\\n  List<Package> get packages;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$PubPackagesResponseImplCopyWith<_$PubPackagesResponseImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nSearchPackage _$SearchPackageFromJson(Map<String, dynamic> json) {\\n  return _SearchPackage.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$SearchPackage {\\n  String get package => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $SearchPackageCopyWith<SearchPackage> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $SearchPackageCopyWith<$Res> {\\n  factory $SearchPackageCopyWith(\\n          SearchPackage value, $Res Function(SearchPackage) then) =\\n      _$SearchPackageCopyWithImpl<$Res, SearchPackage>;\\n  @useResult\\n  $Res call({String package});\\n}\\n\\n/// @nodoc\\nclass _$SearchPackageCopyWithImpl<$Res, $Val extends SearchPackage>\\n    implements $SearchPackageCopyWith<$Res> {\\n  _$SearchPackageCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? package = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      package: null == package\\n          ? _value.package\\n          : package // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$SearchPackageImplCopyWith<$Res>\\n    implements $SearchPackageCopyWith<$Res> {\\n  factory _$$SearchPackageImplCopyWith(\\n          _$SearchPackageImpl value, $Res Function(_$SearchPackageImpl) then) =\\n      __$$SearchPackageImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({String package});\\n}\\n\\n/// @nodoc\\nclass __$$SearchPackageImplCopyWithImpl<$Res>\\n    extends _$SearchPackageCopyWithImpl<$Res, _$SearchPackageImpl>\\n    implements _$$SearchPackageImplCopyWith<$Res> {\\n  __$$SearchPackageImplCopyWithImpl(\\n      _$SearchPackageImpl _value, $Res Function(_$SearchPackageImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? package = null,\\n  }) {\\n    return _then(_$SearchPackageImpl(\\n      package: null == package\\n          ? _value.package\\n          : package // ignore: cast_nullable_to_non_nullable\\n              as String,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$SearchPackageImpl\\n    with DiagnosticableTreeMixin\\n    implements _SearchPackage {\\n  _$SearchPackageImpl({required this.package});\\n\\n  factory _$SearchPackageImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$SearchPackageImplFromJson(json);\\n\\n  @override\\n  final String package;\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'SearchPackage(package: $package)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'SearchPackage'))\\n      ..add(DiagnosticsProperty('package', package));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$SearchPackageImpl &&\\n            (identical(other.package, package) || other.package == package));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode => Object.hash(runtimeType, package);\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$SearchPackageImplCopyWith<_$SearchPackageImpl> get copyWith =>\\n      __$$SearchPackageImplCopyWithImpl<_$SearchPackageImpl>(this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$SearchPackageImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _SearchPackage implements SearchPackage {\\n  factory _SearchPackage({required final String package}) = _$SearchPackageImpl;\\n\\n  factory _SearchPackage.fromJson(Map<String, dynamic> json) =\\n      _$SearchPackageImpl.fromJson;\\n\\n  @override\\n  String get package;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$SearchPackageImplCopyWith<_$SearchPackageImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\nPubSearchResponse _$PubSearchResponseFromJson(Map<String, dynamic> json) {\\n  return _PubSearchResponse.fromJson(json);\\n}\\n\\n/// @nodoc\\nmixin _$PubSearchResponse {\\n  List<SearchPackage> get packages => throw _privateConstructorUsedError;\\n\\n  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;\\n  @JsonKey(ignore: true)\\n  $PubSearchResponseCopyWith<PubSearchResponse> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\\n/// @nodoc\\nabstract class $PubSearchResponseCopyWith<$Res> {\\n  factory $PubSearchResponseCopyWith(\\n          PubSearchResponse value, $Res Function(PubSearchResponse) then) =\\n      _$PubSearchResponseCopyWithImpl<$Res, PubSearchResponse>;\\n  @useResult\\n  $Res call({List<SearchPackage> packages});\\n}\\n\\n/// @nodoc\\nclass _$PubSearchResponseCopyWithImpl<$Res, $Val extends PubSearchResponse>\\n    implements $PubSearchResponseCopyWith<$Res> {\\n  _$PubSearchResponseCopyWithImpl(this._value, this._then);\\n\\n  // ignore: unused_field\\n  final $Val _value;\\n  // ignore: unused_field\\n  final $Res Function($Val) _then;\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? packages = null,\\n  }) {\\n    return _then(_value.copyWith(\\n      packages: null == packages\\n          ? _value.packages\\n          : packages // ignore: cast_nullable_to_non_nullable\\n              as List<SearchPackage>,\\n    ) as $Val);\\n  }\\n}\\n\\n/// @nodoc\\nabstract class _$$PubSearchResponseImplCopyWith<$Res>\\n    implements $PubSearchResponseCopyWith<$Res> {\\n  factory _$$PubSearchResponseImplCopyWith(_$PubSearchResponseImpl value,\\n          $Res Function(_$PubSearchResponseImpl) then) =\\n      __$$PubSearchResponseImplCopyWithImpl<$Res>;\\n  @override\\n  @useResult\\n  $Res call({List<SearchPackage> packages});\\n}\\n\\n/// @nodoc\\nclass __$$PubSearchResponseImplCopyWithImpl<$Res>\\n    extends _$PubSearchResponseCopyWithImpl<$Res, _$PubSearchResponseImpl>\\n    implements _$$PubSearchResponseImplCopyWith<$Res> {\\n  __$$PubSearchResponseImplCopyWithImpl(_$PubSearchResponseImpl _value,\\n      $Res Function(_$PubSearchResponseImpl) _then)\\n      : super(_value, _then);\\n\\n  @pragma('vm:prefer-inline')\\n  @override\\n  $Res call({\\n    Object? packages = null,\\n  }) {\\n    return _then(_$PubSearchResponseImpl(\\n      packages: null == packages\\n          ? _value._packages\\n          : packages // ignore: cast_nullable_to_non_nullable\\n              as List<SearchPackage>,\\n    ));\\n  }\\n}\\n\\n/// @nodoc\\n@JsonSerializable()\\nclass _$PubSearchResponseImpl\\n    with DiagnosticableTreeMixin\\n    implements _PubSearchResponse {\\n  _$PubSearchResponseImpl({required final List<SearchPackage> packages})\\n      : _packages = packages;\\n\\n  factory _$PubSearchResponseImpl.fromJson(Map<String, dynamic> json) =>\\n      _$$PubSearchResponseImplFromJson(json);\\n\\n  final List<SearchPackage> _packages;\\n  @override\\n  List<SearchPackage> get packages {\\n    if (_packages is EqualUnmodifiableListView) return _packages;\\n    // ignore: implicit_dynamic_type\\n    return EqualUnmodifiableListView(_packages);\\n  }\\n\\n  @override\\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\\n    return 'PubSearchResponse(packages: $packages)';\\n  }\\n\\n  @override\\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\\n    super.debugFillProperties(properties);\\n    properties\\n      ..add(DiagnosticsProperty('type', 'PubSearchResponse'))\\n      ..add(DiagnosticsProperty('packages', packages));\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return identical(this, other) ||\\n        (other.runtimeType == runtimeType &&\\n            other is _$PubSearchResponseImpl &&\\n            const DeepCollectionEquality().equals(other._packages, _packages));\\n  }\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  int get hashCode =>\\n      Object.hash(runtimeType, const DeepCollectionEquality().hash(_packages));\\n\\n  @JsonKey(ignore: true)\\n  @override\\n  @pragma('vm:prefer-inline')\\n  _$$PubSearchResponseImplCopyWith<_$PubSearchResponseImpl> get copyWith =>\\n      __$$PubSearchResponseImplCopyWithImpl<_$PubSearchResponseImpl>(\\n          this, _$identity);\\n\\n  @override\\n  Map<String, dynamic> toJson() {\\n    return _$$PubSearchResponseImplToJson(\\n      this,\\n    );\\n  }\\n}\\n\\nabstract class _PubSearchResponse implements PubSearchResponse {\\n  factory _PubSearchResponse({required final List<SearchPackage> packages}) =\\n      _$PubSearchResponseImpl;\\n\\n  factory _PubSearchResponse.fromJson(Map<String, dynamic> json) =\\n      _$PubSearchResponseImpl.fromJson;\\n\\n  @override\\n  List<SearchPackage> get packages;\\n  @override\\n  @JsonKey(ignore: true)\\n  _$$PubSearchResponseImplCopyWith<_$PubSearchResponseImpl> get copyWith =>\\n      throw _privateConstructorUsedError;\\n}\\n\",\"path\":\"pub/lib/pub_repository.freezed.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\n// ignore_for_file: non_constant_identifier_names, require_trailing_commas\\n\\npart of 'pub_repository.dart';\\n\\n// **************************************************************************\\n// JsonSerializableGenerator\\n// **************************************************************************\\n\\n_$PackageMetricsScoreImpl _$$PackageMetricsScoreImplFromJson(\\n        Map<String, dynamic> json) =>\\n    _$PackageMetricsScoreImpl(\\n      grantedPoints: json['grantedPoints'] as int,\\n      maxPoints: json['maxPoints'] as int,\\n      likeCount: json['likeCount'] as int,\\n      popularityScore: (json['popularityScore'] as num).toDouble(),\\n      tags: (json['tags'] as List<dynamic>).map((e) => e as String).toList(),\\n    );\\n\\nMap<String, dynamic> _$$PackageMetricsScoreImplToJson(\\n        _$PackageMetricsScoreImpl instance) =>\\n    <String, dynamic>{\\n      'grantedPoints': instance.grantedPoints,\\n      'maxPoints': instance.maxPoints,\\n      'likeCount': instance.likeCount,\\n      'popularityScore': instance.popularityScore,\\n      'tags': instance.tags,\\n    };\\n\\n_$PackageMetricsResponseImpl _$$PackageMetricsResponseImplFromJson(\\n        Map<String, dynamic> json) =>\\n    _$PackageMetricsResponseImpl(\\n      score:\\n          PackageMetricsScore.fromJson(json['score'] as Map<String, dynamic>),\\n    );\\n\\nMap<String, dynamic> _$$PackageMetricsResponseImplToJson(\\n        _$PackageMetricsResponseImpl instance) =>\\n    <String, dynamic>{\\n      'score': instance.score,\\n    };\\n\\n_$PackageDetailsImpl _$$PackageDetailsImplFromJson(Map<String, dynamic> json) =>\\n    _$PackageDetailsImpl(\\n      version: json['version'] as String,\\n      pubspec: Pubspec.fromJson(json['pubspec'] as Map<String, dynamic>),\\n    );\\n\\nMap<String, dynamic> _$$PackageDetailsImplToJson(\\n        _$PackageDetailsImpl instance) =>\\n    <String, dynamic>{\\n      'version': instance.version,\\n      'pubspec': instance.pubspec,\\n    };\\n\\n_$PackageImpl _$$PackageImplFromJson(Map<String, dynamic> json) =>\\n    _$PackageImpl(\\n      name: json['name'] as String,\\n      latest: PackageDetails.fromJson(json['latest'] as Map<String, dynamic>),\\n    );\\n\\nMap<String, dynamic> _$$PackageImplToJson(_$PackageImpl instance) =>\\n    <String, dynamic>{\\n      'name': instance.name,\\n      'latest': instance.latest,\\n    };\\n\\n_$LikedPackageImpl _$$LikedPackageImplFromJson(Map<String, dynamic> json) =>\\n    _$LikedPackageImpl(\\n      package: json['package'] as String,\\n      liked: json['liked'] as bool,\\n    );\\n\\nMap<String, dynamic> _$$LikedPackageImplToJson(_$LikedPackageImpl instance) =>\\n    <String, dynamic>{\\n      'package': instance.package,\\n      'liked': instance.liked,\\n    };\\n\\n_$LikesPackagesResponseImpl _$$LikesPackagesResponseImplFromJson(\\n        Map<String, dynamic> json) =>\\n    _$LikesPackagesResponseImpl(\\n      likedPackages: (json['likedPackages'] as List<dynamic>)\\n          .map((e) => LikedPackage.fromJson(e as Map<String, dynamic>))\\n          .toList(),\\n    );\\n\\nMap<String, dynamic> _$$LikesPackagesResponseImplToJson(\\n        _$LikesPackagesResponseImpl instance) =>\\n    <String, dynamic>{\\n      'likedPackages': instance.likedPackages,\\n    };\\n\\n_$PubPackagesResponseImpl _$$PubPackagesResponseImplFromJson(\\n        Map<String, dynamic> json) =>\\n    _$PubPackagesResponseImpl(\\n      packages: (json['packages'] as List<dynamic>)\\n          .map((e) => Package.fromJson(e as Map<String, dynamic>))\\n          .toList(),\\n    );\\n\\nMap<String, dynamic> _$$PubPackagesResponseImplToJson(\\n        _$PubPackagesResponseImpl instance) =>\\n    <String, dynamic>{\\n      'packages': instance.packages,\\n    };\\n\\n_$SearchPackageImpl _$$SearchPackageImplFromJson(Map<String, dynamic> json) =>\\n    _$SearchPackageImpl(\\n      package: json['package'] as String,\\n    );\\n\\nMap<String, dynamic> _$$SearchPackageImplToJson(_$SearchPackageImpl instance) =>\\n    <String, dynamic>{\\n      'package': instance.package,\\n    };\\n\\n_$PubSearchResponseImpl _$$PubSearchResponseImplFromJson(\\n        Map<String, dynamic> json) =>\\n    _$PubSearchResponseImpl(\\n      packages: (json['packages'] as List<dynamic>)\\n          .map((e) => SearchPackage.fromJson(e as Map<String, dynamic>))\\n          .toList(),\\n    );\\n\\nMap<String, dynamic> _$$PubSearchResponseImplToJson(\\n        _$PubSearchResponseImpl instance) =>\\n    <String, dynamic>{\\n      'packages': instance.packages,\\n    };\\n\",\"path\":\"pub/lib/pub_repository.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:dio/dio.dart';\\nimport 'package:flutter/foundation.dart';\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\nimport 'package:pubspec_parse/pubspec_parse.dart';\\n\\npart 'pub_repository.freezed.dart';\\npart 'pub_repository.g.dart';\\n\\nclass PubRepository {\\n  PubRepository() {\\n    _configureDio();\\n  }\\n\\n  static const _host = 'pub.dartlang.org';\\n  final dio = Dio();\\n\\n  Future<List<Package>> getPackages({\\n    required int page,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final uri = Uri.https(\\n      _host,\\n      'api/packages',\\n      <String, String>{'page': '$page'},\\n    );\\n\\n    final response = await dio.getUri<Map<String, Object?>>(\\n      uri,\\n      cancelToken: cancelToken,\\n    );\\n\\n    final packagesResponse = PubPackagesResponse.fromJson(response.data!);\\n    return packagesResponse.packages;\\n  }\\n\\n  Future<List<SearchPackage>> searchPackages({\\n    required int page,\\n    required String search,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final uri = Uri.https(\\n      _host,\\n      'api/search',\\n      <String, String>{'page': '$page', 'q': search},\\n    );\\n    // Returns {packages: [{ package: string }]}\\n    final response = await dio.getUri<Map<String, Object?>>(\\n      uri,\\n      cancelToken: cancelToken,\\n    );\\n\\n    final packagesResponse = PubSearchResponse.fromJson(response.data!);\\n    return packagesResponse.packages;\\n  }\\n\\n  Future<Package> getPackageDetails({\\n    required String packageName,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final uri = Uri.https(_host, 'api/packages/$packageName');\\n\\n    final response = await dio.getUri<Map<String, Object?>>(\\n      uri,\\n      cancelToken: cancelToken,\\n    );\\n\\n    final packageResponse = Package.fromJson(response.data!);\\n    return packageResponse;\\n  }\\n\\n  Future<PackageMetricsScore> getPackageMetrics({\\n    required String packageName,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final uri = Uri.https(_host, 'api/packages/$packageName/metrics');\\n\\n    final responseFuture = dio.getUri<Map<String, Object?>>(\\n      uri,\\n      cancelToken: cancelToken,\\n    );\\n\\n    final likesUri = Uri.https(_host, 'api/packages/$packageName/likes');\\n\\n    /// Although the metrics request does include the likes count, it seems that\\n    /// the server caches the response for a long period of time.\\n    /// For the same of \\\"http polling\\\" showcase, we're separately fetching the likes\\n    /// count\\n    final likesResponsFuture = dio.getUri<Map<String, Object?>>(\\n      likesUri,\\n      cancelToken: cancelToken,\\n    );\\n\\n    final metricsResponse =\\n        PackageMetricsResponse.fromJson((await responseFuture).data!);\\n    return metricsResponse.score.copyWith(\\n      likeCount: (await likesResponsFuture).data!['likes']! as int,\\n    );\\n  }\\n\\n  Future<void> like({\\n    required String packageName,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final uri = Uri.https(_host, 'api/account/likes/$packageName');\\n\\n    await dio.putUri<void>(\\n      uri,\\n      cancelToken: cancelToken,\\n      options: Options(\\n        headers: <String, String>{'authorization': userToken},\\n      ),\\n    );\\n  }\\n\\n  Future<void> unlike({\\n    required String packageName,\\n    CancelToken? cancelToken,\\n  }) async {\\n    final uri = Uri.https(_host, 'api/account/likes/$packageName');\\n\\n    await dio.deleteUri<void>(\\n      uri,\\n      cancelToken: cancelToken,\\n      options: Options(headers: <String, String>{'authorization': userToken}),\\n    );\\n  }\\n\\n  Future<List<String>> getLikedPackages({CancelToken? cancelToken}) async {\\n    final uri = Uri.https(_host, 'api/account/likes');\\n\\n    final response = await dio.getUri<Map<String, Object?>>(\\n      uri,\\n      cancelToken: cancelToken,\\n      options: Options(\\n        headers: <String, String>{'authorization': userToken},\\n      ),\\n    );\\n\\n    final packageResponse = LikedPackagesResponse.fromJson(response.data!);\\n    return packageResponse.likedPackages.map((e) => e.package).toList();\\n  }\\n\\n  void _configureDio() {\\n    if (kIsWeb) {\\n      dio.interceptors.add(PubProxyInterceptor());\\n    }\\n  }\\n}\\n\\nconst userToken = '';\\n\\n@freezed\\nclass PackageMetricsScore with _$PackageMetricsScore {\\n  factory PackageMetricsScore({\\n    required int grantedPoints,\\n    required int maxPoints,\\n    required int likeCount,\\n    required double popularityScore,\\n    required List<String> tags,\\n  }) = _PackageMetricsScore;\\n\\n  factory PackageMetricsScore.fromJson(Map<String, Object?> json) =>\\n      _$PackageMetricsScoreFromJson(json);\\n}\\n\\n@freezed\\nclass PackageMetricsResponse with _$PackageMetricsResponse {\\n  factory PackageMetricsResponse({\\n    required PackageMetricsScore score,\\n  }) = _PackageMetricsResponse;\\n\\n  factory PackageMetricsResponse.fromJson(Map<String, Object?> json) =>\\n      _$PackageMetricsResponseFromJson(json);\\n}\\n\\n@freezed\\nclass PackageDetails with _$PackageDetails {\\n  factory PackageDetails({\\n    required String version,\\n    required Pubspec pubspec,\\n  }) = _PackageDetails;\\n\\n  factory PackageDetails.fromJson(Map<String, Object?> json) =>\\n      _$PackageDetailsFromJson(json);\\n}\\n\\n@freezed\\nclass Package with _$Package {\\n  factory Package({\\n    required String name,\\n    required PackageDetails latest,\\n  }) = _Package;\\n\\n  factory Package.fromJson(Map<String, Object?> json) =>\\n      _$PackageFromJson(json);\\n}\\n\\n@freezed\\nclass LikedPackage with _$LikedPackage {\\n  factory LikedPackage({required String package, required bool liked}) =\\n      _LikedPackage;\\n\\n  factory LikedPackage.fromJson(Map<String, Object?> json) =>\\n      _$LikedPackageFromJson(json);\\n}\\n\\n@freezed\\nclass LikedPackagesResponse with _$LikedPackagesResponse {\\n  factory LikedPackagesResponse({required List<LikedPackage> likedPackages}) =\\n      _LikesPackagesResponse;\\n\\n  factory LikedPackagesResponse.fromJson(Map<String, Object?> json) =>\\n      _$LikedPackagesResponseFromJson(json);\\n}\\n\\n@freezed\\nclass PubPackagesResponse with _$PubPackagesResponse {\\n  factory PubPackagesResponse({\\n    required List<Package> packages,\\n  }) = _PubPackagesResponse;\\n\\n  factory PubPackagesResponse.fromJson(Map<String, Object?> json) =>\\n      _$PubPackagesResponseFromJson(json);\\n}\\n\\n@freezed\\nclass SearchPackage with _$SearchPackage {\\n  factory SearchPackage({required String package}) = _SearchPackage;\\n\\n  factory SearchPackage.fromJson(Map<String, Object?> json) =>\\n      _$SearchPackageFromJson(json);\\n}\\n\\n@freezed\\nclass PubSearchResponse with _$PubSearchResponse {\\n  factory PubSearchResponse({\\n    required List<SearchPackage> packages,\\n  }) = _PubSearchResponse;\\n\\n  factory PubSearchResponse.fromJson(Map<String, Object?> json) =>\\n      _$PubSearchResponseFromJson(json);\\n}\\n\\n// A custom interceptor that proxies requests to a cors-proxy server\\n// in order to workaround the CORS issue on web platform.\\nclass PubProxyInterceptor extends Interceptor {\\n  @override\\n  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {\\n    super.onRequest(\\n      options.copyWith(\\n        path: 'https://api.codetabs.com/v1/proxy/?quest=${options.path}',\\n      ),\\n      handler,\\n    );\\n  }\\n}\\n\",\"path\":\"pub/lib/pub_repository.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\nimport 'search.dart';\\n\\nvoid main() {\\n  runApp(const ProviderScope(child: MyApp()));\\n}\\n\\nclass MyApp extends ConsumerWidget {\\n  const MyApp({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    return const MaterialApp(home: SearchPage());\\n  }\\n}\\n\",\"path\":\"pub/lib/main.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\n// ignore_for_file: non_constant_identifier_names, require_trailing_commas\\n\\npart of 'detail.dart';\\n\\n// **************************************************************************\\n// RiverpodGenerator\\n// **************************************************************************\\n\\nString _$fetchPackageDetailsHash() =>\\n    r'e65ba332cb8397cc5a1aca6e656233dff698391a';\\n\\n/// Copied from Dart SDK\\nclass _SystemHash {\\n  _SystemHash._();\\n\\n  static int combine(int hash, int value) {\\n    // ignore: parameter_assignments\\n    hash = 0x1fffffff & (hash + value);\\n    // ignore: parameter_assignments\\n    hash = 0x1fffffff & (hash + ((0x0007ffff & hash) << 10));\\n    return hash ^ (hash >> 6);\\n  }\\n\\n  static int finish(int hash) {\\n    // ignore: parameter_assignments\\n    hash = 0x1fffffff & (hash + ((0x03ffffff & hash) << 3));\\n    // ignore: parameter_assignments\\n    hash = hash ^ (hash >> 11);\\n    return 0x1fffffff & (hash + ((0x00003fff & hash) << 15));\\n  }\\n}\\n\\n/// See also [fetchPackageDetails].\\n@ProviderFor(fetchPackageDetails)\\nconst fetchPackageDetailsProvider = FetchPackageDetailsFamily();\\n\\n/// See also [fetchPackageDetails].\\nclass FetchPackageDetailsFamily extends Family<AsyncValue<Package>> {\\n  /// See also [fetchPackageDetails].\\n  const FetchPackageDetailsFamily();\\n\\n  /// See also [fetchPackageDetails].\\n  FetchPackageDetailsProvider call({\\n    required String packageName,\\n  }) {\\n    return FetchPackageDetailsProvider(\\n      packageName: packageName,\\n    );\\n  }\\n\\n  @override\\n  FetchPackageDetailsProvider getProviderOverride(\\n    covariant FetchPackageDetailsProvider provider,\\n  ) {\\n    return call(\\n      packageName: provider.packageName,\\n    );\\n  }\\n\\n  static const Iterable<ProviderOrFamily>? _dependencies = null;\\n\\n  @override\\n  Iterable<ProviderOrFamily>? get dependencies => _dependencies;\\n\\n  static const Iterable<ProviderOrFamily>? _allTransitiveDependencies = null;\\n\\n  @override\\n  Iterable<ProviderOrFamily>? get allTransitiveDependencies =>\\n      _allTransitiveDependencies;\\n\\n  @override\\n  String? get name => r'fetchPackageDetailsProvider';\\n}\\n\\n/// See also [fetchPackageDetails].\\nclass FetchPackageDetailsProvider extends AutoDisposeFutureProvider<Package> {\\n  /// See also [fetchPackageDetails].\\n  FetchPackageDetailsProvider({\\n    required String packageName,\\n  }) : this._internal(\\n          (ref) => fetchPackageDetails(\\n            ref as FetchPackageDetailsRef,\\n            packageName: packageName,\\n          ),\\n          from: fetchPackageDetailsProvider,\\n          name: r'fetchPackageDetailsProvider',\\n          debugGetCreateSourceHash:\\n              const bool.fromEnvironment('dart.vm.product')\\n                  ? null\\n                  : _$fetchPackageDetailsHash,\\n          dependencies: FetchPackageDetailsFamily._dependencies,\\n          allTransitiveDependencies:\\n              FetchPackageDetailsFamily._allTransitiveDependencies,\\n          packageName: packageName,\\n        );\\n\\n  FetchPackageDetailsProvider._internal(\\n    super._createNotifier, {\\n    required super.name,\\n    required super.dependencies,\\n    required super.allTransitiveDependencies,\\n    required super.debugGetCreateSourceHash,\\n    required super.from,\\n    required this.packageName,\\n  }) : super.internal();\\n\\n  final String packageName;\\n\\n  @override\\n  Override overrideWith(\\n    FutureOr<Package> Function(FetchPackageDetailsRef provider) create,\\n  ) {\\n    return ProviderOverride(\\n      origin: this,\\n      override: FetchPackageDetailsProvider._internal(\\n        (ref) => create(ref as FetchPackageDetailsRef),\\n        from: from,\\n        name: null,\\n        dependencies: null,\\n        allTransitiveDependencies: null,\\n        debugGetCreateSourceHash: null,\\n        packageName: packageName,\\n      ),\\n    );\\n  }\\n\\n  @override\\n  AutoDisposeFutureProviderElement<Package> createElement() {\\n    return _FetchPackageDetailsProviderElement(this);\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return other is FetchPackageDetailsProvider &&\\n        other.packageName == packageName;\\n  }\\n\\n  @override\\n  int get hashCode {\\n    var hash = _SystemHash.combine(0, runtimeType.hashCode);\\n    hash = _SystemHash.combine(hash, packageName.hashCode);\\n\\n    return _SystemHash.finish(hash);\\n  }\\n}\\n\\nmixin FetchPackageDetailsRef on AutoDisposeFutureProviderRef<Package> {\\n  /// The parameter `packageName` of this provider.\\n  String get packageName;\\n}\\n\\nclass _FetchPackageDetailsProviderElement\\n    extends AutoDisposeFutureProviderElement<Package>\\n    with FetchPackageDetailsRef {\\n  _FetchPackageDetailsProviderElement(super.provider);\\n\\n  @override\\n  String get packageName => (origin as FetchPackageDetailsProvider).packageName;\\n}\\n\\nString _$likedPackagesHash() => r'304a4def167e245812638cba776e8d5eb66d8844';\\n\\n/// See also [likedPackages].\\n@ProviderFor(likedPackages)\\nfinal likedPackagesProvider = AutoDisposeFutureProvider<List<String>>.internal(\\n  likedPackages,\\n  name: r'likedPackagesProvider',\\n  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')\\n      ? null\\n      : _$likedPackagesHash,\\n  dependencies: null,\\n  allTransitiveDependencies: null,\\n);\\n\\ntypedef LikedPackagesRef = AutoDisposeFutureProviderRef<List<String>>;\\nString _$pubRepositoryHash() => r'1f4dbfa0911f6467067fab244677acbcb8c7ad4e';\\n\\n/// See also [pubRepository].\\n@ProviderFor(pubRepository)\\nfinal pubRepositoryProvider = AutoDisposeProvider<PubRepository>.internal(\\n  pubRepository,\\n  name: r'pubRepositoryProvider',\\n  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')\\n      ? null\\n      : _$pubRepositoryHash,\\n  dependencies: null,\\n  allTransitiveDependencies: null,\\n);\\n\\ntypedef PubRepositoryRef = AutoDisposeProviderRef<PubRepository>;\\nString _$packageMetricsHash() => r'67cd25e50357e6e970d432c1d255085a23b856ac';\\n\\nabstract class _$PackageMetrics\\n    extends BuildlessAutoDisposeAsyncNotifier<PackageMetricsScore> {\\n  late final String packageName;\\n\\n  FutureOr<PackageMetricsScore> build({\\n    required String packageName,\\n  });\\n}\\n\\n/// A provider that fetches the likes count, popularity score and pub points\\n/// for a given package.\\n///\\n/// It also exposes utilities to like/unlike a package, assuming the user\\n/// is logged-in.\\n///\\n/// Copied from [PackageMetrics].\\n@ProviderFor(PackageMetrics)\\nconst packageMetricsProvider = PackageMetricsFamily();\\n\\n/// A provider that fetches the likes count, popularity score and pub points\\n/// for a given package.\\n///\\n/// It also exposes utilities to like/unlike a package, assuming the user\\n/// is logged-in.\\n///\\n/// Copied from [PackageMetrics].\\nclass PackageMetricsFamily extends Family<AsyncValue<PackageMetricsScore>> {\\n  /// A provider that fetches the likes count, popularity score and pub points\\n  /// for a given package.\\n  ///\\n  /// It also exposes utilities to like/unlike a package, assuming the user\\n  /// is logged-in.\\n  ///\\n  /// Copied from [PackageMetrics].\\n  const PackageMetricsFamily();\\n\\n  /// A provider that fetches the likes count, popularity score and pub points\\n  /// for a given package.\\n  ///\\n  /// It also exposes utilities to like/unlike a package, assuming the user\\n  /// is logged-in.\\n  ///\\n  /// Copied from [PackageMetrics].\\n  PackageMetricsProvider call({\\n    required String packageName,\\n  }) {\\n    return PackageMetricsProvider(\\n      packageName: packageName,\\n    );\\n  }\\n\\n  @override\\n  PackageMetricsProvider getProviderOverride(\\n    covariant PackageMetricsProvider provider,\\n  ) {\\n    return call(\\n      packageName: provider.packageName,\\n    );\\n  }\\n\\n  static const Iterable<ProviderOrFamily>? _dependencies = null;\\n\\n  @override\\n  Iterable<ProviderOrFamily>? get dependencies => _dependencies;\\n\\n  static const Iterable<ProviderOrFamily>? _allTransitiveDependencies = null;\\n\\n  @override\\n  Iterable<ProviderOrFamily>? get allTransitiveDependencies =>\\n      _allTransitiveDependencies;\\n\\n  @override\\n  String? get name => r'packageMetricsProvider';\\n}\\n\\n/// A provider that fetches the likes count, popularity score and pub points\\n/// for a given package.\\n///\\n/// It also exposes utilities to like/unlike a package, assuming the user\\n/// is logged-in.\\n///\\n/// Copied from [PackageMetrics].\\nclass PackageMetricsProvider extends AutoDisposeAsyncNotifierProviderImpl<\\n    PackageMetrics, PackageMetricsScore> {\\n  /// A provider that fetches the likes count, popularity score and pub points\\n  /// for a given package.\\n  ///\\n  /// It also exposes utilities to like/unlike a package, assuming the user\\n  /// is logged-in.\\n  ///\\n  /// Copied from [PackageMetrics].\\n  PackageMetricsProvider({\\n    required String packageName,\\n  }) : this._internal(\\n          () => PackageMetrics()..packageName = packageName,\\n          from: packageMetricsProvider,\\n          name: r'packageMetricsProvider',\\n          debugGetCreateSourceHash:\\n              const bool.fromEnvironment('dart.vm.product')\\n                  ? null\\n                  : _$packageMetricsHash,\\n          dependencies: PackageMetricsFamily._dependencies,\\n          allTransitiveDependencies:\\n              PackageMetricsFamily._allTransitiveDependencies,\\n          packageName: packageName,\\n        );\\n\\n  PackageMetricsProvider._internal(\\n    super._createNotifier, {\\n    required super.name,\\n    required super.dependencies,\\n    required super.allTransitiveDependencies,\\n    required super.debugGetCreateSourceHash,\\n    required super.from,\\n    required this.packageName,\\n  }) : super.internal();\\n\\n  final String packageName;\\n\\n  @override\\n  FutureOr<PackageMetricsScore> runNotifierBuild(\\n    covariant PackageMetrics notifier,\\n  ) {\\n    return notifier.build(\\n      packageName: packageName,\\n    );\\n  }\\n\\n  @override\\n  Override overrideWith(PackageMetrics Function() create) {\\n    return ProviderOverride(\\n      origin: this,\\n      override: PackageMetricsProvider._internal(\\n        () => create()..packageName = packageName,\\n        from: from,\\n        name: null,\\n        dependencies: null,\\n        allTransitiveDependencies: null,\\n        debugGetCreateSourceHash: null,\\n        packageName: packageName,\\n      ),\\n    );\\n  }\\n\\n  @override\\n  AutoDisposeAsyncNotifierProviderElement<PackageMetrics, PackageMetricsScore>\\n      createElement() {\\n    return _PackageMetricsProviderElement(this);\\n  }\\n\\n  @override\\n  bool operator ==(Object other) {\\n    return other is PackageMetricsProvider && other.packageName == packageName;\\n  }\\n\\n  @override\\n  int get hashCode {\\n    var hash = _SystemHash.combine(0, runtimeType.hashCode);\\n    hash = _SystemHash.combine(hash, packageName.hashCode);\\n\\n    return _SystemHash.finish(hash);\\n  }\\n}\\n\\nmixin PackageMetricsRef\\n    on AutoDisposeAsyncNotifierProviderRef<PackageMetricsScore> {\\n  /// The parameter `packageName` of this provider.\\n  String get packageName;\\n}\\n\\nclass _PackageMetricsProviderElement\\n    extends AutoDisposeAsyncNotifierProviderElement<PackageMetrics,\\n        PackageMetricsScore> with PackageMetricsRef {\\n  _PackageMetricsProviderElement(super.provider);\\n\\n  @override\\n  String get packageName => (origin as PackageMetricsProvider).packageName;\\n}\\n// ignore_for_file: type=lint\\n// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member\\n\",\"path\":\"pub/lib/detail.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'dart:async';\\n\\nimport 'package:dio/dio.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\nimport 'package:riverpod_annotation/riverpod_annotation.dart';\\n\\nimport 'pub_repository.dart';\\nimport 'pub_ui/appbar.dart';\\nimport 'pub_ui/package_detail_body.dart';\\nimport 'search.dart';\\n\\npart 'detail.g.dart';\\n\\nextension CancelTokenX on Ref {\\n  CancelToken cancelToken() {\\n    final cancelToken = CancelToken();\\n    onDispose(cancelToken.cancel);\\n    return cancelToken;\\n  }\\n}\\n\\n@riverpod\\nFuture<Package> fetchPackageDetails(\\n  FetchPackageDetailsRef ref, {\\n  required String packageName,\\n}) async {\\n  final cancelToken = ref.cancelToken();\\n\\n  return ref\\n      .watch(pubRepositoryProvider)\\n      .getPackageDetails(packageName: packageName, cancelToken: cancelToken);\\n}\\n\\n@riverpod\\nFuture<List<String>> likedPackages(LikedPackagesRef ref) async {\\n  final cancelToken = ref.cancelToken();\\n\\n  return ref\\n      .watch(pubRepositoryProvider)\\n      .getLikedPackages(cancelToken: cancelToken);\\n}\\n\\n@riverpod\\nPubRepository pubRepository(PubRepositoryRef ref) => PubRepository();\\n\\n/// A provider that fetches the likes count, popularity score and pub points\\n/// for a given package.\\n///\\n/// It also exposes utilities to like/unlike a package, assuming the user\\n/// is logged-in.\\n@riverpod\\nclass PackageMetrics extends _$PackageMetrics {\\n  @override\\n  Future<PackageMetricsScore> build({required String packageName}) async {\\n    final metrics = await ref\\n        .watch(pubRepositoryProvider)\\n        .getPackageMetrics(packageName: packageName);\\n\\n    // Automatically refresh the package metrics page every 5 seconds\\n    final timer = Timer(const Duration(seconds: 5), () => ref.invalidateSelf());\\n    // If the request was refreshed before the 5 second timer completes,\\n    // cancel the timer.\\n    ref.onDispose(timer.cancel);\\n\\n    return metrics;\\n  }\\n\\n  Future<void> like() async {\\n    await ref.read(pubRepositoryProvider).like(packageName: packageName);\\n\\n    /// Since the like count as change, we refresh the package metrics.\\n    /// We could alternatively do something like:\\n    // state = AsyncData(\\n    //   state.value!.copyWith(likeCount: state.value!.likeCount + 1),\\n    // );\\n    ref.invalidateSelf();\\n\\n    // Since we liked a package, the list of liked packages should also be updated.\\n    // An alternative could be:\\n    // - convert likedPackages to a class\\n    // - add a like/unlike methods that updates the list of liked packages\\n    // - call ref.read(likedPackagesProvider).like(packageName);\\n    ref.invalidate(likedPackagesProvider);\\n  }\\n\\n  Future<void> unlike() async {\\n    await ref.read(pubRepositoryProvider).unlike(packageName: packageName);\\n\\n    ref.invalidateSelf();\\n    ref.invalidate(likedPackagesProvider);\\n  }\\n}\\n\\n/// The detail page of a package, typically reached by clicking on a package from [SearchPage].\\nclass PackageDetailPage extends ConsumerWidget {\\n  const PackageDetailPage({super.key, required this.packageName});\\n\\n  /// The name of the package that is inspected.\\n  final String packageName;\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final package =\\n        ref.watch(fetchPackageDetailsProvider(packageName: packageName));\\n\\n    final likedPackages = ref.watch(likedPackagesProvider);\\n    final isLiked = likedPackages.valueOrNull?.contains(packageName) ?? false;\\n\\n    final metrics = ref.watch(packageMetricsProvider(packageName: packageName));\\n\\n    return Scaffold(\\n      appBar: const PubAppbar(),\\n      body: package.when(\\n        error: (err, stack) => Text('Error2 $err'),\\n        loading: () => const Center(child: CircularProgressIndicator()),\\n        data: (package) {\\n          return RefreshIndicator(\\n            onRefresh: () {\\n              return Future.wait([\\n                ref.refresh(\\n                  packageMetricsProvider(packageName: packageName).future,\\n                ),\\n                ref.refresh(\\n                  fetchPackageDetailsProvider(packageName: packageName).future,\\n                ),\\n              ]);\\n            },\\n            child: metrics.when(\\n              error: (err, stack) => Text('Error $err'),\\n              loading: () => const Center(child: CircularProgressIndicator()),\\n              data: (metrics) {\\n                return PackageDetailBodyScrollView(\\n                  packageName: packageName,\\n                  packageVersion: package.latest.version,\\n                  packageDescription: package.latest.pubspec.description,\\n                  grantedPoints: metrics.grantedPoints,\\n                  likeCount: metrics.likeCount,\\n                  maxPoints: metrics.maxPoints,\\n                  popularityScore: metrics.popularityScore * 100,\\n                );\\n              },\\n            ),\\n          );\\n        },\\n      ),\\n      floatingActionButton: FloatingActionButton(\\n        onPressed: () async {\\n          final packageLikes = ref.read(\\n            packageMetricsProvider(packageName: packageName).notifier,\\n          );\\n\\n          if (isLiked) {\\n            await packageLikes.unlike();\\n          } else {\\n            await packageLikes.like();\\n          }\\n        },\\n        child: isLiked\\n            ? const Icon(Icons.favorite)\\n            : const Icon(Icons.favorite_border),\\n      ),\\n    );\\n  }\\n}\\n\",\"path\":\"pub/lib/detail.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// ignore: undefined_hidden_name\\nimport 'package:flutter/material.dart' hide SearchBar;\\nimport 'package:flutter_hooks/flutter_hooks.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\nimport 'package:riverpod_annotation/riverpod_annotation.dart';\\n\\nimport 'detail.dart';\\nimport 'pub_repository.dart';\\nimport 'pub_ui/appbar.dart';\\nimport 'pub_ui/package_item.dart';\\nimport 'pub_ui/searchbar.dart';\\n\\npart 'search.g.dart';\\n\\nconst packagesPackageSize = 100;\\nconst searchPageSize = 10;\\n\\n@riverpod\\nFuture<List<Package>> fetchPackages(\\n  FetchPackagesRef ref, {\\n  required int page,\\n  String search = '',\\n}) async {\\n  assert(page > 0, 'page offset starts at 1');\\n  final cancelToken = ref.cancelToken();\\n\\n  if (search.isEmpty) {\\n    return ref\\n        .watch(pubRepositoryProvider)\\n        .getPackages(page: page, cancelToken: cancelToken);\\n  }\\n\\n  // Debouncing searches by delaying the request.\\n  // If the search was cancelled during this delay, the network request will\\n  // not be performed.\\n  await Future<void>.delayed(const Duration(milliseconds: 250));\\n  if (cancelToken.isCancelled) {\\n    throw Exception('cancelled');\\n  }\\n\\n  final searchedPackages = await ref\\n      .watch(pubRepositoryProvider)\\n      .searchPackages(page: page, search: search, cancelToken: cancelToken);\\n\\n  return Future.wait([\\n    for (final package in searchedPackages)\\n      ref.watch(\\n        fetchPackageDetailsProvider(packageName: package.package).future,\\n      ),\\n  ]);\\n}\\n\\nclass SearchPage extends HookConsumerWidget {\\n  const SearchPage({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final searchController = useTextEditingController();\\n    useListenable(searchController);\\n\\n    return Scaffold(\\n      appBar: const PubAppbar(),\\n      body: Column(\\n        children: [\\n          SearchBar(controller: searchController),\\n          Expanded(\\n            child: RefreshIndicator(\\n              onRefresh: () {\\n                // disposes the pages previously fetched. Next read will refresh them\\n                ref.invalidate(fetchPackagesProvider);\\n                // keep showing the progress indicator until the first page is fetched\\n                return ref.read(\\n                  fetchPackagesProvider(page: 1, search: searchController.text)\\n                      .future,\\n                );\\n              },\\n              child: ListView.custom(\\n                padding: const EdgeInsets.only(top: 30),\\n                childrenDelegate: SliverChildBuilderDelegate((context, index) {\\n                  final pageSize = searchController.text.isEmpty\\n                      ? packagesPackageSize\\n                      : searchPageSize;\\n\\n                  final page = index ~/ pageSize + 1;\\n                  final indexInPage = index % pageSize;\\n                  final packageList = ref.watch(\\n                    fetchPackagesProvider(\\n                      page: page,\\n                      search: searchController.text,\\n                    ),\\n                  );\\n\\n                  return packageList.when(\\n                    error: (err, stack) => Text('Error $err'),\\n                    loading: () => const PackageItemShimmer(),\\n                    data: (packages) {\\n                      if (indexInPage >= packages.length) return null;\\n\\n                      final package = packages[indexInPage];\\n\\n                      return PackageItem(\\n                        name: package.name,\\n                        description: package.latest.pubspec.description,\\n                        version: package.latest.version,\\n                        onTap: () => Navigator.push(\\n                          context,\\n                          MaterialPageRoute<void>(\\n                            builder: (context) {\\n                              return PackageDetailPage(\\n                                packageName: package.name,\\n                              );\\n                            },\\n                          ),\\n                        ),\\n                      );\\n                    },\\n                  );\\n                }),\\n              ),\\n            ),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\",\"path\":\"pub/lib/search.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:shimmer/shimmer.dart';\\n\\nclass PackageItem extends StatelessWidget {\\n  const PackageItem({\\n    super.key,\\n    required this.name,\\n    required this.version,\\n    required this.description,\\n    this.onTap,\\n  });\\n\\n  final String name;\\n  final String version;\\n  final String? description;\\n\\n  final void Function()? onTap;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final description = this.description;\\n\\n    return ListTile(\\n      onTap: onTap,\\n      title: Row(\\n        children: [\\n          Expanded(\\n            child: Text(\\n              name,\\n              style: const TextStyle(\\n                fontWeight: FontWeight.bold,\\n                color: Color(0xff0175c2),\\n                overflow: TextOverflow.ellipsis,\\n              ),\\n            ),\\n          ),\\n          Text(version),\\n        ],\\n      ),\\n      subtitle: description != null ? Text(description) : null,\\n    );\\n  }\\n}\\n\\nclass PackageItemShimmer extends StatelessWidget {\\n  const PackageItemShimmer({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Shimmer.fromColors(\\n      baseColor: Colors.grey.shade300,\\n      highlightColor: Colors.white,\\n      child: ListTile(\\n        title: Builder(\\n          builder: (context) {\\n            return Row(\\n              children: [\\n                Container(\\n                  height: DefaultTextStyle.of(context).style.fontSize! * .8,\\n                  width: 100,\\n                  decoration: const BoxDecoration(\\n                    color: Colors.grey,\\n                    borderRadius: BorderRadius.all(\\n                      Radius.circular(50),\\n                    ),\\n                  ),\\n                ),\\n                const Spacer(),\\n                Container(\\n                  height: DefaultTextStyle.of(context).style.fontSize! * .8,\\n                  width: 40,\\n                  decoration: const BoxDecoration(\\n                    color: Colors.grey,\\n                    borderRadius: BorderRadius.all(\\n                      Radius.circular(50),\\n                    ),\\n                  ),\\n                ),\\n              ],\\n            );\\n          },\\n        ),\\n        subtitle: Builder(\\n          builder: (context) {\\n            return Padding(\\n              padding: const EdgeInsets.only(top: 8),\\n              child: Column(\\n                children: [\\n                  Container(\\n                    height: DefaultTextStyle.of(context).style.fontSize! * .8,\\n                    width: double.infinity,\\n                    decoration: const BoxDecoration(\\n                      color: Colors.grey,\\n                      borderRadius: BorderRadius.all(\\n                        Radius.circular(50),\\n                      ),\\n                    ),\\n                  ),\\n                  const SizedBox(height: 5),\\n                  Container(\\n                    height: DefaultTextStyle.of(context).style.fontSize! * .8,\\n                    width: double.infinity,\\n                    decoration: const BoxDecoration(\\n                      color: Colors.grey,\\n                      borderRadius: BorderRadius.all(\\n                        Radius.circular(50),\\n                      ),\\n                    ),\\n                  ),\\n                ],\\n              ),\\n            );\\n          },\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\",\"path\":\"pub/lib/pub_ui/package_item.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\n\\nclass SearchBar extends StatelessWidget {\\n  const SearchBar({super.key, this.controller});\\n\\n  final TextEditingController? controller;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return SizedBox(\\n      height: 70,\\n      child: Stack(\\n        children: [\\n          Positioned.fill(\\n            child: Image.asset(\\n              'assets/search_background.png',\\n              fit: BoxFit.cover,\\n            ),\\n          ),\\n          Center(\\n            child: Container(\\n              margin: const EdgeInsets.symmetric(vertical: 15, horizontal: 40),\\n              decoration: const BoxDecoration(\\n                color: Color(0xff35404d),\\n                borderRadius: BorderRadius.all(Radius.circular(50)),\\n              ),\\n              child: Padding(\\n                padding: const EdgeInsets.only(left: 10),\\n                child: Row(\\n                  children: [\\n                    const Icon(Icons.search, color: Colors.grey),\\n                    const SizedBox(width: 10),\\n                    Expanded(\\n                      child: Center(\\n                        child: TextField(\\n                          controller: controller,\\n                          style: const TextStyle(color: Colors.white),\\n                          decoration: InputDecoration(\\n                            border: InputBorder.none,\\n                            contentPadding: EdgeInsets.zero,\\n                            isDense: true,\\n                            hintText: 'search packages',\\n                            hintStyle: TextStyle(color: Colors.grey.shade400),\\n                          ),\\n                          onEditingComplete: () {\\n                            FocusManager.instance.primaryFocus?.unfocus();\\n                          },\\n                        ),\\n                      ),\\n                    ),\\n                  ],\\n                ),\\n              ),\\n            ),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\",\"path\":\"pub/lib/pub_ui/searchbar.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\n\\nclass PackageDetailBodyScrollView extends StatelessWidget {\\n  const PackageDetailBodyScrollView({\\n    super.key,\\n    this.packageDescription,\\n    required this.packageName,\\n    required this.packageVersion,\\n    required this.likeCount,\\n    required this.grantedPoints,\\n    required this.maxPoints,\\n    required this.popularityScore,\\n  });\\n\\n  final String packageName;\\n  final String packageVersion;\\n  final String? packageDescription;\\n  final int likeCount;\\n  final int grantedPoints;\\n  final int maxPoints;\\n  final double popularityScore;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return ListView(\\n      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 30),\\n      children: [\\n        Text(\\n          '$packageName $packageVersion',\\n          style: const TextStyle(fontSize: 20),\\n        ),\\n        const SizedBox(height: 10),\\n        Text(packageDescription ?? ''),\\n        const SizedBox(height: 40),\\n        Row(\\n          mainAxisAlignment: MainAxisAlignment.spaceAround,\\n          children: [\\n            Column(\\n              children: [\\n                Text(\\n                  '$likeCount',\\n                  style: const TextStyle(\\n                    color: Color(0xff1967d2),\\n                    fontSize: 40,\\n                  ),\\n                ),\\n                const Text('LIKES', style: TextStyle(fontSize: 13)),\\n              ],\\n            ),\\n            Column(\\n              children: [\\n                Row(\\n                  crossAxisAlignment: CrossAxisAlignment.baseline,\\n                  textBaseline: TextBaseline.alphabetic,\\n                  children: [\\n                    Text(\\n                      '$grantedPoints',\\n                      style: const TextStyle(\\n                        color: Color(0xff1967d2),\\n                        fontSize: 40,\\n                      ),\\n                    ),\\n                    Text(\\n                      '/$maxPoints',\\n                      style: const TextStyle(\\n                        color: Color(0xff1967d2),\\n                        fontSize: 20,\\n                      ),\\n                    ),\\n                  ],\\n                ),\\n                const Text(\\n                  'PUB POINTS',\\n                  style: TextStyle(fontSize: 13),\\n                ),\\n              ],\\n            ),\\n            Column(\\n              children: [\\n                Row(\\n                  crossAxisAlignment: CrossAxisAlignment.baseline,\\n                  textBaseline: TextBaseline.alphabetic,\\n                  children: [\\n                    Text(\\n                      '${popularityScore.round()}',\\n                      style: const TextStyle(\\n                        color: Color(0xff1967d2),\\n                        fontSize: 40,\\n                      ),\\n                    ),\\n                    const Text(\\n                      '%',\\n                      style: TextStyle(\\n                        color: Color(0xff1967d2),\\n                        fontSize: 20,\\n                      ),\\n                    ),\\n                  ],\\n                ),\\n                const Text(\\n                  'POPULARITY',\\n                  style: TextStyle(fontSize: 13),\\n                ),\\n              ],\\n            ),\\n          ],\\n        ),\\n      ],\\n    );\\n  }\\n}\\n\",\"path\":\"pub/lib/pub_ui/package_detail_body.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/foundation.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:flutter_svg/flutter_svg.dart';\\n\\nclass PubAppbar extends StatelessWidget implements PreferredSizeWidget {\\n  const PubAppbar({super.key});\\n  static const _webProxy = 'https://api.codetabs.com/v1/proxy';\\n  static const _dartLogoURL =\\n      'https://pub.dev/static/hash-6pt3begn/img/pub-dev-logo.svg';\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return AppBar(\\n      backgroundColor: const Color(0xFF1c2834),\\n      title: SvgPicture.network(\\n        kIsWeb ? '$_webProxy/?quest=$_dartLogoURL' : _dartLogoURL,\\n        width: 150,\\n      ),\\n    );\\n  }\\n\\n  @override\\n  Size get preferredSize => AppBar().preferredSize;\\n}\\n\",\"path\":\"pub/lib/pub_ui/appbar.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// This is a basic Flutter widget test.\\n//\\n// To perform an interaction with a widget in your test, use the WidgetTester\\n// utility that Flutter provides. For example, you can send tap and scroll\\n// gestures. You can also use WidgetTester to find child widgets in the widget\\n// tree, read text, and verify that the values of widget properties are correct.\\n\\nimport 'package:counter/main.dart';\\nimport 'package:flutter/material.dart';\\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\\nimport 'package:flutter_test/flutter_test.dart';\\n\\nvoid main() {\\n  testWidgets('Counter increments smoke test', (tester) async {\\n    // Build our app and trigger a frame.\\n    await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n    // Verify that our counter starts at 0.\\n    expect(find.text('0'), findsOneWidget);\\n    expect(find.text('1'), findsNothing);\\n\\n    // Tap the '+' icon and trigger a frame.\\n    await tester.tap(find.byIcon(Icons.add));\\n    await tester.pump();\\n\\n    // Verify that our counter has incremented.\\n    expect(find.text('0'), findsNothing);\\n    expect(find.text('1'), findsOneWidget);\\n  });\\n}\\n\",\"path\":\"counter/test/widget_test.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// GENERATED CODE - DO NOT MODIFY BY HAND\\n\\npart of 'main.dart';\\n\\n// **************************************************************************\\n// RiverpodGenerator\\n// **************************************************************************\\n\\nString _$counterHash() => r'4243b34530f53accfd9014a9f0e316fe304ada3e';\\n\\n/// Annotating a class by `@riverpod` defines a new shared state for your application,\\n/// accessible using the generated [counterProvider].\\n/// This class is both responsible for initializing the state (through the [build] method)\\n/// and exposing ways to modify it (cf [increment]).\\n///\\n/// Copied from [Counter].\\n@ProviderFor(Counter)\\nfinal counterProvider = AutoDisposeNotifierProvider<Counter, int>.internal(\\n  Counter.new,\\n  name: r'counterProvider',\\n  debugGetCreateSourceHash:\\n      const bool.fromEnvironment('dart.vm.product') ? null : _$counterHash,\\n  dependencies: null,\\n  allTransitiveDependencies: null,\\n);\\n\\ntypedef _$Counter = AutoDisposeNotifier<int>;\\n// ignore_for_file: type=lint\\n// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member\\n\",\"path\":\"counter/lib/main.g.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\\nimport 'package:riverpod_annotation/riverpod_annotation.dart';\\n\\npart 'main.g.dart';\\n\\n// A Counter example implemented with riverpod\\n\\nvoid main() {\\n  runApp(\\n    // Adding ProviderScope enables Riverpod for the entire project\\n    const ProviderScope(child: MyApp()),\\n  );\\n}\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(home: Home());\\n  }\\n}\\n\\n/// Annotating a class by `@riverpod` defines a new shared state for your application,\\n/// accessible using the generated [counterProvider].\\n/// This class is both responsible for initializing the state (through the [build] method)\\n/// and exposing ways to modify it (cf [increment]).\\n@riverpod\\nclass Counter extends _$Counter {\\n  /// Classes annotated by `@riverpod` **must** define a [build] function.\\n  /// This function is expected to return the initial state of your shared state.\\n  /// It is totally acceptable for this function to return a [Future] or [Stream] if you need to.\\n  /// You can also freely define parameters on this method.\\n  @override\\n  int build() => 0;\\n\\n  void increment() => state++;\\n}\\n\\nclass Home extends ConsumerWidget {\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    return Scaffold(\\n      appBar: AppBar(title: const Text('Counter example')),\\n      body: Center(\\n        child: Text('${ref.watch(counterProvider)}'),\\n      ),\\n      floatingActionButton: FloatingActionButton(\\n        // The read method is a utility to read a provider without listening to it\\n        onPressed: () => ref.read(counterProvider.notifier).increment(),\\n        child: const Icon(Icons.add),\\n      ),\\n    );\\n  }\\n}\\n\",\"path\":\"counter/lib/main.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"// This is a basic Flutter widget test.\\n//\\n// To perform an interaction with a widget in your test, use the WidgetTester\\n// utility that Flutter provides. For example, you can send tap and scroll\\n// gestures. You can also use WidgetTester to find child widgets in the widget\\n// tree, read text, and verify that the values of widget properties are correct.\\n\\nimport 'dart:io';\\n\\nimport 'package:flutter/material.dart';\\nimport 'package:flutter_test/flutter_test.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport 'package:todos/main.dart';\\n\\nconst firstItemText = 'Buy cookies';\\nconst secondItemText = 'Star Riverpod';\\nconst thirdItemText = 'Have a walk';\\n\\nvoid main() {\\n  final addTodoInput = find.byKey(addTodoKey);\\n  final activeFilterButton = find.byKey(activeFilterKey);\\n  final firstItem = find.byKey(const Key('todo-0'));\\n  final firstCheckbox = find.descendant(\\n    of: firstItem,\\n    matching: find.byType(Checkbox),\\n  );\\n  final secondItem = find.byKey(const Key('todo-1'));\\n  final secondCheckbox = find.descendant(\\n    of: secondItem,\\n    matching: find.byType(Checkbox),\\n  );\\n  final thirdItem = find.byKey(const Key('todo-2'));\\n  final thirdCheckbox = find.descendant(\\n    of: thirdItem,\\n    matching: find.byType(Checkbox),\\n  );\\n\\n  testWidgets(\\n    'Render the default todos',\\n    (tester) async {\\n      await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n      expect(\\n        find.descendant(of: firstItem, matching: find.text(firstItemText)),\\n        findsOneWidget,\\n      );\\n      expect(\\n        tester.widget(firstCheckbox),\\n        isA<Checkbox>().having((s) => s.value, 'value', false),\\n      );\\n      expect(\\n        find.descendant(of: secondItem, matching: find.text(secondItemText)),\\n        findsOneWidget,\\n      );\\n      expect(\\n        tester.widget(secondCheckbox),\\n        isA<Checkbox>().having((s) => s.value, 'value', false),\\n      );\\n      expect(\\n        find.descendant(of: thirdItem, matching: find.text(thirdItemText)),\\n        findsOneWidget,\\n      );\\n      expect(\\n        tester.widget(thirdCheckbox),\\n        isA<Checkbox>().having((s) => s.value, 'value', false),\\n      );\\n\\n      await expectLater(\\n        find.byType(MyApp),\\n        matchesGoldenFile('initial_state.png'),\\n      );\\n    },\\n    skip: !Platform.isMacOS,\\n  );\\n\\n  testWidgets('Clicking on checkbox toggles the todo', (tester) async {\\n    await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n    expect(\\n      tester.widget(firstCheckbox),\\n      isA<Checkbox>().having((s) => s.value, 'value', false),\\n    );\\n    expect(find.text('3 items left'), findsOneWidget);\\n    expect(find.text('2 items left'), findsNothing);\\n\\n    await tester.tap(firstCheckbox);\\n    await tester.pump();\\n\\n    expect(\\n      tester.widget(firstCheckbox),\\n      isA<Checkbox>().having((s) => s.value, 'value', true),\\n    );\\n    expect(find.text('2 items left'), findsOneWidget);\\n    expect(find.text('3 items left'), findsNothing);\\n  });\\n\\n  testWidgets('Editing the todo on unfocus', (tester) async {\\n    await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n    expect(\\n      find.descendant(of: firstItem, matching: find.text(firstItemText)),\\n      findsOneWidget,\\n    );\\n\\n    await tester.tap(firstItem);\\n    // wait for the textfield to appear\\n    await tester.pump();\\n\\n    // don't use tester.enterText to check that the textfield is auto-focused\\n    tester.testTextInput.enterText('new description');\\n    tester.testTextInput.closeConnection();\\n\\n    await tester.pump();\\n\\n    expect(\\n      find.descendant(of: firstItem, matching: find.text(firstItemText)),\\n      findsNothing,\\n    );\\n    expect(\\n      find.descendant(of: firstItem, matching: find.text('new description')),\\n      findsOneWidget,\\n    );\\n  });\\n\\n  testWidgets('Editing the todo on done', (tester) async {\\n    await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n    expect(\\n      find.descendant(of: firstItem, matching: find.text(firstItemText)),\\n      findsOneWidget,\\n    );\\n\\n    await tester.tap(firstItem);\\n    // wait for the textfield to appear\\n    await tester.pump();\\n\\n    // don't use tester.enterText to check that the textfield is auto-focused\\n    tester.testTextInput.enterText('new description');\\n    await tester.testTextInput.receiveAction(TextInputAction.done);\\n\\n    await tester.pump();\\n\\n    expect(\\n      find.descendant(of: firstItem, matching: find.text(firstItemText)),\\n      findsNothing,\\n    );\\n    expect(\\n      find.descendant(of: firstItem, matching: find.text('new description')),\\n      findsOneWidget,\\n    );\\n  });\\n\\n  testWidgets('Dismissing the todo', (tester) async {\\n    await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n    expect(firstItem, findsOneWidget);\\n\\n    // dismiss the item\\n    await tester.drag(firstItem, const Offset(1000, 0));\\n\\n    // wait for animation to finish\\n    await tester.pumpAndSettle();\\n\\n    expect(firstItem, findsNothing);\\n  });\\n\\n  testWidgets('Clicking on Active shows only incomplete todos', (tester) async {\\n    await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n    expect(firstItem, findsOneWidget);\\n    expect(secondItem, findsOneWidget);\\n    expect(thirdItem, findsOneWidget);\\n\\n    await tester.tap(firstCheckbox);\\n    await tester.tap(activeFilterButton);\\n\\n    await tester.pump();\\n\\n    expect(firstItem, findsNothing);\\n    expect(secondItem, findsOneWidget);\\n    expect(thirdItem, findsOneWidget);\\n  });\\n\\n  testWidgets(\\n    'The input allows adding todos',\\n    (tester) async {\\n      await tester.pumpWidget(const ProviderScope(child: MyApp()));\\n\\n      expect(find.text('Newly added todo'), findsNothing);\\n      expect(find.text('3 items left'), findsOneWidget);\\n      expect(find.text('4 items left'), findsNothing);\\n\\n      await tester.enterText(addTodoInput, 'Newly added todo');\\n\\n      expect(\\n        find.descendant(\\n          of: addTodoInput,\\n          matching: find.text('Newly added todo'),\\n        ),\\n        findsOneWidget,\\n      );\\n\\n      await tester.testTextInput.receiveAction(TextInputAction.done);\\n      await tester.pump();\\n\\n      // clears the input\\n      expect(\\n        find.descendant(\\n          of: addTodoInput,\\n          matching: find.text('Newly added todo'),\\n        ),\\n        findsNothing,\\n      );\\n\\n      await expectLater(\\n        find.byType(MyApp),\\n        matchesGoldenFile('new_todo.png'),\\n      );\\n\\n      expect(find.text('Newly added todo'), findsOneWidget);\\n      expect(find.text('4 items left'), findsOneWidget);\\n      expect(find.text('3 items left'), findsNothing);\\n    },\\n    skip: !Platform.isMacOS,\\n  );\\n}\\n\",\"path\":\"todos/test/widget_test.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/material.dart';\\nimport 'package:flutter_hooks/flutter_hooks.dart';\\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\\n\\nimport 'todo.dart';\\n\\n/// Some keys used for testing\\nfinal addTodoKey = UniqueKey();\\nfinal activeFilterKey = UniqueKey();\\nfinal completedFilterKey = UniqueKey();\\nfinal allFilterKey = UniqueKey();\\n\\n/// Creates a [TodoList] and initialise it with pre-defined values.\\n///\\n/// We are using [StateNotifierProvider] here as a `List<Todo>` is a complex\\n/// object, with advanced business logic like how to edit a todo.\\nfinal todoListProvider = NotifierProvider<TodoList, List<Todo>>(TodoList.new);\\n\\n/// The different ways to filter the list of todos\\nenum TodoListFilter {\\n  all,\\n  active,\\n  completed,\\n}\\n\\n/// The currently active filter.\\n///\\n/// We use [StateProvider] here as there is no fancy logic behind manipulating\\n/// the value since it's just enum.\\nfinal todoListFilter = StateProvider((_) => TodoListFilter.all);\\n\\n/// The number of uncompleted todos\\n///\\n/// By using [Provider], this value is cached, making it performant.\\\\\\n/// Even multiple widgets try to read the number of uncompleted todos,\\n/// the value will be computed only once (until the todo-list changes).\\n///\\n/// This will also optimise unneeded rebuilds if the todo-list changes, but the\\n/// number of uncompleted todos doesn't (such as when editing a todo).\\nfinal uncompletedTodosCount = Provider<int>((ref) {\\n  return ref.watch(todoListProvider).where((todo) => !todo.completed).length;\\n});\\n\\n/// The list of todos after applying of [todoListFilter].\\n///\\n/// This too uses [Provider], to avoid recomputing the filtered list unless either\\n/// the filter of or the todo-list updates.\\nfinal filteredTodos = Provider<List<Todo>>((ref) {\\n  final filter = ref.watch(todoListFilter);\\n  final todos = ref.watch(todoListProvider);\\n\\n  switch (filter) {\\n    case TodoListFilter.completed:\\n      return todos.where((todo) => todo.completed).toList();\\n    case TodoListFilter.active:\\n      return todos.where((todo) => !todo.completed).toList();\\n    case TodoListFilter.all:\\n      return todos;\\n  }\\n});\\n\\nvoid main() {\\n  runApp(const ProviderScope(child: MyApp()));\\n}\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const MaterialApp(\\n      home: Home(),\\n    );\\n  }\\n}\\n\\nclass Home extends HookConsumerWidget {\\n  const Home({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final todos = ref.watch(filteredTodos);\\n    final newTodoController = useTextEditingController();\\n\\n    return GestureDetector(\\n      onTap: () => FocusScope.of(context).unfocus(),\\n      child: Scaffold(\\n        body: ListView(\\n          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 40),\\n          children: [\\n            const Title(),\\n            TextField(\\n              key: addTodoKey,\\n              controller: newTodoController,\\n              decoration: const InputDecoration(\\n                labelText: 'What needs to be done?',\\n              ),\\n              onSubmitted: (value) {\\n                ref.read(todoListProvider.notifier).add(value);\\n                newTodoController.clear();\\n              },\\n            ),\\n            const SizedBox(height: 42),\\n            const Toolbar(),\\n            if (todos.isNotEmpty) const Divider(height: 0),\\n            for (var i = 0; i < todos.length; i++) ...[\\n              if (i > 0) const Divider(height: 0),\\n              Dismissible(\\n                key: ValueKey(todos[i].id),\\n                onDismissed: (_) {\\n                  ref.read(todoListProvider.notifier).remove(todos[i]);\\n                },\\n                child: ProviderScope(\\n                  overrides: [\\n                    _currentTodo.overrideWithValue(todos[i]),\\n                  ],\\n                  child: const TodoItem(),\\n                ),\\n              ),\\n            ],\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\nclass Toolbar extends HookConsumerWidget {\\n  const Toolbar({\\n    super.key,\\n  });\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final filter = ref.watch(todoListFilter);\\n\\n    Color? textColorFor(TodoListFilter value) {\\n      return filter == value ? Colors.blue : Colors.black;\\n    }\\n\\n    return Material(\\n      child: Row(\\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\\n        children: [\\n          Expanded(\\n            child: Text(\\n              '${ref.watch(uncompletedTodosCount)} items left',\\n              overflow: TextOverflow.ellipsis,\\n            ),\\n          ),\\n          Tooltip(\\n            key: allFilterKey,\\n            message: 'All todos',\\n            child: TextButton(\\n              onPressed: () =>\\n                  ref.read(todoListFilter.notifier).state = TodoListFilter.all,\\n              style: ButtonStyle(\\n                visualDensity: VisualDensity.compact,\\n                foregroundColor:\\n                    WidgetStatePropertyAll(textColorFor(TodoListFilter.all)),\\n              ),\\n              child: const Text('All'),\\n            ),\\n          ),\\n          Tooltip(\\n            key: activeFilterKey,\\n            message: 'Only uncompleted todos',\\n            child: TextButton(\\n              onPressed: () => ref.read(todoListFilter.notifier).state =\\n                  TodoListFilter.active,\\n              style: ButtonStyle(\\n                visualDensity: VisualDensity.compact,\\n                foregroundColor: WidgetStatePropertyAll(\\n                  textColorFor(TodoListFilter.active),\\n                ),\\n              ),\\n              child: const Text('Active'),\\n            ),\\n          ),\\n          Tooltip(\\n            key: completedFilterKey,\\n            message: 'Only completed todos',\\n            child: TextButton(\\n              onPressed: () => ref.read(todoListFilter.notifier).state =\\n                  TodoListFilter.completed,\\n              style: ButtonStyle(\\n                visualDensity: VisualDensity.compact,\\n                foregroundColor: WidgetStatePropertyAll(\\n                  textColorFor(TodoListFilter.completed),\\n                ),\\n              ),\\n              child: const Text('Completed'),\\n            ),\\n          ),\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\\nclass Title extends StatelessWidget {\\n  const Title({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return const Text(\\n      'todos',\\n      textAlign: TextAlign.center,\\n      style: TextStyle(\\n        color: Color.fromARGB(38, 47, 47, 247),\\n        fontSize: 100,\\n        fontWeight: FontWeight.w100,\\n        fontFamily: 'Helvetica Neue',\\n      ),\\n    );\\n  }\\n}\\n\\n/// A provider which exposes the [Todo] displayed by a [TodoItem].\\n///\\n/// By retrieving the [Todo] through a provider instead of through its\\n/// constructor, this allows [TodoItem] to be instantiated using the `const` keyword.\\n///\\n/// This ensures that when we add/remove/edit todos, only what the\\n/// impacted widgets rebuilds, instead of the entire list of items.\\nfinal _currentTodo = Provider<Todo>((ref) => throw UnimplementedError());\\n\\n/// The widget that that displays the components of an individual Todo Item\\nclass TodoItem extends HookConsumerWidget {\\n  const TodoItem({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final todo = ref.watch(_currentTodo);\\n    final itemFocusNode = useFocusNode();\\n    final itemIsFocused = useIsFocused(itemFocusNode);\\n\\n    final textEditingController = useTextEditingController();\\n    final textFieldFocusNode = useFocusNode();\\n\\n    return Material(\\n      color: Colors.white,\\n      elevation: 6,\\n      child: Focus(\\n        focusNode: itemFocusNode,\\n        onFocusChange: (focused) {\\n          if (focused) {\\n            textEditingController.text = todo.description;\\n          } else {\\n            // Commit changes only when the textfield is unfocused, for performance\\n            ref\\n                .read(todoListProvider.notifier)\\n                .edit(id: todo.id, description: textEditingController.text);\\n          }\\n        },\\n        child: ListTile(\\n          onTap: () {\\n            itemFocusNode.requestFocus();\\n            textFieldFocusNode.requestFocus();\\n          },\\n          leading: Checkbox(\\n            value: todo.completed,\\n            onChanged: (value) =>\\n                ref.read(todoListProvider.notifier).toggle(todo.id),\\n          ),\\n          title: itemIsFocused\\n              ? TextField(\\n                  autofocus: true,\\n                  focusNode: textFieldFocusNode,\\n                  controller: textEditingController,\\n                )\\n              : Text(todo.description),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\nbool useIsFocused(FocusNode node) {\\n  final isFocused = useState(node.hasFocus);\\n\\n  useEffect(\\n    () {\\n      void listener() {\\n        isFocused.value = node.hasFocus;\\n      }\\n\\n      node.addListener(listener);\\n      return () => node.removeListener(listener);\\n    },\\n    [node],\\n  );\\n\\n  return isFocused.value;\\n}\\n\",\"path\":\"todos/lib/main.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'package:flutter/foundation.dart' show immutable;\\nimport 'package:riverpod/riverpod.dart';\\nimport 'package:uuid/uuid.dart';\\n\\nconst _uuid = Uuid();\\n\\n/// A read-only description of a todo-item\\n@immutable\\nclass Todo {\\n  const Todo({\\n    required this.description,\\n    required this.id,\\n    this.completed = false,\\n  });\\n\\n  final String id;\\n  final String description;\\n  final bool completed;\\n\\n  @override\\n  String toString() {\\n    return 'Todo(description: $description, completed: $completed)';\\n  }\\n}\\n\\n/// An object that controls a list of [Todo].\\nclass TodoList extends Notifier<List<Todo>> {\\n  @override\\n  List<Todo> build() => [\\n        const Todo(id: 'todo-0', description: 'Buy cookies'),\\n        const Todo(id: 'todo-1', description: 'Star Riverpod'),\\n        const Todo(id: 'todo-2', description: 'Have a walk'),\\n      ];\\n\\n  void add(String description) {\\n    state = [\\n      ...state,\\n      Todo(\\n        id: _uuid.v4(),\\n        description: description,\\n      ),\\n    ];\\n  }\\n\\n  void toggle(String id) {\\n    state = [\\n      for (final todo in state)\\n        if (todo.id == id)\\n          Todo(\\n            id: todo.id,\\n            completed: !todo.completed,\\n            description: todo.description,\\n          )\\n        else\\n          todo,\\n    ];\\n  }\\n\\n  void edit({required String id, required String description}) {\\n    state = [\\n      for (final todo in state)\\n        if (todo.id == id)\\n          Todo(\\n            id: todo.id,\\n            completed: todo.completed,\\n            description: description,\\n          )\\n        else\\n          todo,\\n    ];\\n  }\\n\\n  void remove(Todo target) {\\n    state = state.where((todo) => todo.id != target.id).toList();\\n  }\\n}\\n\",\"path\":\"todos/lib/todo.dart\"},{\"id\":\"870315275\",\"type\":\"file_object\",\"content\":\"import 'dart:math';\\n\\nimport 'package:flutter/material.dart';\\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\\n\\nvoid main() {\\n  runApp(const ProviderScope(child: RandomNumberApp()));\\n}\\n\\n// State notifier for generating a random number exposed by a state notifier\\n// provider\\nclass RandomNumberGenerator extends StateNotifier<int> {\\n  RandomNumberGenerator() : super(Random().nextInt(9999));\\n\\n  void generate() {\\n    state = Random().nextInt(9999);\\n  }\\n}\\n\\n// State notifier provider holding the state\\nfinal randomNumberProvider = StateNotifierProvider(\\n  (ref) => RandomNumberGenerator(),\\n);\\n\\nclass RandomNumberApp extends StatelessWidget {\\n  const RandomNumberApp({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      home: Scaffold(\\n        appBar: AppBar(\\n          title: const Text('Random number'),\\n        ),\\n        body: Center(\\n          child: Column(\\n            mainAxisAlignment: MainAxisAlignment.center,\\n            children: [\\n              const RandomConsumer(),\\n              // Consumer to call a method inside StateNotifier just to change\\n              // the state\\n              Consumer(\\n                builder: (context, ref, child) {\\n                  return ElevatedButton(\\n                    child: const Text('Generate'),\\n                    onPressed: () =>\\n                        ref.read(randomNumberProvider.notifier).generate(),\\n                  );\\n                },\\n              ),\\n            ],\\n          ),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n/// Custom consumer using the provider\\nclass RandomConsumer extends ConsumerWidget {\\n  const RandomConsumer({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    return Text(ref.watch(randomNumberProvider).toString());\\n  }\\n}\\n\",\"path\":\"random_number/lib/main.dart\"}],\"version\":\"0.0.1\"}],\"web_objects\":[]}],\"supported_commands\":[{\"slug\":\"/setup\",\"intent\":\"Get help getting started\",\"text_field_layout\":\"How can I help you get started with riverpod: <141996229> <177968961>\",\"steps\":[{\"type\":\"search_in_sources\",\"query\":\"<141996229> Reference Code: <177968961>\",\"data_sources\":[\"<359719735>\",\"<519739999>\"],\"outputs\":[\"<888618225>\"],\"version\":\"0.0.1\"},{\"type\":\"prompt_query\",\"prompt\":\"You're a Flutter/Dart coding assistant helping user get started with riverpod.\\n              \\n              Here is users' query: <141996229> and an attached code snippet from their codebase: <177968961>\\n              \\n              Answer user's question by taking the below available documents as a reference:\\n              \\n              <888618225>\\n              \\n              If the documents are not relevant, still help the user as much as you can while letting user know \\\"I'm answering from my internal knowledge\\\".\\n              \\n              Provide user with code snippets wherever helpful\",\"outputs\":[\"<691922691>\"],\"version\":\"0.0.1\"},{\"type\":\"append_to_chat\",\"value\":\"<691922691>\",\"version\":\"0.0.1\"}],\"registered_inputs\":[{\"id\":\"141996229\",\"display_text\":\"Query\",\"type\":\"string_input\",\"optional\":false,\"version\":\"0.0.1\"},{\"id\":\"177968961\",\"display_text\":\"Reference code\",\"type\":\"code_input\",\"optional\":true,\"version\":\"0.0.1\"}],\"registered_outputs\":[{\"id\":\"888618225\",\"type\":\"match_document_output\",\"version\":\"0.0.1\"},{\"id\":\"691922691\",\"type\":\"prompt_output\",\"version\":\"0.0.1\"}],\"version\":\"0.0.1\"},{\"slug\":\"/generate\",\"intent\":\"Generate custom providers\",\"text_field_layout\":\"Generate the riverpod provider code for <622934139> <208791895>\",\"steps\":[{\"type\":\"prompt_query\",\"prompt\":\"Here are what the different kinds of available riverpod providers:\\n              \\n              ## Provider\\t\\n              - Returns any type\\t\\n              - A service class / computed property (filtered list)\\n              - typically used for:\\n                caching computations\\n                exposing a value to other providers (such as a Repository/HttpClient).\\n                offering a way for tests or widgets to override a value.\\n                reducing rebuilds of providers/widgets without having to use select.\\n\\n              ## StateProvider\\t\\n              - Returns any type\\t\\n              - A filter condition / simple state object\\n              - StateProvider exists primarily to allow the modification of simple variables by the User Interface.\\n              The state of a StateProvider is typically one of:\\n\\n              an enum, such as a filter type\\n              a String, typically the raw content of a text field\\n              a boolean, for checkboxes\\n              a number, for pagination or age form fields\\n              You should not use StateProvider if:\\n\\n              your state needs validation logic\\n              your state is a complex object (such as a custom class, a list/map, ...)\\n              the logic for modifying your state is more advanced than a simple count++.\\n              For more advanced cases, consider using NotifierProvider instead and create a Notifier class.\\n              While the initial boilerplate will be a bit larger, having a custom Notifier class is critical for the long-term maintainability of your project as it centralizes the business logic of your state in a single place.\\n\\n              ## FutureProvider\\t\\n              - Returns a Future of any type\\t\\n              - A result from an API call\\n              - FutureProvider is the equivalent of Provider but for asynchronous code.\\n\\n              FutureProvider is typically used for:\\n\\n                performing and caching asynchronous operations (such as network requests)\\n                nicely handling error/loading states of asynchronous operations\\n                combining multiple asynchronous values into another value\\n              FutureProvider gains a lot when combined with ref.watch. This combination allows automatic re-fetching of some data when some variables change, ensuring that we always have the most up-to-date value.\\n\\n              ## StreamProvider\\t\\n              - Returns a Stream of any type\\t\\n              - A stream of results from an API\\n              - StreamProvider is similar to FutureProvider but for Streams instead of Futures.\\n\\n              StreamProvider is usually used for:\\n\\n                listening to Firebase or web-sockets\\n                rebuilding another provider every few seconds\\n                Since Streams naturally expose a way for listening to updates, some may think that using StreamProvider has a low value. In particular, you may believe that Flutter's StreamBuilder would work just as well for listening to a Stream, but this is a mistake.\\n\\n              Using StreamProvider over StreamBuilder has numerous benefits:\\n\\n                it allows other providers to listen to the stream using ref.watch.\\n                it ensures that loading and error cases are properly handled, thanks to AsyncValue.\\n                it removes the need for having to differentiate broadcast streams vs normal streams.\\n                it caches the latest value emitted by the stream, ensuring that if a listener is added after an event is emitted, the listener will still have immediate access to the most up-to-date event.\\n                it allows easily mocking the stream during tests by overriding the StreamProvider.\\n\\n              ## NotifierProvider\\t(recommended choice for complex and scalable cases.)\\n              - Returns a subclass of (Async)Notifier\\t\\n              - A complex state object that is immutable except through an interface\\n              - NotifierProvider is a provider that is used to listen to and expose a Notifier.\\n              AsyncNotifierProvider is a provider that is used to listen to and expose an AsyncNotifier. AsyncNotifier is a Notifier that can be asynchronously initialized.\\n              (Async)NotifierProvider along with (Async)Notifier is Riverpod's recommended solution for managing state which may change in reaction to a user interaction.\\n\\n              It is typically used for:\\n\\n                exposing a state which can change over time after reacting to custom events.\\n                centralizing the logic for modifying some state (aka \\\"business logic\\\") in a single place, improving maintainability over time.\\n\\n\\n              From the above choices, while provider(s) do you think are the best fit for user's usecase to generate <622934139> <208791895>.\\n\\n              Simply provide the name of the provider(s) and reason they are the right fit.\\n              \",\"outputs\":[\"<866621126>\"],\"version\":\"0.0.1\"},{\"type\":\"search_in_sources\",\"query\":\"examples/instructions of writing code for a riverpod provider <866621126> for <622934139> <208791895>.\",\"data_sources\":[\"<519739999>\",\"<171935882>\"],\"outputs\":[\"<1049659474>\"],\"version\":\"0.0.1\"},{\"type\":\"prompt_query\",\"prompt\":\"You're a Flutter/Dart coding assistant. Generate riverpod provider related code for users based on their\\n          \\n          Instructions: <622934139>\\n          Code Reference:\\n          <208791895>\\n          \\n          We think the below choice of the correct provider and reasoning for it,\\n          <866621126>\\n          \\n          Documentation or examples of the above provider choice,\\n          <1049659474>\\n          \\n          Generate the code that user has requested for.\\n          \",\"outputs\":[\"<875495641>\"],\"version\":\"0.0.1\"},{\"type\":\"append_to_chat\",\"value\":\"<875495641>\",\"version\":\"0.0.1\"}],\"registered_inputs\":[{\"id\":\"622934139\",\"display_text\":\"Generate Instructions\",\"type\":\"string_input\",\"optional\":false,\"version\":\"0.0.1\"},{\"id\":\"208791895\",\"display_text\":\"Reference\",\"type\":\"code_input\",\"optional\":true,\"version\":\"0.0.1\"}],\"registered_outputs\":[{\"id\":\"866621126\",\"type\":\"prompt_output\",\"version\":\"0.0.1\"},{\"id\":\"1049659474\",\"type\":\"match_document_output\",\"version\":\"0.0.1\"},{\"id\":\"875495641\",\"type\":\"prompt_output\",\"version\":\"0.0.1\"}],\"version\":\"0.0.1\"},{\"slug\":\"/test\",\"intent\":\"Write tests for your riverpod objects\",\"text_field_layout\":\"Generate test for your riverpod <670906744> with <447376049>\\n\\nOptionally attach any supporting code: <918117033> <326150862> <453991029>\",\"steps\":[{\"type\":\"prompt_query\",\"prompt\":\"Write tests for the Flutter riverpod related code <670906744> with instructions <447376049>. \\n\\n      Here are some contextual code or references provided by the user:\\n\\n      <918117033>\\n\\n      <326150862>\\n\\n      <453991029>\\n\\nHere is the official testing documentation for riverpod for you reference:\\n\\n<Start of documentation>\\n\\nTesting your providers\\n\\nA core part of the Riverpod API is the ability to test your providers in isolation.\\n\\nFor a proper test suite, there are a few challenges to overcome:\\n\\nTests should not share state. This means that new tests should not be affected by the previous tests.\\nTests should give us the ability to mock certain functionalities to achieve the desired state.\\nThe test environment should be as close as possible to the real environment.\\nFortunately, Riverpod makes it easy to achieve all of these goals.\\n\\nSetting up a test\\n\\nWhen defining a test with Riverpod, there are two main scenarios:\\n\\nUnit tests, usually with no Flutter dependency. This can be useful for testing the behavior of a provider in isolation.\\nWidget tests, usually with a Flutter dependency. This can be useful for testing the behavior of a widget that uses a provider.\\nUnit tests\\n\\nUnit tests are defined using the test function from package:test.\\n\\nThe main difference with any other test is that we will want to create a ProviderContainer object. This object will enable our test to interact with providers.\\n\\nIt is encouraged to make a testing utility for both creating and disposing of a ProviderContainer object:\\n\\nimport 'package:riverpod/riverpod.dart';\\nimport 'package:test/test.dart';\\n\\n/// A testing utility which creates a [ProviderContainer] and automatically\\n/// disposes it at the end of the test.\\nProviderContainer createContainer({\\n  ProviderContainer? parent,\\n  List<Override> overrides = const [],\\n  List<ProviderObserver>? observers,\\n}) {\\n  // Create a ProviderContainer, and optionally allow specifying parameters.\\n  final container = ProviderContainer(\\n    parent: parent,\\n    overrides: overrides,\\n    observers: observers,\\n  );\\n\\n  // When the test ends, dispose the container.\\n  addTearDown(container.dispose);\\n\\n  return container;\\n}\\n\\nThen, we can define a test using this utility:\\n\\nvoid main() {\\n  test('Some description', () {\\n    // Create a ProviderContainer for this test.\\n    // DO NOT share ProviderContainers between tests.\\n    final container = createContainer();\\n\\n    // TODO: use the container to test your application.\\n    expect(\\n      container.read(provider),\\n      equals('some value'),\\n    );\\n  });\\n}\\n\\nNow that we have a ProviderContainer, we can use it to read providers using:\\n\\ncontainer.read, to read the current value of a provider.\\ncontainer.listen, to listen to a provider and be notified of changes.\\nCAUTION\\nBe careful when using container.read when providers are automatically disposed.\\nIf your provider is not listened to, chances are that its state will get destroyed in the middle of your test.\\n\\nIn that case, consider using container.listen.\\nIts return value enables reading the current value of provider anyway, but will also ensure that the provider is not disposed in the middle of your test:\\n\\n    final subscription = container.listen<String>(provider, (_, __) {});\\n\\n    expect(\\n      // Equivalent to `container.read(provider)`\\n      // But the provider will not be disposed unless \\\"subscription\\\" is disposed.\\n      subscription.read(),\\n      'Some value',\\n    );\\n    \\n\\n\\nWidget tests\\n\\nWidget tests are defined using the testWidgets function from package:flutter_test.\\n\\nIn this case, the main difference with usual Widget tests is that we must add a ProviderScope widget at the root of tester.pumpWidget:\\n\\nvoid main() {\\n  testWidgets('Some description', (tester) async {\\n    await tester.pumpWidget(\\n      const ProviderScope(child: YourWidgetYouWantToTest()),\\n    );\\n  });\\n}\\n\\nThis is similar to what we do when we enable Riverpod in our Flutter app.\\n\\nThen, we can use tester to interact with our widget. Alternatively if you want to interact with providers, you can obtain a ProviderContainer. One can be obtained using ProviderScope.containerOf(buildContext).\\nBy using tester, we can therefore write the following:\\n\\n    final element = tester.element(find.byType(YourWidgetYouWantToTest));\\n    final container = ProviderScope.containerOf(element);\\n    \\n\\nWe can then use it to read providers. Here's a full example:\\n\\nvoid main() {\\n  testWidgets('Some description', (tester) async {\\n    await tester.pumpWidget(\\n      const ProviderScope(child: YourWidgetYouWantToTest()),\\n    );\\n\\n    final element = tester.element(find.byType(YourWidgetYouWantToTest));\\n    final container = ProviderScope.containerOf(element);\\n\\n    // TODO interact with your providers\\n    expect(\\n      container.read(provider),\\n      'some value',\\n    );\\n  });\\n}\\n\\nMocking providers​\\n\\nSo far, we've seen how to set up a test and basic interactions with providers. However, in some cases, we may want to mock a provider.\\n\\nThe cool part: All providers can be mocked by default, without any additional setup.\\nThis is possible by specifying the overrides parameter on either ProviderScope or ProviderContainer.\\n\\nConsider the following provider:\\n\\n// An eagerly initialized provider.\\n@riverpod\\nFuture<String> example(ExampleRef ref) async => 'Hello world';\\n\\nWe can mock it using:\\n\\n    // In unit tests, by reusing our previous \\\"createContainer\\\" utility.\\n    final container = createContainer(\\n      // We can specify a list of providers to mock:\\n      overrides: [\\n        // In this case, we are mocking \\\"exampleProvider\\\".\\n        exampleProvider.overrideWith((ref) {\\n          // This function is the typical initialization function of a provider.\\n          // This is where you normally call \\\"ref.watch\\\" and return the initial state.\\n\\n          // Let's replace the default \\\"Hello world\\\" with a custom value.\\n          // Then, interacting with `exampleProvider` will return this value.\\n          return 'Hello from tests';\\n        }),\\n      ],\\n    );\\n\\n    // We can also do the same thing in widget tests using ProviderScope:\\n    await tester.pumpWidget(\\n      ProviderScope(\\n        // ProviderScopes have the exact same \\\"overrides\\\" parameter\\n        overrides: [\\n          // Same as before\\n          exampleProvider.overrideWith((ref) => 'Hello from tests'),\\n        ],\\n        child: const YourWidgetYouWantToTest(),\\n      ),\\n    );\\n    \\n\\n\\nSpying on changes in a provider​\\n\\nSince we obtained a ProviderContainer in our tests, it is possible to use it to \\\"listen\\\" to a provider:\\n\\n    container.listen<String>(\\n      provider,\\n      (previous, next) {\\n        print('The provider changed from $previous to $next');\\n      },\\n    );\\n    \\n\\nYou can then combine this with packages such as mockito or mocktail to use their verify API.\\nOr more simply, you can add all changes in a list and assert on it.\\n\\nAwaiting asynchronous providers​\\n\\nIn Riverpod, it is very common for providers to return a Future/Stream.\\nIn that case, chances are that our tests need to await for that asynchronous operation to be completed.\\n\\nOne way to do so is to read the .future of a provider:\\n\\n    // TODO: use the container to test your application.\\n    // Our expectation is asynchronous, so we should use \\\"expectLater\\\"\\n    await expectLater(\\n      // We read \\\"provider.future\\\" instead of \\\"provider\\\".\\n      // This is possible on asynchronous providers, and returns a future\\n      // which will resolve with the value of the provider.\\n      container.read(provider.future),\\n      // We can verify that the future resolves with the expected value.\\n      // Alternatively we can use \\\"throwsA\\\" for errors.\\n      completion('some value'),\\n    );\\n    \\n\\nMocking Notifiers​\\n\\nIt is generally discouraged to mock Notifiers. This is because Notifiers cannot be instantiated on their own, and only work when used as part of a Provider.\\n\\nInstead, you should likely introduce a level of abstraction in the logic of your Notifier, such that you can mock that abstraction. For instance, rather than mocking a Notifier, you could mock a \\\"repository\\\" that the Notifier uses to fetch data from.\\n\\nIf you insist on mocking a Notifier, there is a special consideration to create such a mock: Your mock must subclass the original Notifier base class: You cannot \\\"implement\\\" Notifier, as this would break the interface.\\n\\nAs such, when mocking a Notifier, instead of writing the following mockito code:\\n\\nclass MyNotifierMock with Mock implements MyNotifier {}\\n\\nYou should instead write:\\n\\n@riverpod\\nclass MyNotifier extends _$MyNotifier {\\n  @override\\n  int build() => throw UnimplementedError();\\n}\\n\\n// Your mock needs to subclass the Notifier base-class corresponding\\n// to whatever your notifier uses\\nclass MyNotifierMock extends _$MyNotifier with Mock implements MyNotifier {}\\n\\nFor this to work, your mock will have to be placed in the same file as the Notifier you are mocking. Otherwise you would not have access to the _$MyNotifier class.\\n\\nThen, to use your notifier you could do:\\n\\nvoid main() {\\n  test('Some description', () {\\n    final container = createContainer(\\n      // Override the provider to have it create our mock Notifier.\\n      overrides: [myNotifierProvider.overrideWith(MyNotifierMock.new)],\\n    );\\n\\n    // Then obtain the mocked notifier through the container:\\n    final notifier = container.read(myNotifierProvider.notifier);\\n\\n    // You can then interact with the notifier as you would with the real one:\\n    notifier.state = 42;\\n  });\\n}\\n<End of documentation>\\n\\nGenerate the test for the user's code based on the instructions.\\n\",\"outputs\":[\"<215257160>\"],\"version\":\"0.0.1\"},{\"type\":\"append_to_chat\",\"value\":\"<215257160>\",\"version\":\"0.0.1\"}],\"registered_inputs\":[{\"id\":\"670906744\",\"display_text\":\"Test Object\",\"type\":\"code_input\",\"optional\":false,\"version\":\"0.0.1\"},{\"id\":\"447376049\",\"display_text\":\"Instructions\",\"type\":\"string_input\",\"optional\":true,\"version\":\"0.0.1\"},{\"id\":\"918117033\",\"display_text\":\"Reference\",\"type\":\"code_input\",\"optional\":true,\"version\":\"0.0.1\"},{\"id\":\"326150862\",\"display_text\":\"Reference\",\"type\":\"code_input\",\"optional\":true,\"version\":\"0.0.1\"},{\"id\":\"453991029\",\"display_text\":\"Reference\",\"type\":\"code_input\",\"optional\":true,\"version\":\"0.0.1\"}],\"registered_outputs\":[{\"id\":\"215257160\",\"type\":\"prompt_output\",\"version\":\"0.0.1\"}],\"version\":\"0.0.1\"}],\"min_cli_version\":\"0.0.1\"}"